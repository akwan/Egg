// source: schema.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.Artifact', null, global);
goog.exportSymbol('proto.ArtifactSpec', null, global);
goog.exportSymbol('proto.ArtifactSpec.Level', null, global);
goog.exportSymbol('proto.ArtifactSpec.Name', null, global);
goog.exportSymbol('proto.ArtifactSpec.Rarity', null, global);
goog.exportSymbol('proto.ArtifactSpec.Type', null, global);
goog.exportSymbol('proto.Build', null, global);
goog.exportSymbol('proto.Builds', null, global);
goog.exportSymbol('proto.Config', null, global);
goog.exportSymbol('proto.Egg', null, global);
goog.exportSymbol('proto.Stone', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Builds = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Builds.repeatedFields_, null);
};
goog.inherits(proto.Builds, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Builds.displayName = 'proto.Builds';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Build = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Build.repeatedFields_, null);
};
goog.inherits(proto.Build, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Build.displayName = 'proto.Build';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Artifact = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Artifact.repeatedFields_, null);
};
goog.inherits(proto.Artifact, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Artifact.displayName = 'proto.Artifact';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Stone = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Stone, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Stone.displayName = 'proto.Stone';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Config = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Config, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Config.displayName = 'proto.Config';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ArtifactSpec = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ArtifactSpec, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ArtifactSpec.displayName = 'proto.ArtifactSpec';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Builds.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Builds.prototype.toObject = function(opt_includeInstance) {
  return proto.Builds.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Builds} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Builds.toObject = function(includeInstance, msg) {
  var f, obj = {
    buildsList: jspb.Message.toObjectList(msg.getBuildsList(),
    proto.Build.toObject, includeInstance),
    config: (f = msg.getConfig()) && proto.Config.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Builds}
 */
proto.Builds.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Builds;
  return proto.Builds.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Builds} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Builds}
 */
proto.Builds.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Build;
      reader.readMessage(value,proto.Build.deserializeBinaryFromReader);
      msg.addBuilds(value);
      break;
    case 2:
      var value = new proto.Config;
      reader.readMessage(value,proto.Config.deserializeBinaryFromReader);
      msg.setConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Builds.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Builds.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Builds} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Builds.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBuildsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Build.serializeBinaryToWriter
    );
  }
  f = message.getConfig();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Config.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Build builds = 1;
 * @return {!Array<!proto.Build>}
 */
proto.Builds.prototype.getBuildsList = function() {
  return /** @type{!Array<!proto.Build>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Build, 1));
};


/**
 * @param {!Array<!proto.Build>} value
 * @return {!proto.Builds} returns this
*/
proto.Builds.prototype.setBuildsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Build=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Build}
 */
proto.Builds.prototype.addBuilds = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Build, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Builds} returns this
 */
proto.Builds.prototype.clearBuildsList = function() {
  return this.setBuildsList([]);
};


/**
 * optional Config config = 2;
 * @return {?proto.Config}
 */
proto.Builds.prototype.getConfig = function() {
  return /** @type{?proto.Config} */ (
    jspb.Message.getWrapperField(this, proto.Config, 2));
};


/**
 * @param {?proto.Config|undefined} value
 * @return {!proto.Builds} returns this
*/
proto.Builds.prototype.setConfig = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Builds} returns this
 */
proto.Builds.prototype.clearConfig = function() {
  return this.setConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Builds.prototype.hasConfig = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Build.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Build.prototype.toObject = function(opt_includeInstance) {
  return proto.Build.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Build} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Build.toObject = function(includeInstance, msg) {
  var f, obj = {
    artifactsList: jspb.Message.toObjectList(msg.getArtifactsList(),
    proto.Artifact.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Build}
 */
proto.Build.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Build;
  return proto.Build.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Build} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Build}
 */
proto.Build.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Artifact;
      reader.readMessage(value,proto.Artifact.deserializeBinaryFromReader);
      msg.addArtifacts(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Build.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Build.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Build} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Build.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getArtifactsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Artifact.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Artifact artifacts = 1;
 * @return {!Array<!proto.Artifact>}
 */
proto.Build.prototype.getArtifactsList = function() {
  return /** @type{!Array<!proto.Artifact>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Artifact, 1));
};


/**
 * @param {!Array<!proto.Artifact>} value
 * @return {!proto.Build} returns this
*/
proto.Build.prototype.setArtifactsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Artifact=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Artifact}
 */
proto.Build.prototype.addArtifacts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Artifact, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Build} returns this
 */
proto.Build.prototype.clearArtifactsList = function() {
  return this.setArtifactsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Artifact.repeatedFields_ = [10];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Artifact.prototype.toObject = function(opt_includeInstance) {
  return proto.Artifact.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Artifact} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Artifact.toObject = function(includeInstance, msg) {
  var f, obj = {
    afxId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    afxLevel: jspb.Message.getFieldWithDefault(msg, 2, 0),
    afxRarity: jspb.Message.getFieldWithDefault(msg, 3, 0),
    stonesList: jspb.Message.toObjectList(msg.getStonesList(),
    proto.Stone.toObject, includeInstance),
    isEmpty: jspb.Message.getBooleanFieldWithDefault(msg, 20, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Artifact}
 */
proto.Artifact.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Artifact;
  return proto.Artifact.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Artifact} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Artifact}
 */
proto.Artifact.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.ArtifactSpec.Name} */ (reader.readEnum());
      msg.setAfxId(value);
      break;
    case 2:
      var value = /** @type {!proto.ArtifactSpec.Level} */ (reader.readEnum());
      msg.setAfxLevel(value);
      break;
    case 3:
      var value = /** @type {!proto.ArtifactSpec.Rarity} */ (reader.readEnum());
      msg.setAfxRarity(value);
      break;
    case 10:
      var value = new proto.Stone;
      reader.readMessage(value,proto.Stone.deserializeBinaryFromReader);
      msg.addStones(value);
      break;
    case 20:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsEmpty(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Artifact.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Artifact.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Artifact} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Artifact.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAfxId();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getAfxLevel();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getAfxRarity();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getStonesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      10,
      f,
      proto.Stone.serializeBinaryToWriter
    );
  }
  f = message.getIsEmpty();
  if (f) {
    writer.writeBool(
      20,
      f
    );
  }
};


/**
 * optional ArtifactSpec.Name afx_id = 1;
 * @return {!proto.ArtifactSpec.Name}
 */
proto.Artifact.prototype.getAfxId = function() {
  return /** @type {!proto.ArtifactSpec.Name} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.ArtifactSpec.Name} value
 * @return {!proto.Artifact} returns this
 */
proto.Artifact.prototype.setAfxId = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional ArtifactSpec.Level afx_level = 2;
 * @return {!proto.ArtifactSpec.Level}
 */
proto.Artifact.prototype.getAfxLevel = function() {
  return /** @type {!proto.ArtifactSpec.Level} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.ArtifactSpec.Level} value
 * @return {!proto.Artifact} returns this
 */
proto.Artifact.prototype.setAfxLevel = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional ArtifactSpec.Rarity afx_rarity = 3;
 * @return {!proto.ArtifactSpec.Rarity}
 */
proto.Artifact.prototype.getAfxRarity = function() {
  return /** @type {!proto.ArtifactSpec.Rarity} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.ArtifactSpec.Rarity} value
 * @return {!proto.Artifact} returns this
 */
proto.Artifact.prototype.setAfxRarity = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * repeated Stone stones = 10;
 * @return {!Array<!proto.Stone>}
 */
proto.Artifact.prototype.getStonesList = function() {
  return /** @type{!Array<!proto.Stone>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Stone, 10));
};


/**
 * @param {!Array<!proto.Stone>} value
 * @return {!proto.Artifact} returns this
*/
proto.Artifact.prototype.setStonesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 10, value);
};


/**
 * @param {!proto.Stone=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Stone}
 */
proto.Artifact.prototype.addStones = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 10, opt_value, proto.Stone, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Artifact} returns this
 */
proto.Artifact.prototype.clearStonesList = function() {
  return this.setStonesList([]);
};


/**
 * optional bool is_empty = 20;
 * @return {boolean}
 */
proto.Artifact.prototype.getIsEmpty = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 20, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Artifact} returns this
 */
proto.Artifact.prototype.setIsEmpty = function(value) {
  return jspb.Message.setProto3BooleanField(this, 20, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Stone.prototype.toObject = function(opt_includeInstance) {
  return proto.Stone.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Stone} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Stone.toObject = function(includeInstance, msg) {
  var f, obj = {
    afxId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    afxLevel: jspb.Message.getFieldWithDefault(msg, 2, 0),
    isEmpty: jspb.Message.getBooleanFieldWithDefault(msg, 10, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Stone}
 */
proto.Stone.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Stone;
  return proto.Stone.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Stone} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Stone}
 */
proto.Stone.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.ArtifactSpec.Name} */ (reader.readEnum());
      msg.setAfxId(value);
      break;
    case 2:
      var value = /** @type {!proto.ArtifactSpec.Level} */ (reader.readEnum());
      msg.setAfxLevel(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsEmpty(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Stone.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Stone.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Stone} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Stone.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAfxId();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getAfxLevel();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getIsEmpty();
  if (f) {
    writer.writeBool(
      10,
      f
    );
  }
};


/**
 * optional ArtifactSpec.Name afx_id = 1;
 * @return {!proto.ArtifactSpec.Name}
 */
proto.Stone.prototype.getAfxId = function() {
  return /** @type {!proto.ArtifactSpec.Name} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.ArtifactSpec.Name} value
 * @return {!proto.Stone} returns this
 */
proto.Stone.prototype.setAfxId = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional ArtifactSpec.Level afx_level = 2;
 * @return {!proto.ArtifactSpec.Level}
 */
proto.Stone.prototype.getAfxLevel = function() {
  return /** @type {!proto.ArtifactSpec.Level} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.ArtifactSpec.Level} value
 * @return {!proto.Stone} returns this
 */
proto.Stone.prototype.setAfxLevel = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional bool is_empty = 10;
 * @return {boolean}
 */
proto.Stone.prototype.getIsEmpty = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 10, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Stone} returns this
 */
proto.Stone.prototype.setIsEmpty = function(value) {
  return jspb.Message.setProto3BooleanField(this, 10, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Config.prototype.toObject = function(opt_includeInstance) {
  return proto.Config.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Config} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Config.toObject = function(includeInstance, msg) {
  var f, obj = {
    prophecyEggs: jspb.Message.getFieldWithDefault(msg, 1, 0),
    soulEggs: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    soulEggsInput: jspb.Message.getFieldWithDefault(msg, 3, ""),
    isEnlightenment: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Config}
 */
proto.Config.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Config;
  return proto.Config.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Config} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Config}
 */
proto.Config.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setProphecyEggs(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSoulEggs(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSoulEggsInput(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsEnlightenment(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Config.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Config.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Config} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Config.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProphecyEggs();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getSoulEggs();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getSoulEggsInput();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getIsEnlightenment();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional uint32 prophecy_eggs = 1;
 * @return {number}
 */
proto.Config.prototype.getProphecyEggs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Config} returns this
 */
proto.Config.prototype.setProphecyEggs = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional double soul_eggs = 2;
 * @return {number}
 */
proto.Config.prototype.getSoulEggs = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Config} returns this
 */
proto.Config.prototype.setSoulEggs = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional string soul_eggs_input = 3;
 * @return {string}
 */
proto.Config.prototype.getSoulEggsInput = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.Config} returns this
 */
proto.Config.prototype.setSoulEggsInput = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bool is_enlightenment = 4;
 * @return {boolean}
 */
proto.Config.prototype.getIsEnlightenment = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Config} returns this
 */
proto.Config.prototype.setIsEnlightenment = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ArtifactSpec.prototype.toObject = function(opt_includeInstance) {
  return proto.ArtifactSpec.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ArtifactSpec} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ArtifactSpec.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, 0),
    level: jspb.Message.getFieldWithDefault(msg, 2, 0),
    rarity: jspb.Message.getFieldWithDefault(msg, 3, 0),
    egg: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ArtifactSpec}
 */
proto.ArtifactSpec.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ArtifactSpec;
  return proto.ArtifactSpec.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ArtifactSpec} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ArtifactSpec}
 */
proto.ArtifactSpec.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.ArtifactSpec.Name} */ (reader.readEnum());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {!proto.ArtifactSpec.Level} */ (reader.readEnum());
      msg.setLevel(value);
      break;
    case 3:
      var value = /** @type {!proto.ArtifactSpec.Rarity} */ (reader.readEnum());
      msg.setRarity(value);
      break;
    case 4:
      var value = /** @type {!proto.Egg} */ (reader.readEnum());
      msg.setEgg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ArtifactSpec.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ArtifactSpec.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ArtifactSpec} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ArtifactSpec.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getLevel();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getRarity();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getEgg();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.ArtifactSpec.Name = {
  LUNAR_TOTEM: 0,
  NEODYMIUM_MEDALLION: 3,
  BEAK_OF_MIDAS: 4,
  LIGHT_OF_EGGENDIL: 5,
  DEMETERS_NECKLACE: 6,
  VIAL_MARTIAN_DUST: 7,
  ORNATE_GUSSET: 8,
  THE_CHALICE: 9,
  BOOK_OF_BASAN: 10,
  PHOENIX_FEATHER: 11,
  TUNGSTEN_ANKH: 12,
  AURELIAN_BROOCH: 21,
  CARVED_RAINSTICK: 22,
  PUZZLE_CUBE: 23,
  QUANTUM_METRONOME: 24,
  SHIP_IN_A_BOTTLE: 25,
  TACHYON_DEFLECTOR: 26,
  INTERSTELLAR_COMPASS: 27,
  DILITHIUM_MONOCLE: 28,
  TITANIUM_ACTUATOR: 29,
  MERCURYS_LENS: 30,
  TACHYON_STONE: 1,
  DILITHIUM_STONE: 31,
  SHELL_STONE: 32,
  LUNAR_STONE: 33,
  SOUL_STONE: 34,
  PROPHECY_STONE: 39,
  QUANTUM_STONE: 36,
  TERRA_STONE: 37,
  LIFE_STONE: 38,
  CLARITY_STONE: 40,
  EXTRATERRESTRIAL_ALUMINUM: 13,
  ANCIENT_TUNGSTEN: 14,
  SPACE_ROCKS: 15,
  ALIEN_WOOD: 16,
  GOLD_METEORITE: 17,
  TAU_CETI_GEODE: 18,
  CENTAURIAN_STEEL: 19,
  ERIDANI_FEATHER: 20,
  DRONE_PARTS: 35,
  CELESTIAL_BRONZE: 41,
  LALANDE_HIDE: 42,
  SOLAR_TITANIUM: 43,
  TACHYON_STONE_FRAGMENT: 2,
  DILITHIUM_STONE_FRAGMENT: 44,
  SHELL_STONE_FRAGMENT: 45,
  LUNAR_STONE_FRAGMENT: 46,
  SOUL_STONE_FRAGMENT: 47,
  PROPHECY_STONE_FRAGMENT: 48,
  QUANTUM_STONE_FRAGMENT: 49,
  TERRA_STONE_FRAGMENT: 50,
  LIFE_STONE_FRAGMENT: 51,
  CLARITY_STONE_FRAGMENT: 52,
  UNKNOWN: 10000
};

/**
 * @enum {number}
 */
proto.ArtifactSpec.Level = {
  INFERIOR: 0,
  LESSER: 1,
  NORMAL: 2,
  GREATER: 3,
  SUPERIOR: 4
};

/**
 * @enum {number}
 */
proto.ArtifactSpec.Rarity = {
  COMMON: 0,
  RARE: 1,
  EPIC: 2,
  LEGENDARY: 3
};

/**
 * @enum {number}
 */
proto.ArtifactSpec.Type = {
  ARTIFACT: 0,
  STONE: 1,
  INGREDIENT: 2,
  STONE_INGREDIENT: 3
};

/**
 * optional Name name = 1;
 * @return {!proto.ArtifactSpec.Name}
 */
proto.ArtifactSpec.prototype.getName = function() {
  return /** @type {!proto.ArtifactSpec.Name} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.ArtifactSpec.Name} value
 * @return {!proto.ArtifactSpec} returns this
 */
proto.ArtifactSpec.prototype.setName = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional Level level = 2;
 * @return {!proto.ArtifactSpec.Level}
 */
proto.ArtifactSpec.prototype.getLevel = function() {
  return /** @type {!proto.ArtifactSpec.Level} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.ArtifactSpec.Level} value
 * @return {!proto.ArtifactSpec} returns this
 */
proto.ArtifactSpec.prototype.setLevel = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional Rarity rarity = 3;
 * @return {!proto.ArtifactSpec.Rarity}
 */
proto.ArtifactSpec.prototype.getRarity = function() {
  return /** @type {!proto.ArtifactSpec.Rarity} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.ArtifactSpec.Rarity} value
 * @return {!proto.ArtifactSpec} returns this
 */
proto.ArtifactSpec.prototype.setRarity = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional Egg egg = 4;
 * @return {!proto.Egg}
 */
proto.ArtifactSpec.prototype.getEgg = function() {
  return /** @type {!proto.Egg} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.Egg} value
 * @return {!proto.ArtifactSpec} returns this
 */
proto.ArtifactSpec.prototype.setEgg = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * @enum {number}
 */
proto.Egg = {
  INVALID_EGG: 0,
  EDIBLE: 1,
  SUPERFOOD: 2,
  MEDICAL: 3,
  ROCKET_FUEL: 4,
  SUPER_MATERIAL: 5,
  FUSION: 6,
  QUANTUM: 7,
  IMMORTALITY: 8,
  TACHYON: 9,
  GRAVITON: 10,
  DILITHIUM: 11,
  PRODIGY: 12,
  TERRAFORM: 13,
  ANTIMATTER: 14,
  DARK_MATTER: 15,
  AI: 16,
  NEBULA: 17,
  UNIVERSE: 18,
  ENLIGHTENMENT: 19,
  CHOCOLATE: 100,
  EASTER: 101,
  WATERBALLOON: 102,
  FIREWORK: 103,
  PUMPKIN: 104,
  UNKNOWN: 1000
};

goog.object.extend(exports, proto);
