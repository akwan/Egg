/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/
import * as $protobuf from "protobufjs/minimal";

// Common aliases
const $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;

// Exported root namespace
const $root = $protobuf.roots["default"] || ($protobuf.roots["default"] = {});

export const aux = $root.aux = (() => {

    /**
     * Namespace aux.
     * @exports aux
     * @namespace
     */
    const aux = {};

    aux.ABBEntry = (function() {

        /**
         * Properties of a ABBEntry.
         * @memberof aux
         * @interface IABBEntry
         * @property {string|null} [filename] ABBEntry filename
         * @property {number|Long|null} [offset] ABBEntry offset
         * @property {number|Long|null} [size] ABBEntry size
         * @property {boolean|null} [compressed] ABBEntry compressed
         * @property {number|Long|null} [uncompressedSize] ABBEntry uncompressedSize
         */

        /**
         * Constructs a new ABBEntry.
         * @memberof aux
         * @classdesc Represents a ABBEntry.
         * @implements IABBEntry
         * @constructor
         * @param {aux.IABBEntry=} [properties] Properties to set
         */
        function ABBEntry(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ABBEntry filename.
         * @member {string} filename
         * @memberof aux.ABBEntry
         * @instance
         */
        ABBEntry.prototype.filename = "";

        /**
         * ABBEntry offset.
         * @member {number|Long} offset
         * @memberof aux.ABBEntry
         * @instance
         */
        ABBEntry.prototype.offset = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * ABBEntry size.
         * @member {number|Long} size
         * @memberof aux.ABBEntry
         * @instance
         */
        ABBEntry.prototype.size = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * ABBEntry compressed.
         * @member {boolean} compressed
         * @memberof aux.ABBEntry
         * @instance
         */
        ABBEntry.prototype.compressed = false;

        /**
         * ABBEntry uncompressedSize.
         * @member {number|Long} uncompressedSize
         * @memberof aux.ABBEntry
         * @instance
         */
        ABBEntry.prototype.uncompressedSize = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new ABBEntry instance using the specified properties.
         * @function create
         * @memberof aux.ABBEntry
         * @static
         * @param {aux.IABBEntry=} [properties] Properties to set
         * @returns {aux.ABBEntry} ABBEntry instance
         */
        ABBEntry.create = function create(properties) {
            return new ABBEntry(properties);
        };

        /**
         * Encodes the specified ABBEntry message. Does not implicitly {@link aux.ABBEntry.verify|verify} messages.
         * @function encode
         * @memberof aux.ABBEntry
         * @static
         * @param {aux.IABBEntry} message ABBEntry message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ABBEntry.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.filename != null && Object.hasOwnProperty.call(message, "filename"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.filename);
            if (message.offset != null && Object.hasOwnProperty.call(message, "offset"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.offset);
            if (message.size != null && Object.hasOwnProperty.call(message, "size"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.size);
            if (message.compressed != null && Object.hasOwnProperty.call(message, "compressed"))
                writer.uint32(/* id 4, wireType 0 =*/32).bool(message.compressed);
            if (message.uncompressedSize != null && Object.hasOwnProperty.call(message, "uncompressedSize"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.uncompressedSize);
            return writer;
        };

        /**
         * Encodes the specified ABBEntry message, length delimited. Does not implicitly {@link aux.ABBEntry.verify|verify} messages.
         * @function encodeDelimited
         * @memberof aux.ABBEntry
         * @static
         * @param {aux.IABBEntry} message ABBEntry message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ABBEntry.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ABBEntry message from the specified reader or buffer.
         * @function decode
         * @memberof aux.ABBEntry
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {aux.ABBEntry} ABBEntry
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ABBEntry.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.aux.ABBEntry();
            while (reader.pos < end) {
                let tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.filename = reader.string();
                    break;
                case 2:
                    message.offset = reader.uint64();
                    break;
                case 3:
                    message.size = reader.uint64();
                    break;
                case 4:
                    message.compressed = reader.bool();
                    break;
                case 5:
                    message.uncompressedSize = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ABBEntry message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof aux.ABBEntry
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {aux.ABBEntry} ABBEntry
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ABBEntry.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ABBEntry message.
         * @function verify
         * @memberof aux.ABBEntry
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ABBEntry.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.filename != null && message.hasOwnProperty("filename"))
                if (!$util.isString(message.filename))
                    return "filename: string expected";
            if (message.offset != null && message.hasOwnProperty("offset"))
                if (!$util.isInteger(message.offset) && !(message.offset && $util.isInteger(message.offset.low) && $util.isInteger(message.offset.high)))
                    return "offset: integer|Long expected";
            if (message.size != null && message.hasOwnProperty("size"))
                if (!$util.isInteger(message.size) && !(message.size && $util.isInteger(message.size.low) && $util.isInteger(message.size.high)))
                    return "size: integer|Long expected";
            if (message.compressed != null && message.hasOwnProperty("compressed"))
                if (typeof message.compressed !== "boolean")
                    return "compressed: boolean expected";
            if (message.uncompressedSize != null && message.hasOwnProperty("uncompressedSize"))
                if (!$util.isInteger(message.uncompressedSize) && !(message.uncompressedSize && $util.isInteger(message.uncompressedSize.low) && $util.isInteger(message.uncompressedSize.high)))
                    return "uncompressedSize: integer|Long expected";
            return null;
        };

        /**
         * Creates a ABBEntry message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof aux.ABBEntry
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {aux.ABBEntry} ABBEntry
         */
        ABBEntry.fromObject = function fromObject(object) {
            if (object instanceof $root.aux.ABBEntry)
                return object;
            let message = new $root.aux.ABBEntry();
            if (object.filename != null)
                message.filename = String(object.filename);
            if (object.offset != null)
                if ($util.Long)
                    (message.offset = $util.Long.fromValue(object.offset)).unsigned = true;
                else if (typeof object.offset === "string")
                    message.offset = parseInt(object.offset, 10);
                else if (typeof object.offset === "number")
                    message.offset = object.offset;
                else if (typeof object.offset === "object")
                    message.offset = new $util.LongBits(object.offset.low >>> 0, object.offset.high >>> 0).toNumber(true);
            if (object.size != null)
                if ($util.Long)
                    (message.size = $util.Long.fromValue(object.size)).unsigned = true;
                else if (typeof object.size === "string")
                    message.size = parseInt(object.size, 10);
                else if (typeof object.size === "number")
                    message.size = object.size;
                else if (typeof object.size === "object")
                    message.size = new $util.LongBits(object.size.low >>> 0, object.size.high >>> 0).toNumber(true);
            if (object.compressed != null)
                message.compressed = Boolean(object.compressed);
            if (object.uncompressedSize != null)
                if ($util.Long)
                    (message.uncompressedSize = $util.Long.fromValue(object.uncompressedSize)).unsigned = true;
                else if (typeof object.uncompressedSize === "string")
                    message.uncompressedSize = parseInt(object.uncompressedSize, 10);
                else if (typeof object.uncompressedSize === "number")
                    message.uncompressedSize = object.uncompressedSize;
                else if (typeof object.uncompressedSize === "object")
                    message.uncompressedSize = new $util.LongBits(object.uncompressedSize.low >>> 0, object.uncompressedSize.high >>> 0).toNumber(true);
            return message;
        };

        /**
         * Creates a plain object from a ABBEntry message. Also converts values to other types if specified.
         * @function toObject
         * @memberof aux.ABBEntry
         * @static
         * @param {aux.ABBEntry} message ABBEntry
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ABBEntry.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.defaults) {
                object.filename = "";
                if ($util.Long) {
                    let long = new $util.Long(0, 0, true);
                    object.offset = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.offset = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    let long = new $util.Long(0, 0, true);
                    object.size = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.size = options.longs === String ? "0" : 0;
                object.compressed = false;
                if ($util.Long) {
                    let long = new $util.Long(0, 0, true);
                    object.uncompressedSize = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.uncompressedSize = options.longs === String ? "0" : 0;
            }
            if (message.filename != null && message.hasOwnProperty("filename"))
                object.filename = message.filename;
            if (message.offset != null && message.hasOwnProperty("offset"))
                if (typeof message.offset === "number")
                    object.offset = options.longs === String ? String(message.offset) : message.offset;
                else
                    object.offset = options.longs === String ? $util.Long.prototype.toString.call(message.offset) : options.longs === Number ? new $util.LongBits(message.offset.low >>> 0, message.offset.high >>> 0).toNumber(true) : message.offset;
            if (message.size != null && message.hasOwnProperty("size"))
                if (typeof message.size === "number")
                    object.size = options.longs === String ? String(message.size) : message.size;
                else
                    object.size = options.longs === String ? $util.Long.prototype.toString.call(message.size) : options.longs === Number ? new $util.LongBits(message.size.low >>> 0, message.size.high >>> 0).toNumber(true) : message.size;
            if (message.compressed != null && message.hasOwnProperty("compressed"))
                object.compressed = message.compressed;
            if (message.uncompressedSize != null && message.hasOwnProperty("uncompressedSize"))
                if (typeof message.uncompressedSize === "number")
                    object.uncompressedSize = options.longs === String ? String(message.uncompressedSize) : message.uncompressedSize;
                else
                    object.uncompressedSize = options.longs === String ? $util.Long.prototype.toString.call(message.uncompressedSize) : options.longs === Number ? new $util.LongBits(message.uncompressedSize.low >>> 0, message.uncompressedSize.high >>> 0).toNumber(true) : message.uncompressedSize;
            return object;
        };

        /**
         * Converts this ABBEntry to JSON.
         * @function toJSON
         * @memberof aux.ABBEntry
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ABBEntry.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ABBEntry;
    })();

    aux.ABBIndex = (function() {

        /**
         * Properties of a ABBIndex.
         * @memberof aux
         * @interface IABBIndex
         * @property {Array.<aux.IABBEntry>|null} [entries] ABBIndex entries
         */

        /**
         * Constructs a new ABBIndex.
         * @memberof aux
         * @classdesc Represents a ABBIndex.
         * @implements IABBIndex
         * @constructor
         * @param {aux.IABBIndex=} [properties] Properties to set
         */
        function ABBIndex(properties) {
            this.entries = [];
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ABBIndex entries.
         * @member {Array.<aux.IABBEntry>} entries
         * @memberof aux.ABBIndex
         * @instance
         */
        ABBIndex.prototype.entries = $util.emptyArray;

        /**
         * Creates a new ABBIndex instance using the specified properties.
         * @function create
         * @memberof aux.ABBIndex
         * @static
         * @param {aux.IABBIndex=} [properties] Properties to set
         * @returns {aux.ABBIndex} ABBIndex instance
         */
        ABBIndex.create = function create(properties) {
            return new ABBIndex(properties);
        };

        /**
         * Encodes the specified ABBIndex message. Does not implicitly {@link aux.ABBIndex.verify|verify} messages.
         * @function encode
         * @memberof aux.ABBIndex
         * @static
         * @param {aux.IABBIndex} message ABBIndex message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ABBIndex.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.entries != null && message.entries.length)
                for (let i = 0; i < message.entries.length; ++i)
                    $root.aux.ABBEntry.encode(message.entries[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ABBIndex message, length delimited. Does not implicitly {@link aux.ABBIndex.verify|verify} messages.
         * @function encodeDelimited
         * @memberof aux.ABBIndex
         * @static
         * @param {aux.IABBIndex} message ABBIndex message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ABBIndex.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ABBIndex message from the specified reader or buffer.
         * @function decode
         * @memberof aux.ABBIndex
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {aux.ABBIndex} ABBIndex
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ABBIndex.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.aux.ABBIndex();
            while (reader.pos < end) {
                let tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.entries && message.entries.length))
                        message.entries = [];
                    message.entries.push($root.aux.ABBEntry.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ABBIndex message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof aux.ABBIndex
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {aux.ABBIndex} ABBIndex
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ABBIndex.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ABBIndex message.
         * @function verify
         * @memberof aux.ABBIndex
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ABBIndex.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.entries != null && message.hasOwnProperty("entries")) {
                if (!Array.isArray(message.entries))
                    return "entries: array expected";
                for (let i = 0; i < message.entries.length; ++i) {
                    let error = $root.aux.ABBEntry.verify(message.entries[i]);
                    if (error)
                        return "entries." + error;
                }
            }
            return null;
        };

        /**
         * Creates a ABBIndex message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof aux.ABBIndex
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {aux.ABBIndex} ABBIndex
         */
        ABBIndex.fromObject = function fromObject(object) {
            if (object instanceof $root.aux.ABBIndex)
                return object;
            let message = new $root.aux.ABBIndex();
            if (object.entries) {
                if (!Array.isArray(object.entries))
                    throw TypeError(".aux.ABBIndex.entries: array expected");
                message.entries = [];
                for (let i = 0; i < object.entries.length; ++i) {
                    if (typeof object.entries[i] !== "object")
                        throw TypeError(".aux.ABBIndex.entries: object expected");
                    message.entries[i] = $root.aux.ABBEntry.fromObject(object.entries[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a ABBIndex message. Also converts values to other types if specified.
         * @function toObject
         * @memberof aux.ABBIndex
         * @static
         * @param {aux.ABBIndex} message ABBIndex
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ABBIndex.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.arrays || options.defaults)
                object.entries = [];
            if (message.entries && message.entries.length) {
                object.entries = [];
                for (let j = 0; j < message.entries.length; ++j)
                    object.entries[j] = $root.aux.ABBEntry.toObject(message.entries[j], options);
            }
            return object;
        };

        /**
         * Converts this ABBIndex to JSON.
         * @function toJSON
         * @memberof aux.ABBIndex
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ABBIndex.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ABBIndex;
    })();

    /**
     * Platform enum.
     * @name aux.Platform
     * @enum {number}
     * @property {number} IOS=1 IOS value
     * @property {number} DROID=2 DROID value
     */
    aux.Platform = (function() {
        const valuesById = {}, values = Object.create(valuesById);
        values[valuesById[1] = "IOS"] = 1;
        values[valuesById[2] = "DROID"] = 2;
        return values;
    })();

    /**
     * DeviceFormFactor enum.
     * @name aux.DeviceFormFactor
     * @enum {number}
     * @property {number} PHONE=1 PHONE value
     * @property {number} TABLET=2 TABLET value
     */
    aux.DeviceFormFactor = (function() {
        const valuesById = {}, values = Object.create(valuesById);
        values[valuesById[1] = "PHONE"] = 1;
        values[valuesById[2] = "TABLET"] = 2;
        return values;
    })();

    /**
     * AdNetwork enum.
     * @name aux.AdNetwork
     * @enum {number}
     * @property {number} VUNGLE=0 VUNGLE value
     * @property {number} CHARTBOOST=1 CHARTBOOST value
     * @property {number} AD_COLONY=2 AD_COLONY value
     * @property {number} HYPER_MX=3 HYPER_MX value
     * @property {number} UNITY=4 UNITY value
     * @property {number} FACEBOOK=5 FACEBOOK value
     * @property {number} APPLOVIN=6 APPLOVIN value
     */
    aux.AdNetwork = (function() {
        const valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "VUNGLE"] = 0;
        values[valuesById[1] = "CHARTBOOST"] = 1;
        values[valuesById[2] = "AD_COLONY"] = 2;
        values[valuesById[3] = "HYPER_MX"] = 3;
        values[valuesById[4] = "UNITY"] = 4;
        values[valuesById[5] = "FACEBOOK"] = 5;
        values[valuesById[6] = "APPLOVIN"] = 6;
        return values;
    })();

    return aux;
})();

export const ei = $root.ei = (() => {

    /**
     * Namespace ei.
     * @exports ei
     * @namespace
     */
    const ei = {};

    ei.Backup = (function() {

        /**
         * Properties of a Backup.
         * @memberof ei
         * @interface IBackup
         * @property {string|null} [userId] Backup userId
         * @property {string|null} [eiUserId] Backup eiUserId
         * @property {string|null} [gameServicesId] Backup gameServicesId
         * @property {string|null} [deviceId] Backup deviceId
         * @property {string|null} [userName] Backup userName
         * @property {number|null} [approxTime] Backup approxTime
         * @property {number|null} [version] Backup version
         * @property {boolean|null} [forceOfferBackup] Backup forceOfferBackup
         * @property {boolean|null} [forceBackup] Backup forceBackup
         * @property {ei.Backup.ISettings|null} [settings] Backup settings
         * @property {ei.Backup.ITutorial|null} [tutorial] Backup tutorial
         * @property {ei.Backup.IStats|null} [stats] Backup stats
         * @property {ei.Backup.IGame|null} [game] Backup game
         * @property {ei.Backup.IArtifacts|null} [artifacts] Backup artifacts
         * @property {ei.Backup.ISimulation|null} [sim] Backup sim
         * @property {Array.<ei.Backup.ISimulation>|null} [farms] Backup farms
         * @property {ei.Backup.IMission|null} [mission] Backup mission
         * @property {ei.Backup.IMisc|null} [misc] Backup misc
         * @property {ei.IMyContracts|null} [contracts] Backup contracts
         * @property {ei.IArtifactsDB|null} [artifactsDb] Backup artifactsDb
         * @property {number|Long|null} [checksum] Backup checksum
         * @property {string|null} [signature] Backup signature
         */

        /**
         * Constructs a new Backup.
         * @memberof ei
         * @classdesc Represents a Backup.
         * @implements IBackup
         * @constructor
         * @param {ei.IBackup=} [properties] Properties to set
         */
        function Backup(properties) {
            this.farms = [];
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Backup userId.
         * @member {string} userId
         * @memberof ei.Backup
         * @instance
         */
        Backup.prototype.userId = "";

        /**
         * Backup eiUserId.
         * @member {string} eiUserId
         * @memberof ei.Backup
         * @instance
         */
        Backup.prototype.eiUserId = "";

        /**
         * Backup gameServicesId.
         * @member {string} gameServicesId
         * @memberof ei.Backup
         * @instance
         */
        Backup.prototype.gameServicesId = "";

        /**
         * Backup deviceId.
         * @member {string} deviceId
         * @memberof ei.Backup
         * @instance
         */
        Backup.prototype.deviceId = "";

        /**
         * Backup userName.
         * @member {string} userName
         * @memberof ei.Backup
         * @instance
         */
        Backup.prototype.userName = "";

        /**
         * Backup approxTime.
         * @member {number} approxTime
         * @memberof ei.Backup
         * @instance
         */
        Backup.prototype.approxTime = 0;

        /**
         * Backup version.
         * @member {number} version
         * @memberof ei.Backup
         * @instance
         */
        Backup.prototype.version = 0;

        /**
         * Backup forceOfferBackup.
         * @member {boolean} forceOfferBackup
         * @memberof ei.Backup
         * @instance
         */
        Backup.prototype.forceOfferBackup = false;

        /**
         * Backup forceBackup.
         * @member {boolean} forceBackup
         * @memberof ei.Backup
         * @instance
         */
        Backup.prototype.forceBackup = false;

        /**
         * Backup settings.
         * @member {ei.Backup.ISettings|null|undefined} settings
         * @memberof ei.Backup
         * @instance
         */
        Backup.prototype.settings = null;

        /**
         * Backup tutorial.
         * @member {ei.Backup.ITutorial|null|undefined} tutorial
         * @memberof ei.Backup
         * @instance
         */
        Backup.prototype.tutorial = null;

        /**
         * Backup stats.
         * @member {ei.Backup.IStats|null|undefined} stats
         * @memberof ei.Backup
         * @instance
         */
        Backup.prototype.stats = null;

        /**
         * Backup game.
         * @member {ei.Backup.IGame|null|undefined} game
         * @memberof ei.Backup
         * @instance
         */
        Backup.prototype.game = null;

        /**
         * Backup artifacts.
         * @member {ei.Backup.IArtifacts|null|undefined} artifacts
         * @memberof ei.Backup
         * @instance
         */
        Backup.prototype.artifacts = null;

        /**
         * Backup sim.
         * @member {ei.Backup.ISimulation|null|undefined} sim
         * @memberof ei.Backup
         * @instance
         */
        Backup.prototype.sim = null;

        /**
         * Backup farms.
         * @member {Array.<ei.Backup.ISimulation>} farms
         * @memberof ei.Backup
         * @instance
         */
        Backup.prototype.farms = $util.emptyArray;

        /**
         * Backup mission.
         * @member {ei.Backup.IMission|null|undefined} mission
         * @memberof ei.Backup
         * @instance
         */
        Backup.prototype.mission = null;

        /**
         * Backup misc.
         * @member {ei.Backup.IMisc|null|undefined} misc
         * @memberof ei.Backup
         * @instance
         */
        Backup.prototype.misc = null;

        /**
         * Backup contracts.
         * @member {ei.IMyContracts|null|undefined} contracts
         * @memberof ei.Backup
         * @instance
         */
        Backup.prototype.contracts = null;

        /**
         * Backup artifactsDb.
         * @member {ei.IArtifactsDB|null|undefined} artifactsDb
         * @memberof ei.Backup
         * @instance
         */
        Backup.prototype.artifactsDb = null;

        /**
         * Backup checksum.
         * @member {number|Long} checksum
         * @memberof ei.Backup
         * @instance
         */
        Backup.prototype.checksum = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Backup signature.
         * @member {string} signature
         * @memberof ei.Backup
         * @instance
         */
        Backup.prototype.signature = "";

        /**
         * Creates a new Backup instance using the specified properties.
         * @function create
         * @memberof ei.Backup
         * @static
         * @param {ei.IBackup=} [properties] Properties to set
         * @returns {ei.Backup} Backup instance
         */
        Backup.create = function create(properties) {
            return new Backup(properties);
        };

        /**
         * Encodes the specified Backup message. Does not implicitly {@link ei.Backup.verify|verify} messages.
         * @function encode
         * @memberof ei.Backup
         * @static
         * @param {ei.IBackup} message Backup message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Backup.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userId != null && Object.hasOwnProperty.call(message, "userId"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);
            if (message.userName != null && Object.hasOwnProperty.call(message, "userName"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.userName);
            if (message.approxTime != null && Object.hasOwnProperty.call(message, "approxTime"))
                writer.uint32(/* id 3, wireType 1 =*/25).double(message.approxTime);
            if (message.settings != null && Object.hasOwnProperty.call(message, "settings"))
                $root.ei.Backup.Settings.encode(message.settings, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            if (message.tutorial != null && Object.hasOwnProperty.call(message, "tutorial"))
                $root.ei.Backup.Tutorial.encode(message.tutorial, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
            if (message.stats != null && Object.hasOwnProperty.call(message, "stats"))
                $root.ei.Backup.Stats.encode(message.stats, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
            if (message.game != null && Object.hasOwnProperty.call(message, "game"))
                $root.ei.Backup.Game.encode(message.game, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
            if (message.sim != null && Object.hasOwnProperty.call(message, "sim"))
                $root.ei.Backup.Simulation.encode(message.sim, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
            if (message.mission != null && Object.hasOwnProperty.call(message, "mission"))
                $root.ei.Backup.Mission.encode(message.mission, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
            if (message.misc != null && Object.hasOwnProperty.call(message, "misc"))
                $root.ei.Backup.Misc.encode(message.misc, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
            if (message.farms != null && message.farms.length)
                for (let i = 0; i < message.farms.length; ++i)
                    $root.ei.Backup.Simulation.encode(message.farms[i], writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();
            if (message.contracts != null && Object.hasOwnProperty.call(message, "contracts"))
                $root.ei.MyContracts.encode(message.contracts, writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();
            if (message.artifacts != null && Object.hasOwnProperty.call(message, "artifacts"))
                $root.ei.Backup.Artifacts.encode(message.artifacts, writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();
            if (message.artifactsDb != null && Object.hasOwnProperty.call(message, "artifactsDb"))
                $root.ei.ArtifactsDB.encode(message.artifactsDb, writer.uint32(/* id 15, wireType 2 =*/122).fork()).ldelim();
            if (message.gameServicesId != null && Object.hasOwnProperty.call(message, "gameServicesId"))
                writer.uint32(/* id 16, wireType 2 =*/130).string(message.gameServicesId);
            if (message.deviceId != null && Object.hasOwnProperty.call(message, "deviceId"))
                writer.uint32(/* id 17, wireType 2 =*/138).string(message.deviceId);
            if (message.eiUserId != null && Object.hasOwnProperty.call(message, "eiUserId"))
                writer.uint32(/* id 18, wireType 2 =*/146).string(message.eiUserId);
            if (message.forceOfferBackup != null && Object.hasOwnProperty.call(message, "forceOfferBackup"))
                writer.uint32(/* id 20, wireType 0 =*/160).bool(message.forceOfferBackup);
            if (message.version != null && Object.hasOwnProperty.call(message, "version"))
                writer.uint32(/* id 21, wireType 0 =*/168).uint32(message.version);
            if (message.forceBackup != null && Object.hasOwnProperty.call(message, "forceBackup"))
                writer.uint32(/* id 22, wireType 0 =*/176).bool(message.forceBackup);
            if (message.checksum != null && Object.hasOwnProperty.call(message, "checksum"))
                writer.uint32(/* id 100, wireType 0 =*/800).uint64(message.checksum);
            if (message.signature != null && Object.hasOwnProperty.call(message, "signature"))
                writer.uint32(/* id 101, wireType 2 =*/810).string(message.signature);
            return writer;
        };

        /**
         * Encodes the specified Backup message, length delimited. Does not implicitly {@link ei.Backup.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ei.Backup
         * @static
         * @param {ei.IBackup} message Backup message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Backup.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a Backup message from the specified reader or buffer.
         * @function decode
         * @memberof ei.Backup
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ei.Backup} Backup
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Backup.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ei.Backup();
            while (reader.pos < end) {
                let tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.userId = reader.string();
                    break;
                case 18:
                    message.eiUserId = reader.string();
                    break;
                case 16:
                    message.gameServicesId = reader.string();
                    break;
                case 17:
                    message.deviceId = reader.string();
                    break;
                case 2:
                    message.userName = reader.string();
                    break;
                case 3:
                    message.approxTime = reader.double();
                    break;
                case 21:
                    message.version = reader.uint32();
                    break;
                case 20:
                    message.forceOfferBackup = reader.bool();
                    break;
                case 22:
                    message.forceBackup = reader.bool();
                    break;
                case 4:
                    message.settings = $root.ei.Backup.Settings.decode(reader, reader.uint32());
                    break;
                case 5:
                    message.tutorial = $root.ei.Backup.Tutorial.decode(reader, reader.uint32());
                    break;
                case 6:
                    message.stats = $root.ei.Backup.Stats.decode(reader, reader.uint32());
                    break;
                case 7:
                    message.game = $root.ei.Backup.Game.decode(reader, reader.uint32());
                    break;
                case 14:
                    message.artifacts = $root.ei.Backup.Artifacts.decode(reader, reader.uint32());
                    break;
                case 8:
                    message.sim = $root.ei.Backup.Simulation.decode(reader, reader.uint32());
                    break;
                case 12:
                    if (!(message.farms && message.farms.length))
                        message.farms = [];
                    message.farms.push($root.ei.Backup.Simulation.decode(reader, reader.uint32()));
                    break;
                case 9:
                    message.mission = $root.ei.Backup.Mission.decode(reader, reader.uint32());
                    break;
                case 10:
                    message.misc = $root.ei.Backup.Misc.decode(reader, reader.uint32());
                    break;
                case 13:
                    message.contracts = $root.ei.MyContracts.decode(reader, reader.uint32());
                    break;
                case 15:
                    message.artifactsDb = $root.ei.ArtifactsDB.decode(reader, reader.uint32());
                    break;
                case 100:
                    message.checksum = reader.uint64();
                    break;
                case 101:
                    message.signature = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a Backup message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ei.Backup
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ei.Backup} Backup
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Backup.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a Backup message.
         * @function verify
         * @memberof ei.Backup
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Backup.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isString(message.userId))
                    return "userId: string expected";
            if (message.eiUserId != null && message.hasOwnProperty("eiUserId"))
                if (!$util.isString(message.eiUserId))
                    return "eiUserId: string expected";
            if (message.gameServicesId != null && message.hasOwnProperty("gameServicesId"))
                if (!$util.isString(message.gameServicesId))
                    return "gameServicesId: string expected";
            if (message.deviceId != null && message.hasOwnProperty("deviceId"))
                if (!$util.isString(message.deviceId))
                    return "deviceId: string expected";
            if (message.userName != null && message.hasOwnProperty("userName"))
                if (!$util.isString(message.userName))
                    return "userName: string expected";
            if (message.approxTime != null && message.hasOwnProperty("approxTime"))
                if (typeof message.approxTime !== "number")
                    return "approxTime: number expected";
            if (message.version != null && message.hasOwnProperty("version"))
                if (!$util.isInteger(message.version))
                    return "version: integer expected";
            if (message.forceOfferBackup != null && message.hasOwnProperty("forceOfferBackup"))
                if (typeof message.forceOfferBackup !== "boolean")
                    return "forceOfferBackup: boolean expected";
            if (message.forceBackup != null && message.hasOwnProperty("forceBackup"))
                if (typeof message.forceBackup !== "boolean")
                    return "forceBackup: boolean expected";
            if (message.settings != null && message.hasOwnProperty("settings")) {
                let error = $root.ei.Backup.Settings.verify(message.settings);
                if (error)
                    return "settings." + error;
            }
            if (message.tutorial != null && message.hasOwnProperty("tutorial")) {
                let error = $root.ei.Backup.Tutorial.verify(message.tutorial);
                if (error)
                    return "tutorial." + error;
            }
            if (message.stats != null && message.hasOwnProperty("stats")) {
                let error = $root.ei.Backup.Stats.verify(message.stats);
                if (error)
                    return "stats." + error;
            }
            if (message.game != null && message.hasOwnProperty("game")) {
                let error = $root.ei.Backup.Game.verify(message.game);
                if (error)
                    return "game." + error;
            }
            if (message.artifacts != null && message.hasOwnProperty("artifacts")) {
                let error = $root.ei.Backup.Artifacts.verify(message.artifacts);
                if (error)
                    return "artifacts." + error;
            }
            if (message.sim != null && message.hasOwnProperty("sim")) {
                let error = $root.ei.Backup.Simulation.verify(message.sim);
                if (error)
                    return "sim." + error;
            }
            if (message.farms != null && message.hasOwnProperty("farms")) {
                if (!Array.isArray(message.farms))
                    return "farms: array expected";
                for (let i = 0; i < message.farms.length; ++i) {
                    let error = $root.ei.Backup.Simulation.verify(message.farms[i]);
                    if (error)
                        return "farms." + error;
                }
            }
            if (message.mission != null && message.hasOwnProperty("mission")) {
                let error = $root.ei.Backup.Mission.verify(message.mission);
                if (error)
                    return "mission." + error;
            }
            if (message.misc != null && message.hasOwnProperty("misc")) {
                let error = $root.ei.Backup.Misc.verify(message.misc);
                if (error)
                    return "misc." + error;
            }
            if (message.contracts != null && message.hasOwnProperty("contracts")) {
                let error = $root.ei.MyContracts.verify(message.contracts);
                if (error)
                    return "contracts." + error;
            }
            if (message.artifactsDb != null && message.hasOwnProperty("artifactsDb")) {
                let error = $root.ei.ArtifactsDB.verify(message.artifactsDb);
                if (error)
                    return "artifactsDb." + error;
            }
            if (message.checksum != null && message.hasOwnProperty("checksum"))
                if (!$util.isInteger(message.checksum) && !(message.checksum && $util.isInteger(message.checksum.low) && $util.isInteger(message.checksum.high)))
                    return "checksum: integer|Long expected";
            if (message.signature != null && message.hasOwnProperty("signature"))
                if (!$util.isString(message.signature))
                    return "signature: string expected";
            return null;
        };

        /**
         * Creates a Backup message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ei.Backup
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ei.Backup} Backup
         */
        Backup.fromObject = function fromObject(object) {
            if (object instanceof $root.ei.Backup)
                return object;
            let message = new $root.ei.Backup();
            if (object.userId != null)
                message.userId = String(object.userId);
            if (object.eiUserId != null)
                message.eiUserId = String(object.eiUserId);
            if (object.gameServicesId != null)
                message.gameServicesId = String(object.gameServicesId);
            if (object.deviceId != null)
                message.deviceId = String(object.deviceId);
            if (object.userName != null)
                message.userName = String(object.userName);
            if (object.approxTime != null)
                message.approxTime = Number(object.approxTime);
            if (object.version != null)
                message.version = object.version >>> 0;
            if (object.forceOfferBackup != null)
                message.forceOfferBackup = Boolean(object.forceOfferBackup);
            if (object.forceBackup != null)
                message.forceBackup = Boolean(object.forceBackup);
            if (object.settings != null) {
                if (typeof object.settings !== "object")
                    throw TypeError(".ei.Backup.settings: object expected");
                message.settings = $root.ei.Backup.Settings.fromObject(object.settings);
            }
            if (object.tutorial != null) {
                if (typeof object.tutorial !== "object")
                    throw TypeError(".ei.Backup.tutorial: object expected");
                message.tutorial = $root.ei.Backup.Tutorial.fromObject(object.tutorial);
            }
            if (object.stats != null) {
                if (typeof object.stats !== "object")
                    throw TypeError(".ei.Backup.stats: object expected");
                message.stats = $root.ei.Backup.Stats.fromObject(object.stats);
            }
            if (object.game != null) {
                if (typeof object.game !== "object")
                    throw TypeError(".ei.Backup.game: object expected");
                message.game = $root.ei.Backup.Game.fromObject(object.game);
            }
            if (object.artifacts != null) {
                if (typeof object.artifacts !== "object")
                    throw TypeError(".ei.Backup.artifacts: object expected");
                message.artifacts = $root.ei.Backup.Artifacts.fromObject(object.artifacts);
            }
            if (object.sim != null) {
                if (typeof object.sim !== "object")
                    throw TypeError(".ei.Backup.sim: object expected");
                message.sim = $root.ei.Backup.Simulation.fromObject(object.sim);
            }
            if (object.farms) {
                if (!Array.isArray(object.farms))
                    throw TypeError(".ei.Backup.farms: array expected");
                message.farms = [];
                for (let i = 0; i < object.farms.length; ++i) {
                    if (typeof object.farms[i] !== "object")
                        throw TypeError(".ei.Backup.farms: object expected");
                    message.farms[i] = $root.ei.Backup.Simulation.fromObject(object.farms[i]);
                }
            }
            if (object.mission != null) {
                if (typeof object.mission !== "object")
                    throw TypeError(".ei.Backup.mission: object expected");
                message.mission = $root.ei.Backup.Mission.fromObject(object.mission);
            }
            if (object.misc != null) {
                if (typeof object.misc !== "object")
                    throw TypeError(".ei.Backup.misc: object expected");
                message.misc = $root.ei.Backup.Misc.fromObject(object.misc);
            }
            if (object.contracts != null) {
                if (typeof object.contracts !== "object")
                    throw TypeError(".ei.Backup.contracts: object expected");
                message.contracts = $root.ei.MyContracts.fromObject(object.contracts);
            }
            if (object.artifactsDb != null) {
                if (typeof object.artifactsDb !== "object")
                    throw TypeError(".ei.Backup.artifactsDb: object expected");
                message.artifactsDb = $root.ei.ArtifactsDB.fromObject(object.artifactsDb);
            }
            if (object.checksum != null)
                if ($util.Long)
                    (message.checksum = $util.Long.fromValue(object.checksum)).unsigned = true;
                else if (typeof object.checksum === "string")
                    message.checksum = parseInt(object.checksum, 10);
                else if (typeof object.checksum === "number")
                    message.checksum = object.checksum;
                else if (typeof object.checksum === "object")
                    message.checksum = new $util.LongBits(object.checksum.low >>> 0, object.checksum.high >>> 0).toNumber(true);
            if (object.signature != null)
                message.signature = String(object.signature);
            return message;
        };

        /**
         * Creates a plain object from a Backup message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ei.Backup
         * @static
         * @param {ei.Backup} message Backup
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        Backup.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.arrays || options.defaults)
                object.farms = [];
            if (options.defaults) {
                object.userId = "";
                object.userName = "";
                object.approxTime = 0;
                object.settings = null;
                object.tutorial = null;
                object.stats = null;
                object.game = null;
                object.sim = null;
                object.mission = null;
                object.misc = null;
                object.contracts = null;
                object.artifacts = null;
                object.artifactsDb = null;
                object.gameServicesId = "";
                object.deviceId = "";
                object.eiUserId = "";
                object.forceOfferBackup = false;
                object.version = 0;
                object.forceBackup = false;
                if ($util.Long) {
                    let long = new $util.Long(0, 0, true);
                    object.checksum = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.checksum = options.longs === String ? "0" : 0;
                object.signature = "";
            }
            if (message.userId != null && message.hasOwnProperty("userId"))
                object.userId = message.userId;
            if (message.userName != null && message.hasOwnProperty("userName"))
                object.userName = message.userName;
            if (message.approxTime != null && message.hasOwnProperty("approxTime"))
                object.approxTime = options.json && !isFinite(message.approxTime) ? String(message.approxTime) : message.approxTime;
            if (message.settings != null && message.hasOwnProperty("settings"))
                object.settings = $root.ei.Backup.Settings.toObject(message.settings, options);
            if (message.tutorial != null && message.hasOwnProperty("tutorial"))
                object.tutorial = $root.ei.Backup.Tutorial.toObject(message.tutorial, options);
            if (message.stats != null && message.hasOwnProperty("stats"))
                object.stats = $root.ei.Backup.Stats.toObject(message.stats, options);
            if (message.game != null && message.hasOwnProperty("game"))
                object.game = $root.ei.Backup.Game.toObject(message.game, options);
            if (message.sim != null && message.hasOwnProperty("sim"))
                object.sim = $root.ei.Backup.Simulation.toObject(message.sim, options);
            if (message.mission != null && message.hasOwnProperty("mission"))
                object.mission = $root.ei.Backup.Mission.toObject(message.mission, options);
            if (message.misc != null && message.hasOwnProperty("misc"))
                object.misc = $root.ei.Backup.Misc.toObject(message.misc, options);
            if (message.farms && message.farms.length) {
                object.farms = [];
                for (let j = 0; j < message.farms.length; ++j)
                    object.farms[j] = $root.ei.Backup.Simulation.toObject(message.farms[j], options);
            }
            if (message.contracts != null && message.hasOwnProperty("contracts"))
                object.contracts = $root.ei.MyContracts.toObject(message.contracts, options);
            if (message.artifacts != null && message.hasOwnProperty("artifacts"))
                object.artifacts = $root.ei.Backup.Artifacts.toObject(message.artifacts, options);
            if (message.artifactsDb != null && message.hasOwnProperty("artifactsDb"))
                object.artifactsDb = $root.ei.ArtifactsDB.toObject(message.artifactsDb, options);
            if (message.gameServicesId != null && message.hasOwnProperty("gameServicesId"))
                object.gameServicesId = message.gameServicesId;
            if (message.deviceId != null && message.hasOwnProperty("deviceId"))
                object.deviceId = message.deviceId;
            if (message.eiUserId != null && message.hasOwnProperty("eiUserId"))
                object.eiUserId = message.eiUserId;
            if (message.forceOfferBackup != null && message.hasOwnProperty("forceOfferBackup"))
                object.forceOfferBackup = message.forceOfferBackup;
            if (message.version != null && message.hasOwnProperty("version"))
                object.version = message.version;
            if (message.forceBackup != null && message.hasOwnProperty("forceBackup"))
                object.forceBackup = message.forceBackup;
            if (message.checksum != null && message.hasOwnProperty("checksum"))
                if (typeof message.checksum === "number")
                    object.checksum = options.longs === String ? String(message.checksum) : message.checksum;
                else
                    object.checksum = options.longs === String ? $util.Long.prototype.toString.call(message.checksum) : options.longs === Number ? new $util.LongBits(message.checksum.low >>> 0, message.checksum.high >>> 0).toNumber(true) : message.checksum;
            if (message.signature != null && message.hasOwnProperty("signature"))
                object.signature = message.signature;
            return object;
        };

        /**
         * Converts this Backup to JSON.
         * @function toJSON
         * @memberof ei.Backup
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        Backup.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        Backup.Settings = (function() {

            /**
             * Properties of a Settings.
             * @memberof ei.Backup
             * @interface ISettings
             * @property {boolean|null} [sfx] Settings sfx
             * @property {boolean|null} [music] Settings music
             * @property {boolean|null} [lowBatteryMode] Settings lowBatteryMode
             * @property {boolean|null} [lowPerformanceMode] Settings lowPerformanceMode
             * @property {boolean|null} [forceTouchChickenBtn] Settings forceTouchChickenBtn
             * @property {boolean|null} [notificationsQueried] Settings notificationsQueried
             * @property {boolean|null} [notificationsOn] Settings notificationsOn
             * @property {boolean|null} [notifyDailyGift] Settings notifyDailyGift
             * @property {boolean|null} [coppaQueried] Settings coppaQueried
             * @property {boolean|null} [coppaRestricted] Settings coppaRestricted
             * @property {boolean|null} [gdprConsentQueried] Settings gdprConsentQueried
             * @property {boolean|null} [gdprAgeRestricted] Settings gdprAgeRestricted
             * @property {boolean|null} [gdprConsentGiven] Settings gdprConsentGiven
             * @property {boolean|null} [ageQueried] Settings ageQueried
             * @property {boolean|null} [ageRestricted] Settings ageRestricted
             * @property {boolean|null} [dataCollectionConsentQueried] Settings dataCollectionConsentQueried
             * @property {boolean|null} [dataCollectionConsentGiven] Settings dataCollectionConsentGiven
             * @property {number|null} [lastDayAgeQueried] Settings lastDayAgeQueried
             * @property {boolean|null} [userAdsEnabled] Settings userAdsEnabled
             * @property {boolean|null} [userCloudEnabled] Settings userCloudEnabled
             * @property {boolean|null} [userAnalyticsEnabled] Settings userAnalyticsEnabled
             * @property {boolean|null} [userPersonalizedAdsEnabled] Settings userPersonalizedAdsEnabled
             * @property {boolean|null} [lowPerformance] Settings lowPerformance
             * @property {boolean|null} [autoStopFueling] Settings autoStopFueling
             * @property {number|null} [lastBackupTime] Settings lastBackupTime
             */

            /**
             * Constructs a new Settings.
             * @memberof ei.Backup
             * @classdesc Represents a Settings.
             * @implements ISettings
             * @constructor
             * @param {ei.Backup.ISettings=} [properties] Properties to set
             */
            function Settings(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Settings sfx.
             * @member {boolean} sfx
             * @memberof ei.Backup.Settings
             * @instance
             */
            Settings.prototype.sfx = false;

            /**
             * Settings music.
             * @member {boolean} music
             * @memberof ei.Backup.Settings
             * @instance
             */
            Settings.prototype.music = false;

            /**
             * Settings lowBatteryMode.
             * @member {boolean} lowBatteryMode
             * @memberof ei.Backup.Settings
             * @instance
             */
            Settings.prototype.lowBatteryMode = false;

            /**
             * Settings lowPerformanceMode.
             * @member {boolean} lowPerformanceMode
             * @memberof ei.Backup.Settings
             * @instance
             */
            Settings.prototype.lowPerformanceMode = false;

            /**
             * Settings forceTouchChickenBtn.
             * @member {boolean} forceTouchChickenBtn
             * @memberof ei.Backup.Settings
             * @instance
             */
            Settings.prototype.forceTouchChickenBtn = false;

            /**
             * Settings notificationsQueried.
             * @member {boolean} notificationsQueried
             * @memberof ei.Backup.Settings
             * @instance
             */
            Settings.prototype.notificationsQueried = false;

            /**
             * Settings notificationsOn.
             * @member {boolean} notificationsOn
             * @memberof ei.Backup.Settings
             * @instance
             */
            Settings.prototype.notificationsOn = false;

            /**
             * Settings notifyDailyGift.
             * @member {boolean} notifyDailyGift
             * @memberof ei.Backup.Settings
             * @instance
             */
            Settings.prototype.notifyDailyGift = false;

            /**
             * Settings coppaQueried.
             * @member {boolean} coppaQueried
             * @memberof ei.Backup.Settings
             * @instance
             */
            Settings.prototype.coppaQueried = false;

            /**
             * Settings coppaRestricted.
             * @member {boolean} coppaRestricted
             * @memberof ei.Backup.Settings
             * @instance
             */
            Settings.prototype.coppaRestricted = false;

            /**
             * Settings gdprConsentQueried.
             * @member {boolean} gdprConsentQueried
             * @memberof ei.Backup.Settings
             * @instance
             */
            Settings.prototype.gdprConsentQueried = false;

            /**
             * Settings gdprAgeRestricted.
             * @member {boolean} gdprAgeRestricted
             * @memberof ei.Backup.Settings
             * @instance
             */
            Settings.prototype.gdprAgeRestricted = false;

            /**
             * Settings gdprConsentGiven.
             * @member {boolean} gdprConsentGiven
             * @memberof ei.Backup.Settings
             * @instance
             */
            Settings.prototype.gdprConsentGiven = false;

            /**
             * Settings ageQueried.
             * @member {boolean} ageQueried
             * @memberof ei.Backup.Settings
             * @instance
             */
            Settings.prototype.ageQueried = false;

            /**
             * Settings ageRestricted.
             * @member {boolean} ageRestricted
             * @memberof ei.Backup.Settings
             * @instance
             */
            Settings.prototype.ageRestricted = false;

            /**
             * Settings dataCollectionConsentQueried.
             * @member {boolean} dataCollectionConsentQueried
             * @memberof ei.Backup.Settings
             * @instance
             */
            Settings.prototype.dataCollectionConsentQueried = false;

            /**
             * Settings dataCollectionConsentGiven.
             * @member {boolean} dataCollectionConsentGiven
             * @memberof ei.Backup.Settings
             * @instance
             */
            Settings.prototype.dataCollectionConsentGiven = false;

            /**
             * Settings lastDayAgeQueried.
             * @member {number} lastDayAgeQueried
             * @memberof ei.Backup.Settings
             * @instance
             */
            Settings.prototype.lastDayAgeQueried = 0;

            /**
             * Settings userAdsEnabled.
             * @member {boolean} userAdsEnabled
             * @memberof ei.Backup.Settings
             * @instance
             */
            Settings.prototype.userAdsEnabled = true;

            /**
             * Settings userCloudEnabled.
             * @member {boolean} userCloudEnabled
             * @memberof ei.Backup.Settings
             * @instance
             */
            Settings.prototype.userCloudEnabled = true;

            /**
             * Settings userAnalyticsEnabled.
             * @member {boolean} userAnalyticsEnabled
             * @memberof ei.Backup.Settings
             * @instance
             */
            Settings.prototype.userAnalyticsEnabled = true;

            /**
             * Settings userPersonalizedAdsEnabled.
             * @member {boolean} userPersonalizedAdsEnabled
             * @memberof ei.Backup.Settings
             * @instance
             */
            Settings.prototype.userPersonalizedAdsEnabled = true;

            /**
             * Settings lowPerformance.
             * @member {boolean} lowPerformance
             * @memberof ei.Backup.Settings
             * @instance
             */
            Settings.prototype.lowPerformance = false;

            /**
             * Settings autoStopFueling.
             * @member {boolean} autoStopFueling
             * @memberof ei.Backup.Settings
             * @instance
             */
            Settings.prototype.autoStopFueling = false;

            /**
             * Settings lastBackupTime.
             * @member {number} lastBackupTime
             * @memberof ei.Backup.Settings
             * @instance
             */
            Settings.prototype.lastBackupTime = 0;

            /**
             * Creates a new Settings instance using the specified properties.
             * @function create
             * @memberof ei.Backup.Settings
             * @static
             * @param {ei.Backup.ISettings=} [properties] Properties to set
             * @returns {ei.Backup.Settings} Settings instance
             */
            Settings.create = function create(properties) {
                return new Settings(properties);
            };

            /**
             * Encodes the specified Settings message. Does not implicitly {@link ei.Backup.Settings.verify|verify} messages.
             * @function encode
             * @memberof ei.Backup.Settings
             * @static
             * @param {ei.Backup.ISettings} message Settings message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Settings.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.sfx != null && Object.hasOwnProperty.call(message, "sfx"))
                    writer.uint32(/* id 1, wireType 0 =*/8).bool(message.sfx);
                if (message.music != null && Object.hasOwnProperty.call(message, "music"))
                    writer.uint32(/* id 2, wireType 0 =*/16).bool(message.music);
                if (message.lowBatteryMode != null && Object.hasOwnProperty.call(message, "lowBatteryMode"))
                    writer.uint32(/* id 3, wireType 0 =*/24).bool(message.lowBatteryMode);
                if (message.lowPerformanceMode != null && Object.hasOwnProperty.call(message, "lowPerformanceMode"))
                    writer.uint32(/* id 4, wireType 0 =*/32).bool(message.lowPerformanceMode);
                if (message.notificationsQueried != null && Object.hasOwnProperty.call(message, "notificationsQueried"))
                    writer.uint32(/* id 5, wireType 0 =*/40).bool(message.notificationsQueried);
                if (message.notificationsOn != null && Object.hasOwnProperty.call(message, "notificationsOn"))
                    writer.uint32(/* id 6, wireType 0 =*/48).bool(message.notificationsOn);
                if (message.coppaQueried != null && Object.hasOwnProperty.call(message, "coppaQueried"))
                    writer.uint32(/* id 7, wireType 0 =*/56).bool(message.coppaQueried);
                if (message.coppaRestricted != null && Object.hasOwnProperty.call(message, "coppaRestricted"))
                    writer.uint32(/* id 8, wireType 0 =*/64).bool(message.coppaRestricted);
                if (message.forceTouchChickenBtn != null && Object.hasOwnProperty.call(message, "forceTouchChickenBtn"))
                    writer.uint32(/* id 9, wireType 0 =*/72).bool(message.forceTouchChickenBtn);
                if (message.lowPerformance != null && Object.hasOwnProperty.call(message, "lowPerformance"))
                    writer.uint32(/* id 10, wireType 0 =*/80).bool(message.lowPerformance);
                if (message.notifyDailyGift != null && Object.hasOwnProperty.call(message, "notifyDailyGift"))
                    writer.uint32(/* id 11, wireType 0 =*/88).bool(message.notifyDailyGift);
                if (message.gdprConsentQueried != null && Object.hasOwnProperty.call(message, "gdprConsentQueried"))
                    writer.uint32(/* id 12, wireType 0 =*/96).bool(message.gdprConsentQueried);
                if (message.gdprConsentGiven != null && Object.hasOwnProperty.call(message, "gdprConsentGiven"))
                    writer.uint32(/* id 13, wireType 0 =*/104).bool(message.gdprConsentGiven);
                if (message.userAdsEnabled != null && Object.hasOwnProperty.call(message, "userAdsEnabled"))
                    writer.uint32(/* id 14, wireType 0 =*/112).bool(message.userAdsEnabled);
                if (message.userCloudEnabled != null && Object.hasOwnProperty.call(message, "userCloudEnabled"))
                    writer.uint32(/* id 15, wireType 0 =*/120).bool(message.userCloudEnabled);
                if (message.gdprAgeRestricted != null && Object.hasOwnProperty.call(message, "gdprAgeRestricted"))
                    writer.uint32(/* id 16, wireType 0 =*/128).bool(message.gdprAgeRestricted);
                if (message.lastDayAgeQueried != null && Object.hasOwnProperty.call(message, "lastDayAgeQueried"))
                    writer.uint32(/* id 17, wireType 0 =*/136).uint32(message.lastDayAgeQueried);
                if (message.ageQueried != null && Object.hasOwnProperty.call(message, "ageQueried"))
                    writer.uint32(/* id 18, wireType 0 =*/144).bool(message.ageQueried);
                if (message.ageRestricted != null && Object.hasOwnProperty.call(message, "ageRestricted"))
                    writer.uint32(/* id 19, wireType 0 =*/152).bool(message.ageRestricted);
                if (message.dataCollectionConsentQueried != null && Object.hasOwnProperty.call(message, "dataCollectionConsentQueried"))
                    writer.uint32(/* id 20, wireType 0 =*/160).bool(message.dataCollectionConsentQueried);
                if (message.dataCollectionConsentGiven != null && Object.hasOwnProperty.call(message, "dataCollectionConsentGiven"))
                    writer.uint32(/* id 21, wireType 0 =*/168).bool(message.dataCollectionConsentGiven);
                if (message.userAnalyticsEnabled != null && Object.hasOwnProperty.call(message, "userAnalyticsEnabled"))
                    writer.uint32(/* id 22, wireType 0 =*/176).bool(message.userAnalyticsEnabled);
                if (message.userPersonalizedAdsEnabled != null && Object.hasOwnProperty.call(message, "userPersonalizedAdsEnabled"))
                    writer.uint32(/* id 23, wireType 0 =*/184).bool(message.userPersonalizedAdsEnabled);
                if (message.lastBackupTime != null && Object.hasOwnProperty.call(message, "lastBackupTime"))
                    writer.uint32(/* id 24, wireType 1 =*/193).double(message.lastBackupTime);
                if (message.autoStopFueling != null && Object.hasOwnProperty.call(message, "autoStopFueling"))
                    writer.uint32(/* id 25, wireType 0 =*/200).bool(message.autoStopFueling);
                return writer;
            };

            /**
             * Encodes the specified Settings message, length delimited. Does not implicitly {@link ei.Backup.Settings.verify|verify} messages.
             * @function encodeDelimited
             * @memberof ei.Backup.Settings
             * @static
             * @param {ei.Backup.ISettings} message Settings message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Settings.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Settings message from the specified reader or buffer.
             * @function decode
             * @memberof ei.Backup.Settings
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {ei.Backup.Settings} Settings
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Settings.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ei.Backup.Settings();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.sfx = reader.bool();
                        break;
                    case 2:
                        message.music = reader.bool();
                        break;
                    case 3:
                        message.lowBatteryMode = reader.bool();
                        break;
                    case 4:
                        message.lowPerformanceMode = reader.bool();
                        break;
                    case 9:
                        message.forceTouchChickenBtn = reader.bool();
                        break;
                    case 5:
                        message.notificationsQueried = reader.bool();
                        break;
                    case 6:
                        message.notificationsOn = reader.bool();
                        break;
                    case 11:
                        message.notifyDailyGift = reader.bool();
                        break;
                    case 7:
                        message.coppaQueried = reader.bool();
                        break;
                    case 8:
                        message.coppaRestricted = reader.bool();
                        break;
                    case 12:
                        message.gdprConsentQueried = reader.bool();
                        break;
                    case 16:
                        message.gdprAgeRestricted = reader.bool();
                        break;
                    case 13:
                        message.gdprConsentGiven = reader.bool();
                        break;
                    case 18:
                        message.ageQueried = reader.bool();
                        break;
                    case 19:
                        message.ageRestricted = reader.bool();
                        break;
                    case 20:
                        message.dataCollectionConsentQueried = reader.bool();
                        break;
                    case 21:
                        message.dataCollectionConsentGiven = reader.bool();
                        break;
                    case 17:
                        message.lastDayAgeQueried = reader.uint32();
                        break;
                    case 14:
                        message.userAdsEnabled = reader.bool();
                        break;
                    case 15:
                        message.userCloudEnabled = reader.bool();
                        break;
                    case 22:
                        message.userAnalyticsEnabled = reader.bool();
                        break;
                    case 23:
                        message.userPersonalizedAdsEnabled = reader.bool();
                        break;
                    case 10:
                        message.lowPerformance = reader.bool();
                        break;
                    case 25:
                        message.autoStopFueling = reader.bool();
                        break;
                    case 24:
                        message.lastBackupTime = reader.double();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Settings message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof ei.Backup.Settings
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {ei.Backup.Settings} Settings
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Settings.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Settings message.
             * @function verify
             * @memberof ei.Backup.Settings
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Settings.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.sfx != null && message.hasOwnProperty("sfx"))
                    if (typeof message.sfx !== "boolean")
                        return "sfx: boolean expected";
                if (message.music != null && message.hasOwnProperty("music"))
                    if (typeof message.music !== "boolean")
                        return "music: boolean expected";
                if (message.lowBatteryMode != null && message.hasOwnProperty("lowBatteryMode"))
                    if (typeof message.lowBatteryMode !== "boolean")
                        return "lowBatteryMode: boolean expected";
                if (message.lowPerformanceMode != null && message.hasOwnProperty("lowPerformanceMode"))
                    if (typeof message.lowPerformanceMode !== "boolean")
                        return "lowPerformanceMode: boolean expected";
                if (message.forceTouchChickenBtn != null && message.hasOwnProperty("forceTouchChickenBtn"))
                    if (typeof message.forceTouchChickenBtn !== "boolean")
                        return "forceTouchChickenBtn: boolean expected";
                if (message.notificationsQueried != null && message.hasOwnProperty("notificationsQueried"))
                    if (typeof message.notificationsQueried !== "boolean")
                        return "notificationsQueried: boolean expected";
                if (message.notificationsOn != null && message.hasOwnProperty("notificationsOn"))
                    if (typeof message.notificationsOn !== "boolean")
                        return "notificationsOn: boolean expected";
                if (message.notifyDailyGift != null && message.hasOwnProperty("notifyDailyGift"))
                    if (typeof message.notifyDailyGift !== "boolean")
                        return "notifyDailyGift: boolean expected";
                if (message.coppaQueried != null && message.hasOwnProperty("coppaQueried"))
                    if (typeof message.coppaQueried !== "boolean")
                        return "coppaQueried: boolean expected";
                if (message.coppaRestricted != null && message.hasOwnProperty("coppaRestricted"))
                    if (typeof message.coppaRestricted !== "boolean")
                        return "coppaRestricted: boolean expected";
                if (message.gdprConsentQueried != null && message.hasOwnProperty("gdprConsentQueried"))
                    if (typeof message.gdprConsentQueried !== "boolean")
                        return "gdprConsentQueried: boolean expected";
                if (message.gdprAgeRestricted != null && message.hasOwnProperty("gdprAgeRestricted"))
                    if (typeof message.gdprAgeRestricted !== "boolean")
                        return "gdprAgeRestricted: boolean expected";
                if (message.gdprConsentGiven != null && message.hasOwnProperty("gdprConsentGiven"))
                    if (typeof message.gdprConsentGiven !== "boolean")
                        return "gdprConsentGiven: boolean expected";
                if (message.ageQueried != null && message.hasOwnProperty("ageQueried"))
                    if (typeof message.ageQueried !== "boolean")
                        return "ageQueried: boolean expected";
                if (message.ageRestricted != null && message.hasOwnProperty("ageRestricted"))
                    if (typeof message.ageRestricted !== "boolean")
                        return "ageRestricted: boolean expected";
                if (message.dataCollectionConsentQueried != null && message.hasOwnProperty("dataCollectionConsentQueried"))
                    if (typeof message.dataCollectionConsentQueried !== "boolean")
                        return "dataCollectionConsentQueried: boolean expected";
                if (message.dataCollectionConsentGiven != null && message.hasOwnProperty("dataCollectionConsentGiven"))
                    if (typeof message.dataCollectionConsentGiven !== "boolean")
                        return "dataCollectionConsentGiven: boolean expected";
                if (message.lastDayAgeQueried != null && message.hasOwnProperty("lastDayAgeQueried"))
                    if (!$util.isInteger(message.lastDayAgeQueried))
                        return "lastDayAgeQueried: integer expected";
                if (message.userAdsEnabled != null && message.hasOwnProperty("userAdsEnabled"))
                    if (typeof message.userAdsEnabled !== "boolean")
                        return "userAdsEnabled: boolean expected";
                if (message.userCloudEnabled != null && message.hasOwnProperty("userCloudEnabled"))
                    if (typeof message.userCloudEnabled !== "boolean")
                        return "userCloudEnabled: boolean expected";
                if (message.userAnalyticsEnabled != null && message.hasOwnProperty("userAnalyticsEnabled"))
                    if (typeof message.userAnalyticsEnabled !== "boolean")
                        return "userAnalyticsEnabled: boolean expected";
                if (message.userPersonalizedAdsEnabled != null && message.hasOwnProperty("userPersonalizedAdsEnabled"))
                    if (typeof message.userPersonalizedAdsEnabled !== "boolean")
                        return "userPersonalizedAdsEnabled: boolean expected";
                if (message.lowPerformance != null && message.hasOwnProperty("lowPerformance"))
                    if (typeof message.lowPerformance !== "boolean")
                        return "lowPerformance: boolean expected";
                if (message.autoStopFueling != null && message.hasOwnProperty("autoStopFueling"))
                    if (typeof message.autoStopFueling !== "boolean")
                        return "autoStopFueling: boolean expected";
                if (message.lastBackupTime != null && message.hasOwnProperty("lastBackupTime"))
                    if (typeof message.lastBackupTime !== "number")
                        return "lastBackupTime: number expected";
                return null;
            };

            /**
             * Creates a Settings message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof ei.Backup.Settings
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {ei.Backup.Settings} Settings
             */
            Settings.fromObject = function fromObject(object) {
                if (object instanceof $root.ei.Backup.Settings)
                    return object;
                let message = new $root.ei.Backup.Settings();
                if (object.sfx != null)
                    message.sfx = Boolean(object.sfx);
                if (object.music != null)
                    message.music = Boolean(object.music);
                if (object.lowBatteryMode != null)
                    message.lowBatteryMode = Boolean(object.lowBatteryMode);
                if (object.lowPerformanceMode != null)
                    message.lowPerformanceMode = Boolean(object.lowPerformanceMode);
                if (object.forceTouchChickenBtn != null)
                    message.forceTouchChickenBtn = Boolean(object.forceTouchChickenBtn);
                if (object.notificationsQueried != null)
                    message.notificationsQueried = Boolean(object.notificationsQueried);
                if (object.notificationsOn != null)
                    message.notificationsOn = Boolean(object.notificationsOn);
                if (object.notifyDailyGift != null)
                    message.notifyDailyGift = Boolean(object.notifyDailyGift);
                if (object.coppaQueried != null)
                    message.coppaQueried = Boolean(object.coppaQueried);
                if (object.coppaRestricted != null)
                    message.coppaRestricted = Boolean(object.coppaRestricted);
                if (object.gdprConsentQueried != null)
                    message.gdprConsentQueried = Boolean(object.gdprConsentQueried);
                if (object.gdprAgeRestricted != null)
                    message.gdprAgeRestricted = Boolean(object.gdprAgeRestricted);
                if (object.gdprConsentGiven != null)
                    message.gdprConsentGiven = Boolean(object.gdprConsentGiven);
                if (object.ageQueried != null)
                    message.ageQueried = Boolean(object.ageQueried);
                if (object.ageRestricted != null)
                    message.ageRestricted = Boolean(object.ageRestricted);
                if (object.dataCollectionConsentQueried != null)
                    message.dataCollectionConsentQueried = Boolean(object.dataCollectionConsentQueried);
                if (object.dataCollectionConsentGiven != null)
                    message.dataCollectionConsentGiven = Boolean(object.dataCollectionConsentGiven);
                if (object.lastDayAgeQueried != null)
                    message.lastDayAgeQueried = object.lastDayAgeQueried >>> 0;
                if (object.userAdsEnabled != null)
                    message.userAdsEnabled = Boolean(object.userAdsEnabled);
                if (object.userCloudEnabled != null)
                    message.userCloudEnabled = Boolean(object.userCloudEnabled);
                if (object.userAnalyticsEnabled != null)
                    message.userAnalyticsEnabled = Boolean(object.userAnalyticsEnabled);
                if (object.userPersonalizedAdsEnabled != null)
                    message.userPersonalizedAdsEnabled = Boolean(object.userPersonalizedAdsEnabled);
                if (object.lowPerformance != null)
                    message.lowPerformance = Boolean(object.lowPerformance);
                if (object.autoStopFueling != null)
                    message.autoStopFueling = Boolean(object.autoStopFueling);
                if (object.lastBackupTime != null)
                    message.lastBackupTime = Number(object.lastBackupTime);
                return message;
            };

            /**
             * Creates a plain object from a Settings message. Also converts values to other types if specified.
             * @function toObject
             * @memberof ei.Backup.Settings
             * @static
             * @param {ei.Backup.Settings} message Settings
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Settings.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.sfx = false;
                    object.music = false;
                    object.lowBatteryMode = false;
                    object.lowPerformanceMode = false;
                    object.notificationsQueried = false;
                    object.notificationsOn = false;
                    object.coppaQueried = false;
                    object.coppaRestricted = false;
                    object.forceTouchChickenBtn = false;
                    object.lowPerformance = false;
                    object.notifyDailyGift = false;
                    object.gdprConsentQueried = false;
                    object.gdprConsentGiven = false;
                    object.userAdsEnabled = true;
                    object.userCloudEnabled = true;
                    object.gdprAgeRestricted = false;
                    object.lastDayAgeQueried = 0;
                    object.ageQueried = false;
                    object.ageRestricted = false;
                    object.dataCollectionConsentQueried = false;
                    object.dataCollectionConsentGiven = false;
                    object.userAnalyticsEnabled = true;
                    object.userPersonalizedAdsEnabled = true;
                    object.lastBackupTime = 0;
                    object.autoStopFueling = false;
                }
                if (message.sfx != null && message.hasOwnProperty("sfx"))
                    object.sfx = message.sfx;
                if (message.music != null && message.hasOwnProperty("music"))
                    object.music = message.music;
                if (message.lowBatteryMode != null && message.hasOwnProperty("lowBatteryMode"))
                    object.lowBatteryMode = message.lowBatteryMode;
                if (message.lowPerformanceMode != null && message.hasOwnProperty("lowPerformanceMode"))
                    object.lowPerformanceMode = message.lowPerformanceMode;
                if (message.notificationsQueried != null && message.hasOwnProperty("notificationsQueried"))
                    object.notificationsQueried = message.notificationsQueried;
                if (message.notificationsOn != null && message.hasOwnProperty("notificationsOn"))
                    object.notificationsOn = message.notificationsOn;
                if (message.coppaQueried != null && message.hasOwnProperty("coppaQueried"))
                    object.coppaQueried = message.coppaQueried;
                if (message.coppaRestricted != null && message.hasOwnProperty("coppaRestricted"))
                    object.coppaRestricted = message.coppaRestricted;
                if (message.forceTouchChickenBtn != null && message.hasOwnProperty("forceTouchChickenBtn"))
                    object.forceTouchChickenBtn = message.forceTouchChickenBtn;
                if (message.lowPerformance != null && message.hasOwnProperty("lowPerformance"))
                    object.lowPerformance = message.lowPerformance;
                if (message.notifyDailyGift != null && message.hasOwnProperty("notifyDailyGift"))
                    object.notifyDailyGift = message.notifyDailyGift;
                if (message.gdprConsentQueried != null && message.hasOwnProperty("gdprConsentQueried"))
                    object.gdprConsentQueried = message.gdprConsentQueried;
                if (message.gdprConsentGiven != null && message.hasOwnProperty("gdprConsentGiven"))
                    object.gdprConsentGiven = message.gdprConsentGiven;
                if (message.userAdsEnabled != null && message.hasOwnProperty("userAdsEnabled"))
                    object.userAdsEnabled = message.userAdsEnabled;
                if (message.userCloudEnabled != null && message.hasOwnProperty("userCloudEnabled"))
                    object.userCloudEnabled = message.userCloudEnabled;
                if (message.gdprAgeRestricted != null && message.hasOwnProperty("gdprAgeRestricted"))
                    object.gdprAgeRestricted = message.gdprAgeRestricted;
                if (message.lastDayAgeQueried != null && message.hasOwnProperty("lastDayAgeQueried"))
                    object.lastDayAgeQueried = message.lastDayAgeQueried;
                if (message.ageQueried != null && message.hasOwnProperty("ageQueried"))
                    object.ageQueried = message.ageQueried;
                if (message.ageRestricted != null && message.hasOwnProperty("ageRestricted"))
                    object.ageRestricted = message.ageRestricted;
                if (message.dataCollectionConsentQueried != null && message.hasOwnProperty("dataCollectionConsentQueried"))
                    object.dataCollectionConsentQueried = message.dataCollectionConsentQueried;
                if (message.dataCollectionConsentGiven != null && message.hasOwnProperty("dataCollectionConsentGiven"))
                    object.dataCollectionConsentGiven = message.dataCollectionConsentGiven;
                if (message.userAnalyticsEnabled != null && message.hasOwnProperty("userAnalyticsEnabled"))
                    object.userAnalyticsEnabled = message.userAnalyticsEnabled;
                if (message.userPersonalizedAdsEnabled != null && message.hasOwnProperty("userPersonalizedAdsEnabled"))
                    object.userPersonalizedAdsEnabled = message.userPersonalizedAdsEnabled;
                if (message.lastBackupTime != null && message.hasOwnProperty("lastBackupTime"))
                    object.lastBackupTime = options.json && !isFinite(message.lastBackupTime) ? String(message.lastBackupTime) : message.lastBackupTime;
                if (message.autoStopFueling != null && message.hasOwnProperty("autoStopFueling"))
                    object.autoStopFueling = message.autoStopFueling;
                return object;
            };

            /**
             * Converts this Settings to JSON.
             * @function toJSON
             * @memberof ei.Backup.Settings
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Settings.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Settings;
        })();

        Backup.Tutorial = (function() {

            /**
             * Properties of a Tutorial.
             * @memberof ei.Backup
             * @interface ITutorial
             * @property {boolean|null} [introShown] Tutorial introShown
             * @property {boolean|null} [clickTutorialShown] Tutorial clickTutorialShown
             * @property {boolean|null} [buyHabShown] Tutorial buyHabShown
             * @property {boolean|null} [hireVehicleShown] Tutorial hireVehicleShown
             * @property {boolean|null} [qNumShown] Tutorial qNumShown
             * @property {boolean|null} [sNumShown] Tutorial sNumShown
             * @property {boolean|null} [contractsTabShown] Tutorial contractsTabShown
             * @property {boolean|null} [contractInfoShown] Tutorial contractInfoShown
             * @property {boolean|null} [joinCoopShown] Tutorial joinCoopShown
             * @property {boolean|null} [switchFarmShown] Tutorial switchFarmShown
             * @property {Array.<boolean>|null} [tutorialShown] Tutorial tutorialShown
             */

            /**
             * Constructs a new Tutorial.
             * @memberof ei.Backup
             * @classdesc Represents a Tutorial.
             * @implements ITutorial
             * @constructor
             * @param {ei.Backup.ITutorial=} [properties] Properties to set
             */
            function Tutorial(properties) {
                this.tutorialShown = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Tutorial introShown.
             * @member {boolean} introShown
             * @memberof ei.Backup.Tutorial
             * @instance
             */
            Tutorial.prototype.introShown = false;

            /**
             * Tutorial clickTutorialShown.
             * @member {boolean} clickTutorialShown
             * @memberof ei.Backup.Tutorial
             * @instance
             */
            Tutorial.prototype.clickTutorialShown = false;

            /**
             * Tutorial buyHabShown.
             * @member {boolean} buyHabShown
             * @memberof ei.Backup.Tutorial
             * @instance
             */
            Tutorial.prototype.buyHabShown = false;

            /**
             * Tutorial hireVehicleShown.
             * @member {boolean} hireVehicleShown
             * @memberof ei.Backup.Tutorial
             * @instance
             */
            Tutorial.prototype.hireVehicleShown = false;

            /**
             * Tutorial qNumShown.
             * @member {boolean} qNumShown
             * @memberof ei.Backup.Tutorial
             * @instance
             */
            Tutorial.prototype.qNumShown = false;

            /**
             * Tutorial sNumShown.
             * @member {boolean} sNumShown
             * @memberof ei.Backup.Tutorial
             * @instance
             */
            Tutorial.prototype.sNumShown = false;

            /**
             * Tutorial contractsTabShown.
             * @member {boolean} contractsTabShown
             * @memberof ei.Backup.Tutorial
             * @instance
             */
            Tutorial.prototype.contractsTabShown = false;

            /**
             * Tutorial contractInfoShown.
             * @member {boolean} contractInfoShown
             * @memberof ei.Backup.Tutorial
             * @instance
             */
            Tutorial.prototype.contractInfoShown = false;

            /**
             * Tutorial joinCoopShown.
             * @member {boolean} joinCoopShown
             * @memberof ei.Backup.Tutorial
             * @instance
             */
            Tutorial.prototype.joinCoopShown = false;

            /**
             * Tutorial switchFarmShown.
             * @member {boolean} switchFarmShown
             * @memberof ei.Backup.Tutorial
             * @instance
             */
            Tutorial.prototype.switchFarmShown = false;

            /**
             * Tutorial tutorialShown.
             * @member {Array.<boolean>} tutorialShown
             * @memberof ei.Backup.Tutorial
             * @instance
             */
            Tutorial.prototype.tutorialShown = $util.emptyArray;

            /**
             * Creates a new Tutorial instance using the specified properties.
             * @function create
             * @memberof ei.Backup.Tutorial
             * @static
             * @param {ei.Backup.ITutorial=} [properties] Properties to set
             * @returns {ei.Backup.Tutorial} Tutorial instance
             */
            Tutorial.create = function create(properties) {
                return new Tutorial(properties);
            };

            /**
             * Encodes the specified Tutorial message. Does not implicitly {@link ei.Backup.Tutorial.verify|verify} messages.
             * @function encode
             * @memberof ei.Backup.Tutorial
             * @static
             * @param {ei.Backup.ITutorial} message Tutorial message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Tutorial.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.introShown != null && Object.hasOwnProperty.call(message, "introShown"))
                    writer.uint32(/* id 1, wireType 0 =*/8).bool(message.introShown);
                if (message.clickTutorialShown != null && Object.hasOwnProperty.call(message, "clickTutorialShown"))
                    writer.uint32(/* id 2, wireType 0 =*/16).bool(message.clickTutorialShown);
                if (message.buyHabShown != null && Object.hasOwnProperty.call(message, "buyHabShown"))
                    writer.uint32(/* id 3, wireType 0 =*/24).bool(message.buyHabShown);
                if (message.hireVehicleShown != null && Object.hasOwnProperty.call(message, "hireVehicleShown"))
                    writer.uint32(/* id 4, wireType 0 =*/32).bool(message.hireVehicleShown);
                if (message.qNumShown != null && Object.hasOwnProperty.call(message, "qNumShown"))
                    writer.uint32(/* id 5, wireType 0 =*/40).bool(message.qNumShown);
                if (message.sNumShown != null && Object.hasOwnProperty.call(message, "sNumShown"))
                    writer.uint32(/* id 6, wireType 0 =*/48).bool(message.sNumShown);
                if (message.contractsTabShown != null && Object.hasOwnProperty.call(message, "contractsTabShown"))
                    writer.uint32(/* id 7, wireType 0 =*/56).bool(message.contractsTabShown);
                if (message.contractInfoShown != null && Object.hasOwnProperty.call(message, "contractInfoShown"))
                    writer.uint32(/* id 8, wireType 0 =*/64).bool(message.contractInfoShown);
                if (message.joinCoopShown != null && Object.hasOwnProperty.call(message, "joinCoopShown"))
                    writer.uint32(/* id 9, wireType 0 =*/72).bool(message.joinCoopShown);
                if (message.switchFarmShown != null && Object.hasOwnProperty.call(message, "switchFarmShown"))
                    writer.uint32(/* id 10, wireType 0 =*/80).bool(message.switchFarmShown);
                if (message.tutorialShown != null && message.tutorialShown.length)
                    for (let i = 0; i < message.tutorialShown.length; ++i)
                        writer.uint32(/* id 11, wireType 0 =*/88).bool(message.tutorialShown[i]);
                return writer;
            };

            /**
             * Encodes the specified Tutorial message, length delimited. Does not implicitly {@link ei.Backup.Tutorial.verify|verify} messages.
             * @function encodeDelimited
             * @memberof ei.Backup.Tutorial
             * @static
             * @param {ei.Backup.ITutorial} message Tutorial message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Tutorial.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Tutorial message from the specified reader or buffer.
             * @function decode
             * @memberof ei.Backup.Tutorial
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {ei.Backup.Tutorial} Tutorial
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Tutorial.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ei.Backup.Tutorial();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.introShown = reader.bool();
                        break;
                    case 2:
                        message.clickTutorialShown = reader.bool();
                        break;
                    case 3:
                        message.buyHabShown = reader.bool();
                        break;
                    case 4:
                        message.hireVehicleShown = reader.bool();
                        break;
                    case 5:
                        message.qNumShown = reader.bool();
                        break;
                    case 6:
                        message.sNumShown = reader.bool();
                        break;
                    case 7:
                        message.contractsTabShown = reader.bool();
                        break;
                    case 8:
                        message.contractInfoShown = reader.bool();
                        break;
                    case 9:
                        message.joinCoopShown = reader.bool();
                        break;
                    case 10:
                        message.switchFarmShown = reader.bool();
                        break;
                    case 11:
                        if (!(message.tutorialShown && message.tutorialShown.length))
                            message.tutorialShown = [];
                        if ((tag & 7) === 2) {
                            let end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.tutorialShown.push(reader.bool());
                        } else
                            message.tutorialShown.push(reader.bool());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Tutorial message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof ei.Backup.Tutorial
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {ei.Backup.Tutorial} Tutorial
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Tutorial.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Tutorial message.
             * @function verify
             * @memberof ei.Backup.Tutorial
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Tutorial.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.introShown != null && message.hasOwnProperty("introShown"))
                    if (typeof message.introShown !== "boolean")
                        return "introShown: boolean expected";
                if (message.clickTutorialShown != null && message.hasOwnProperty("clickTutorialShown"))
                    if (typeof message.clickTutorialShown !== "boolean")
                        return "clickTutorialShown: boolean expected";
                if (message.buyHabShown != null && message.hasOwnProperty("buyHabShown"))
                    if (typeof message.buyHabShown !== "boolean")
                        return "buyHabShown: boolean expected";
                if (message.hireVehicleShown != null && message.hasOwnProperty("hireVehicleShown"))
                    if (typeof message.hireVehicleShown !== "boolean")
                        return "hireVehicleShown: boolean expected";
                if (message.qNumShown != null && message.hasOwnProperty("qNumShown"))
                    if (typeof message.qNumShown !== "boolean")
                        return "qNumShown: boolean expected";
                if (message.sNumShown != null && message.hasOwnProperty("sNumShown"))
                    if (typeof message.sNumShown !== "boolean")
                        return "sNumShown: boolean expected";
                if (message.contractsTabShown != null && message.hasOwnProperty("contractsTabShown"))
                    if (typeof message.contractsTabShown !== "boolean")
                        return "contractsTabShown: boolean expected";
                if (message.contractInfoShown != null && message.hasOwnProperty("contractInfoShown"))
                    if (typeof message.contractInfoShown !== "boolean")
                        return "contractInfoShown: boolean expected";
                if (message.joinCoopShown != null && message.hasOwnProperty("joinCoopShown"))
                    if (typeof message.joinCoopShown !== "boolean")
                        return "joinCoopShown: boolean expected";
                if (message.switchFarmShown != null && message.hasOwnProperty("switchFarmShown"))
                    if (typeof message.switchFarmShown !== "boolean")
                        return "switchFarmShown: boolean expected";
                if (message.tutorialShown != null && message.hasOwnProperty("tutorialShown")) {
                    if (!Array.isArray(message.tutorialShown))
                        return "tutorialShown: array expected";
                    for (let i = 0; i < message.tutorialShown.length; ++i)
                        if (typeof message.tutorialShown[i] !== "boolean")
                            return "tutorialShown: boolean[] expected";
                }
                return null;
            };

            /**
             * Creates a Tutorial message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof ei.Backup.Tutorial
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {ei.Backup.Tutorial} Tutorial
             */
            Tutorial.fromObject = function fromObject(object) {
                if (object instanceof $root.ei.Backup.Tutorial)
                    return object;
                let message = new $root.ei.Backup.Tutorial();
                if (object.introShown != null)
                    message.introShown = Boolean(object.introShown);
                if (object.clickTutorialShown != null)
                    message.clickTutorialShown = Boolean(object.clickTutorialShown);
                if (object.buyHabShown != null)
                    message.buyHabShown = Boolean(object.buyHabShown);
                if (object.hireVehicleShown != null)
                    message.hireVehicleShown = Boolean(object.hireVehicleShown);
                if (object.qNumShown != null)
                    message.qNumShown = Boolean(object.qNumShown);
                if (object.sNumShown != null)
                    message.sNumShown = Boolean(object.sNumShown);
                if (object.contractsTabShown != null)
                    message.contractsTabShown = Boolean(object.contractsTabShown);
                if (object.contractInfoShown != null)
                    message.contractInfoShown = Boolean(object.contractInfoShown);
                if (object.joinCoopShown != null)
                    message.joinCoopShown = Boolean(object.joinCoopShown);
                if (object.switchFarmShown != null)
                    message.switchFarmShown = Boolean(object.switchFarmShown);
                if (object.tutorialShown) {
                    if (!Array.isArray(object.tutorialShown))
                        throw TypeError(".ei.Backup.Tutorial.tutorialShown: array expected");
                    message.tutorialShown = [];
                    for (let i = 0; i < object.tutorialShown.length; ++i)
                        message.tutorialShown[i] = Boolean(object.tutorialShown[i]);
                }
                return message;
            };

            /**
             * Creates a plain object from a Tutorial message. Also converts values to other types if specified.
             * @function toObject
             * @memberof ei.Backup.Tutorial
             * @static
             * @param {ei.Backup.Tutorial} message Tutorial
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Tutorial.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.tutorialShown = [];
                if (options.defaults) {
                    object.introShown = false;
                    object.clickTutorialShown = false;
                    object.buyHabShown = false;
                    object.hireVehicleShown = false;
                    object.qNumShown = false;
                    object.sNumShown = false;
                    object.contractsTabShown = false;
                    object.contractInfoShown = false;
                    object.joinCoopShown = false;
                    object.switchFarmShown = false;
                }
                if (message.introShown != null && message.hasOwnProperty("introShown"))
                    object.introShown = message.introShown;
                if (message.clickTutorialShown != null && message.hasOwnProperty("clickTutorialShown"))
                    object.clickTutorialShown = message.clickTutorialShown;
                if (message.buyHabShown != null && message.hasOwnProperty("buyHabShown"))
                    object.buyHabShown = message.buyHabShown;
                if (message.hireVehicleShown != null && message.hasOwnProperty("hireVehicleShown"))
                    object.hireVehicleShown = message.hireVehicleShown;
                if (message.qNumShown != null && message.hasOwnProperty("qNumShown"))
                    object.qNumShown = message.qNumShown;
                if (message.sNumShown != null && message.hasOwnProperty("sNumShown"))
                    object.sNumShown = message.sNumShown;
                if (message.contractsTabShown != null && message.hasOwnProperty("contractsTabShown"))
                    object.contractsTabShown = message.contractsTabShown;
                if (message.contractInfoShown != null && message.hasOwnProperty("contractInfoShown"))
                    object.contractInfoShown = message.contractInfoShown;
                if (message.joinCoopShown != null && message.hasOwnProperty("joinCoopShown"))
                    object.joinCoopShown = message.joinCoopShown;
                if (message.switchFarmShown != null && message.hasOwnProperty("switchFarmShown"))
                    object.switchFarmShown = message.switchFarmShown;
                if (message.tutorialShown && message.tutorialShown.length) {
                    object.tutorialShown = [];
                    for (let j = 0; j < message.tutorialShown.length; ++j)
                        object.tutorialShown[j] = message.tutorialShown[j];
                }
                return object;
            };

            /**
             * Converts this Tutorial to JSON.
             * @function toJSON
             * @memberof ei.Backup.Tutorial
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Tutorial.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Tutorial;
        })();

        Backup.Stats = (function() {

            /**
             * Properties of a Stats.
             * @memberof ei.Backup
             * @interface IStats
             * @property {Array.<number|Long>|null} [eggTotals_OLD] Stats eggTotals_OLD
             * @property {Array.<number>|null} [eggTotals] Stats eggTotals
             * @property {number|Long|null} [unlimitedChickensUses] Stats unlimitedChickensUses
             * @property {number|Long|null} [refillUses] Stats refillUses
             * @property {number|Long|null} [warp_1Uses] Stats warp_1Uses
             * @property {number|Long|null} [warp_8Uses] Stats warp_8Uses
             * @property {number|Long|null} [boostsUsed] Stats boostsUsed
             * @property {number|Long|null} [videoDoublerUses] Stats videoDoublerUses
             * @property {number|Long|null} [droneTakedowns] Stats droneTakedowns
             * @property {number|Long|null} [droneTakedownsElite] Stats droneTakedownsElite
             * @property {number|Long|null} [numPrestiges] Stats numPrestiges
             * @property {number|Long|null} [numPiggyBreaks] Stats numPiggyBreaks
             * @property {number|Long|null} [iapPacksPurchased] Stats iapPacksPurchased
             * @property {boolean|null} [piggyFull] Stats piggyFull
             * @property {boolean|null} [piggyFoundFull] Stats piggyFoundFull
             * @property {number|null} [timePiggyFilledRealtime] Stats timePiggyFilledRealtime
             * @property {number|null} [timePiggyFullGametime] Stats timePiggyFullGametime
             * @property {number|Long|null} [lostPiggyIncrements] Stats lostPiggyIncrements
             */

            /**
             * Constructs a new Stats.
             * @memberof ei.Backup
             * @classdesc Represents a Stats.
             * @implements IStats
             * @constructor
             * @param {ei.Backup.IStats=} [properties] Properties to set
             */
            function Stats(properties) {
                this.eggTotals_OLD = [];
                this.eggTotals = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Stats eggTotals_OLD.
             * @member {Array.<number|Long>} eggTotals_OLD
             * @memberof ei.Backup.Stats
             * @instance
             */
            Stats.prototype.eggTotals_OLD = $util.emptyArray;

            /**
             * Stats eggTotals.
             * @member {Array.<number>} eggTotals
             * @memberof ei.Backup.Stats
             * @instance
             */
            Stats.prototype.eggTotals = $util.emptyArray;

            /**
             * Stats unlimitedChickensUses.
             * @member {number|Long} unlimitedChickensUses
             * @memberof ei.Backup.Stats
             * @instance
             */
            Stats.prototype.unlimitedChickensUses = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * Stats refillUses.
             * @member {number|Long} refillUses
             * @memberof ei.Backup.Stats
             * @instance
             */
            Stats.prototype.refillUses = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * Stats warp_1Uses.
             * @member {number|Long} warp_1Uses
             * @memberof ei.Backup.Stats
             * @instance
             */
            Stats.prototype.warp_1Uses = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * Stats warp_8Uses.
             * @member {number|Long} warp_8Uses
             * @memberof ei.Backup.Stats
             * @instance
             */
            Stats.prototype.warp_8Uses = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * Stats boostsUsed.
             * @member {number|Long} boostsUsed
             * @memberof ei.Backup.Stats
             * @instance
             */
            Stats.prototype.boostsUsed = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * Stats videoDoublerUses.
             * @member {number|Long} videoDoublerUses
             * @memberof ei.Backup.Stats
             * @instance
             */
            Stats.prototype.videoDoublerUses = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * Stats droneTakedowns.
             * @member {number|Long} droneTakedowns
             * @memberof ei.Backup.Stats
             * @instance
             */
            Stats.prototype.droneTakedowns = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * Stats droneTakedownsElite.
             * @member {number|Long} droneTakedownsElite
             * @memberof ei.Backup.Stats
             * @instance
             */
            Stats.prototype.droneTakedownsElite = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * Stats numPrestiges.
             * @member {number|Long} numPrestiges
             * @memberof ei.Backup.Stats
             * @instance
             */
            Stats.prototype.numPrestiges = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * Stats numPiggyBreaks.
             * @member {number|Long} numPiggyBreaks
             * @memberof ei.Backup.Stats
             * @instance
             */
            Stats.prototype.numPiggyBreaks = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * Stats iapPacksPurchased.
             * @member {number|Long} iapPacksPurchased
             * @memberof ei.Backup.Stats
             * @instance
             */
            Stats.prototype.iapPacksPurchased = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * Stats piggyFull.
             * @member {boolean} piggyFull
             * @memberof ei.Backup.Stats
             * @instance
             */
            Stats.prototype.piggyFull = false;

            /**
             * Stats piggyFoundFull.
             * @member {boolean} piggyFoundFull
             * @memberof ei.Backup.Stats
             * @instance
             */
            Stats.prototype.piggyFoundFull = false;

            /**
             * Stats timePiggyFilledRealtime.
             * @member {number} timePiggyFilledRealtime
             * @memberof ei.Backup.Stats
             * @instance
             */
            Stats.prototype.timePiggyFilledRealtime = 0;

            /**
             * Stats timePiggyFullGametime.
             * @member {number} timePiggyFullGametime
             * @memberof ei.Backup.Stats
             * @instance
             */
            Stats.prototype.timePiggyFullGametime = 0;

            /**
             * Stats lostPiggyIncrements.
             * @member {number|Long} lostPiggyIncrements
             * @memberof ei.Backup.Stats
             * @instance
             */
            Stats.prototype.lostPiggyIncrements = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * Creates a new Stats instance using the specified properties.
             * @function create
             * @memberof ei.Backup.Stats
             * @static
             * @param {ei.Backup.IStats=} [properties] Properties to set
             * @returns {ei.Backup.Stats} Stats instance
             */
            Stats.create = function create(properties) {
                return new Stats(properties);
            };

            /**
             * Encodes the specified Stats message. Does not implicitly {@link ei.Backup.Stats.verify|verify} messages.
             * @function encode
             * @memberof ei.Backup.Stats
             * @static
             * @param {ei.Backup.IStats} message Stats message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Stats.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.eggTotals_OLD != null && message.eggTotals_OLD.length)
                    for (let i = 0; i < message.eggTotals_OLD.length; ++i)
                        writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.eggTotals_OLD[i]);
                if (message.refillUses != null && Object.hasOwnProperty.call(message, "refillUses"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.refillUses);
                if (message.videoDoublerUses != null && Object.hasOwnProperty.call(message, "videoDoublerUses"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.videoDoublerUses);
                if (message.warp_1Uses != null && Object.hasOwnProperty.call(message, "warp_1Uses"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.warp_1Uses);
                if (message.warp_8Uses != null && Object.hasOwnProperty.call(message, "warp_8Uses"))
                    writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.warp_8Uses);
                if (message.droneTakedowns != null && Object.hasOwnProperty.call(message, "droneTakedowns"))
                    writer.uint32(/* id 6, wireType 0 =*/48).uint64(message.droneTakedowns);
                if (message.unlimitedChickensUses != null && Object.hasOwnProperty.call(message, "unlimitedChickensUses"))
                    writer.uint32(/* id 7, wireType 0 =*/56).uint64(message.unlimitedChickensUses);
                if (message.eggTotals != null && message.eggTotals.length)
                    for (let i = 0; i < message.eggTotals.length; ++i)
                        writer.uint32(/* id 8, wireType 1 =*/65).double(message.eggTotals[i]);
                if (message.numPrestiges != null && Object.hasOwnProperty.call(message, "numPrestiges"))
                    writer.uint32(/* id 9, wireType 0 =*/72).uint64(message.numPrestiges);
                if (message.droneTakedownsElite != null && Object.hasOwnProperty.call(message, "droneTakedownsElite"))
                    writer.uint32(/* id 10, wireType 0 =*/80).uint64(message.droneTakedownsElite);
                if (message.numPiggyBreaks != null && Object.hasOwnProperty.call(message, "numPiggyBreaks"))
                    writer.uint32(/* id 11, wireType 0 =*/88).uint64(message.numPiggyBreaks);
                if (message.iapPacksPurchased != null && Object.hasOwnProperty.call(message, "iapPacksPurchased"))
                    writer.uint32(/* id 12, wireType 0 =*/96).uint64(message.iapPacksPurchased);
                if (message.boostsUsed != null && Object.hasOwnProperty.call(message, "boostsUsed"))
                    writer.uint32(/* id 13, wireType 0 =*/104).uint64(message.boostsUsed);
                if (message.piggyFull != null && Object.hasOwnProperty.call(message, "piggyFull"))
                    writer.uint32(/* id 14, wireType 0 =*/112).bool(message.piggyFull);
                if (message.piggyFoundFull != null && Object.hasOwnProperty.call(message, "piggyFoundFull"))
                    writer.uint32(/* id 15, wireType 0 =*/120).bool(message.piggyFoundFull);
                if (message.timePiggyFilledRealtime != null && Object.hasOwnProperty.call(message, "timePiggyFilledRealtime"))
                    writer.uint32(/* id 16, wireType 1 =*/129).double(message.timePiggyFilledRealtime);
                if (message.timePiggyFullGametime != null && Object.hasOwnProperty.call(message, "timePiggyFullGametime"))
                    writer.uint32(/* id 17, wireType 1 =*/137).double(message.timePiggyFullGametime);
                if (message.lostPiggyIncrements != null && Object.hasOwnProperty.call(message, "lostPiggyIncrements"))
                    writer.uint32(/* id 18, wireType 0 =*/144).uint64(message.lostPiggyIncrements);
                return writer;
            };

            /**
             * Encodes the specified Stats message, length delimited. Does not implicitly {@link ei.Backup.Stats.verify|verify} messages.
             * @function encodeDelimited
             * @memberof ei.Backup.Stats
             * @static
             * @param {ei.Backup.IStats} message Stats message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Stats.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Stats message from the specified reader or buffer.
             * @function decode
             * @memberof ei.Backup.Stats
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {ei.Backup.Stats} Stats
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Stats.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ei.Backup.Stats();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.eggTotals_OLD && message.eggTotals_OLD.length))
                            message.eggTotals_OLD = [];
                        if ((tag & 7) === 2) {
                            let end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.eggTotals_OLD.push(reader.uint64());
                        } else
                            message.eggTotals_OLD.push(reader.uint64());
                        break;
                    case 8:
                        if (!(message.eggTotals && message.eggTotals.length))
                            message.eggTotals = [];
                        if ((tag & 7) === 2) {
                            let end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.eggTotals.push(reader.double());
                        } else
                            message.eggTotals.push(reader.double());
                        break;
                    case 7:
                        message.unlimitedChickensUses = reader.uint64();
                        break;
                    case 2:
                        message.refillUses = reader.uint64();
                        break;
                    case 4:
                        message.warp_1Uses = reader.uint64();
                        break;
                    case 5:
                        message.warp_8Uses = reader.uint64();
                        break;
                    case 13:
                        message.boostsUsed = reader.uint64();
                        break;
                    case 3:
                        message.videoDoublerUses = reader.uint64();
                        break;
                    case 6:
                        message.droneTakedowns = reader.uint64();
                        break;
                    case 10:
                        message.droneTakedownsElite = reader.uint64();
                        break;
                    case 9:
                        message.numPrestiges = reader.uint64();
                        break;
                    case 11:
                        message.numPiggyBreaks = reader.uint64();
                        break;
                    case 12:
                        message.iapPacksPurchased = reader.uint64();
                        break;
                    case 14:
                        message.piggyFull = reader.bool();
                        break;
                    case 15:
                        message.piggyFoundFull = reader.bool();
                        break;
                    case 16:
                        message.timePiggyFilledRealtime = reader.double();
                        break;
                    case 17:
                        message.timePiggyFullGametime = reader.double();
                        break;
                    case 18:
                        message.lostPiggyIncrements = reader.uint64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Stats message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof ei.Backup.Stats
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {ei.Backup.Stats} Stats
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Stats.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Stats message.
             * @function verify
             * @memberof ei.Backup.Stats
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Stats.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.eggTotals_OLD != null && message.hasOwnProperty("eggTotals_OLD")) {
                    if (!Array.isArray(message.eggTotals_OLD))
                        return "eggTotals_OLD: array expected";
                    for (let i = 0; i < message.eggTotals_OLD.length; ++i)
                        if (!$util.isInteger(message.eggTotals_OLD[i]) && !(message.eggTotals_OLD[i] && $util.isInteger(message.eggTotals_OLD[i].low) && $util.isInteger(message.eggTotals_OLD[i].high)))
                            return "eggTotals_OLD: integer|Long[] expected";
                }
                if (message.eggTotals != null && message.hasOwnProperty("eggTotals")) {
                    if (!Array.isArray(message.eggTotals))
                        return "eggTotals: array expected";
                    for (let i = 0; i < message.eggTotals.length; ++i)
                        if (typeof message.eggTotals[i] !== "number")
                            return "eggTotals: number[] expected";
                }
                if (message.unlimitedChickensUses != null && message.hasOwnProperty("unlimitedChickensUses"))
                    if (!$util.isInteger(message.unlimitedChickensUses) && !(message.unlimitedChickensUses && $util.isInteger(message.unlimitedChickensUses.low) && $util.isInteger(message.unlimitedChickensUses.high)))
                        return "unlimitedChickensUses: integer|Long expected";
                if (message.refillUses != null && message.hasOwnProperty("refillUses"))
                    if (!$util.isInteger(message.refillUses) && !(message.refillUses && $util.isInteger(message.refillUses.low) && $util.isInteger(message.refillUses.high)))
                        return "refillUses: integer|Long expected";
                if (message.warp_1Uses != null && message.hasOwnProperty("warp_1Uses"))
                    if (!$util.isInteger(message.warp_1Uses) && !(message.warp_1Uses && $util.isInteger(message.warp_1Uses.low) && $util.isInteger(message.warp_1Uses.high)))
                        return "warp_1Uses: integer|Long expected";
                if (message.warp_8Uses != null && message.hasOwnProperty("warp_8Uses"))
                    if (!$util.isInteger(message.warp_8Uses) && !(message.warp_8Uses && $util.isInteger(message.warp_8Uses.low) && $util.isInteger(message.warp_8Uses.high)))
                        return "warp_8Uses: integer|Long expected";
                if (message.boostsUsed != null && message.hasOwnProperty("boostsUsed"))
                    if (!$util.isInteger(message.boostsUsed) && !(message.boostsUsed && $util.isInteger(message.boostsUsed.low) && $util.isInteger(message.boostsUsed.high)))
                        return "boostsUsed: integer|Long expected";
                if (message.videoDoublerUses != null && message.hasOwnProperty("videoDoublerUses"))
                    if (!$util.isInteger(message.videoDoublerUses) && !(message.videoDoublerUses && $util.isInteger(message.videoDoublerUses.low) && $util.isInteger(message.videoDoublerUses.high)))
                        return "videoDoublerUses: integer|Long expected";
                if (message.droneTakedowns != null && message.hasOwnProperty("droneTakedowns"))
                    if (!$util.isInteger(message.droneTakedowns) && !(message.droneTakedowns && $util.isInteger(message.droneTakedowns.low) && $util.isInteger(message.droneTakedowns.high)))
                        return "droneTakedowns: integer|Long expected";
                if (message.droneTakedownsElite != null && message.hasOwnProperty("droneTakedownsElite"))
                    if (!$util.isInteger(message.droneTakedownsElite) && !(message.droneTakedownsElite && $util.isInteger(message.droneTakedownsElite.low) && $util.isInteger(message.droneTakedownsElite.high)))
                        return "droneTakedownsElite: integer|Long expected";
                if (message.numPrestiges != null && message.hasOwnProperty("numPrestiges"))
                    if (!$util.isInteger(message.numPrestiges) && !(message.numPrestiges && $util.isInteger(message.numPrestiges.low) && $util.isInteger(message.numPrestiges.high)))
                        return "numPrestiges: integer|Long expected";
                if (message.numPiggyBreaks != null && message.hasOwnProperty("numPiggyBreaks"))
                    if (!$util.isInteger(message.numPiggyBreaks) && !(message.numPiggyBreaks && $util.isInteger(message.numPiggyBreaks.low) && $util.isInteger(message.numPiggyBreaks.high)))
                        return "numPiggyBreaks: integer|Long expected";
                if (message.iapPacksPurchased != null && message.hasOwnProperty("iapPacksPurchased"))
                    if (!$util.isInteger(message.iapPacksPurchased) && !(message.iapPacksPurchased && $util.isInteger(message.iapPacksPurchased.low) && $util.isInteger(message.iapPacksPurchased.high)))
                        return "iapPacksPurchased: integer|Long expected";
                if (message.piggyFull != null && message.hasOwnProperty("piggyFull"))
                    if (typeof message.piggyFull !== "boolean")
                        return "piggyFull: boolean expected";
                if (message.piggyFoundFull != null && message.hasOwnProperty("piggyFoundFull"))
                    if (typeof message.piggyFoundFull !== "boolean")
                        return "piggyFoundFull: boolean expected";
                if (message.timePiggyFilledRealtime != null && message.hasOwnProperty("timePiggyFilledRealtime"))
                    if (typeof message.timePiggyFilledRealtime !== "number")
                        return "timePiggyFilledRealtime: number expected";
                if (message.timePiggyFullGametime != null && message.hasOwnProperty("timePiggyFullGametime"))
                    if (typeof message.timePiggyFullGametime !== "number")
                        return "timePiggyFullGametime: number expected";
                if (message.lostPiggyIncrements != null && message.hasOwnProperty("lostPiggyIncrements"))
                    if (!$util.isInteger(message.lostPiggyIncrements) && !(message.lostPiggyIncrements && $util.isInteger(message.lostPiggyIncrements.low) && $util.isInteger(message.lostPiggyIncrements.high)))
                        return "lostPiggyIncrements: integer|Long expected";
                return null;
            };

            /**
             * Creates a Stats message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof ei.Backup.Stats
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {ei.Backup.Stats} Stats
             */
            Stats.fromObject = function fromObject(object) {
                if (object instanceof $root.ei.Backup.Stats)
                    return object;
                let message = new $root.ei.Backup.Stats();
                if (object.eggTotals_OLD) {
                    if (!Array.isArray(object.eggTotals_OLD))
                        throw TypeError(".ei.Backup.Stats.eggTotals_OLD: array expected");
                    message.eggTotals_OLD = [];
                    for (let i = 0; i < object.eggTotals_OLD.length; ++i)
                        if ($util.Long)
                            (message.eggTotals_OLD[i] = $util.Long.fromValue(object.eggTotals_OLD[i])).unsigned = true;
                        else if (typeof object.eggTotals_OLD[i] === "string")
                            message.eggTotals_OLD[i] = parseInt(object.eggTotals_OLD[i], 10);
                        else if (typeof object.eggTotals_OLD[i] === "number")
                            message.eggTotals_OLD[i] = object.eggTotals_OLD[i];
                        else if (typeof object.eggTotals_OLD[i] === "object")
                            message.eggTotals_OLD[i] = new $util.LongBits(object.eggTotals_OLD[i].low >>> 0, object.eggTotals_OLD[i].high >>> 0).toNumber(true);
                }
                if (object.eggTotals) {
                    if (!Array.isArray(object.eggTotals))
                        throw TypeError(".ei.Backup.Stats.eggTotals: array expected");
                    message.eggTotals = [];
                    for (let i = 0; i < object.eggTotals.length; ++i)
                        message.eggTotals[i] = Number(object.eggTotals[i]);
                }
                if (object.unlimitedChickensUses != null)
                    if ($util.Long)
                        (message.unlimitedChickensUses = $util.Long.fromValue(object.unlimitedChickensUses)).unsigned = true;
                    else if (typeof object.unlimitedChickensUses === "string")
                        message.unlimitedChickensUses = parseInt(object.unlimitedChickensUses, 10);
                    else if (typeof object.unlimitedChickensUses === "number")
                        message.unlimitedChickensUses = object.unlimitedChickensUses;
                    else if (typeof object.unlimitedChickensUses === "object")
                        message.unlimitedChickensUses = new $util.LongBits(object.unlimitedChickensUses.low >>> 0, object.unlimitedChickensUses.high >>> 0).toNumber(true);
                if (object.refillUses != null)
                    if ($util.Long)
                        (message.refillUses = $util.Long.fromValue(object.refillUses)).unsigned = true;
                    else if (typeof object.refillUses === "string")
                        message.refillUses = parseInt(object.refillUses, 10);
                    else if (typeof object.refillUses === "number")
                        message.refillUses = object.refillUses;
                    else if (typeof object.refillUses === "object")
                        message.refillUses = new $util.LongBits(object.refillUses.low >>> 0, object.refillUses.high >>> 0).toNumber(true);
                if (object.warp_1Uses != null)
                    if ($util.Long)
                        (message.warp_1Uses = $util.Long.fromValue(object.warp_1Uses)).unsigned = true;
                    else if (typeof object.warp_1Uses === "string")
                        message.warp_1Uses = parseInt(object.warp_1Uses, 10);
                    else if (typeof object.warp_1Uses === "number")
                        message.warp_1Uses = object.warp_1Uses;
                    else if (typeof object.warp_1Uses === "object")
                        message.warp_1Uses = new $util.LongBits(object.warp_1Uses.low >>> 0, object.warp_1Uses.high >>> 0).toNumber(true);
                if (object.warp_8Uses != null)
                    if ($util.Long)
                        (message.warp_8Uses = $util.Long.fromValue(object.warp_8Uses)).unsigned = true;
                    else if (typeof object.warp_8Uses === "string")
                        message.warp_8Uses = parseInt(object.warp_8Uses, 10);
                    else if (typeof object.warp_8Uses === "number")
                        message.warp_8Uses = object.warp_8Uses;
                    else if (typeof object.warp_8Uses === "object")
                        message.warp_8Uses = new $util.LongBits(object.warp_8Uses.low >>> 0, object.warp_8Uses.high >>> 0).toNumber(true);
                if (object.boostsUsed != null)
                    if ($util.Long)
                        (message.boostsUsed = $util.Long.fromValue(object.boostsUsed)).unsigned = true;
                    else if (typeof object.boostsUsed === "string")
                        message.boostsUsed = parseInt(object.boostsUsed, 10);
                    else if (typeof object.boostsUsed === "number")
                        message.boostsUsed = object.boostsUsed;
                    else if (typeof object.boostsUsed === "object")
                        message.boostsUsed = new $util.LongBits(object.boostsUsed.low >>> 0, object.boostsUsed.high >>> 0).toNumber(true);
                if (object.videoDoublerUses != null)
                    if ($util.Long)
                        (message.videoDoublerUses = $util.Long.fromValue(object.videoDoublerUses)).unsigned = true;
                    else if (typeof object.videoDoublerUses === "string")
                        message.videoDoublerUses = parseInt(object.videoDoublerUses, 10);
                    else if (typeof object.videoDoublerUses === "number")
                        message.videoDoublerUses = object.videoDoublerUses;
                    else if (typeof object.videoDoublerUses === "object")
                        message.videoDoublerUses = new $util.LongBits(object.videoDoublerUses.low >>> 0, object.videoDoublerUses.high >>> 0).toNumber(true);
                if (object.droneTakedowns != null)
                    if ($util.Long)
                        (message.droneTakedowns = $util.Long.fromValue(object.droneTakedowns)).unsigned = true;
                    else if (typeof object.droneTakedowns === "string")
                        message.droneTakedowns = parseInt(object.droneTakedowns, 10);
                    else if (typeof object.droneTakedowns === "number")
                        message.droneTakedowns = object.droneTakedowns;
                    else if (typeof object.droneTakedowns === "object")
                        message.droneTakedowns = new $util.LongBits(object.droneTakedowns.low >>> 0, object.droneTakedowns.high >>> 0).toNumber(true);
                if (object.droneTakedownsElite != null)
                    if ($util.Long)
                        (message.droneTakedownsElite = $util.Long.fromValue(object.droneTakedownsElite)).unsigned = true;
                    else if (typeof object.droneTakedownsElite === "string")
                        message.droneTakedownsElite = parseInt(object.droneTakedownsElite, 10);
                    else if (typeof object.droneTakedownsElite === "number")
                        message.droneTakedownsElite = object.droneTakedownsElite;
                    else if (typeof object.droneTakedownsElite === "object")
                        message.droneTakedownsElite = new $util.LongBits(object.droneTakedownsElite.low >>> 0, object.droneTakedownsElite.high >>> 0).toNumber(true);
                if (object.numPrestiges != null)
                    if ($util.Long)
                        (message.numPrestiges = $util.Long.fromValue(object.numPrestiges)).unsigned = true;
                    else if (typeof object.numPrestiges === "string")
                        message.numPrestiges = parseInt(object.numPrestiges, 10);
                    else if (typeof object.numPrestiges === "number")
                        message.numPrestiges = object.numPrestiges;
                    else if (typeof object.numPrestiges === "object")
                        message.numPrestiges = new $util.LongBits(object.numPrestiges.low >>> 0, object.numPrestiges.high >>> 0).toNumber(true);
                if (object.numPiggyBreaks != null)
                    if ($util.Long)
                        (message.numPiggyBreaks = $util.Long.fromValue(object.numPiggyBreaks)).unsigned = true;
                    else if (typeof object.numPiggyBreaks === "string")
                        message.numPiggyBreaks = parseInt(object.numPiggyBreaks, 10);
                    else if (typeof object.numPiggyBreaks === "number")
                        message.numPiggyBreaks = object.numPiggyBreaks;
                    else if (typeof object.numPiggyBreaks === "object")
                        message.numPiggyBreaks = new $util.LongBits(object.numPiggyBreaks.low >>> 0, object.numPiggyBreaks.high >>> 0).toNumber(true);
                if (object.iapPacksPurchased != null)
                    if ($util.Long)
                        (message.iapPacksPurchased = $util.Long.fromValue(object.iapPacksPurchased)).unsigned = true;
                    else if (typeof object.iapPacksPurchased === "string")
                        message.iapPacksPurchased = parseInt(object.iapPacksPurchased, 10);
                    else if (typeof object.iapPacksPurchased === "number")
                        message.iapPacksPurchased = object.iapPacksPurchased;
                    else if (typeof object.iapPacksPurchased === "object")
                        message.iapPacksPurchased = new $util.LongBits(object.iapPacksPurchased.low >>> 0, object.iapPacksPurchased.high >>> 0).toNumber(true);
                if (object.piggyFull != null)
                    message.piggyFull = Boolean(object.piggyFull);
                if (object.piggyFoundFull != null)
                    message.piggyFoundFull = Boolean(object.piggyFoundFull);
                if (object.timePiggyFilledRealtime != null)
                    message.timePiggyFilledRealtime = Number(object.timePiggyFilledRealtime);
                if (object.timePiggyFullGametime != null)
                    message.timePiggyFullGametime = Number(object.timePiggyFullGametime);
                if (object.lostPiggyIncrements != null)
                    if ($util.Long)
                        (message.lostPiggyIncrements = $util.Long.fromValue(object.lostPiggyIncrements)).unsigned = true;
                    else if (typeof object.lostPiggyIncrements === "string")
                        message.lostPiggyIncrements = parseInt(object.lostPiggyIncrements, 10);
                    else if (typeof object.lostPiggyIncrements === "number")
                        message.lostPiggyIncrements = object.lostPiggyIncrements;
                    else if (typeof object.lostPiggyIncrements === "object")
                        message.lostPiggyIncrements = new $util.LongBits(object.lostPiggyIncrements.low >>> 0, object.lostPiggyIncrements.high >>> 0).toNumber(true);
                return message;
            };

            /**
             * Creates a plain object from a Stats message. Also converts values to other types if specified.
             * @function toObject
             * @memberof ei.Backup.Stats
             * @static
             * @param {ei.Backup.Stats} message Stats
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Stats.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults) {
                    object.eggTotals_OLD = [];
                    object.eggTotals = [];
                }
                if (options.defaults) {
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.refillUses = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.refillUses = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.videoDoublerUses = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.videoDoublerUses = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.warp_1Uses = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.warp_1Uses = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.warp_8Uses = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.warp_8Uses = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.droneTakedowns = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.droneTakedowns = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.unlimitedChickensUses = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.unlimitedChickensUses = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.numPrestiges = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.numPrestiges = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.droneTakedownsElite = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.droneTakedownsElite = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.numPiggyBreaks = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.numPiggyBreaks = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.iapPacksPurchased = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.iapPacksPurchased = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.boostsUsed = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.boostsUsed = options.longs === String ? "0" : 0;
                    object.piggyFull = false;
                    object.piggyFoundFull = false;
                    object.timePiggyFilledRealtime = 0;
                    object.timePiggyFullGametime = 0;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.lostPiggyIncrements = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.lostPiggyIncrements = options.longs === String ? "0" : 0;
                }
                if (message.eggTotals_OLD && message.eggTotals_OLD.length) {
                    object.eggTotals_OLD = [];
                    for (let j = 0; j < message.eggTotals_OLD.length; ++j)
                        if (typeof message.eggTotals_OLD[j] === "number")
                            object.eggTotals_OLD[j] = options.longs === String ? String(message.eggTotals_OLD[j]) : message.eggTotals_OLD[j];
                        else
                            object.eggTotals_OLD[j] = options.longs === String ? $util.Long.prototype.toString.call(message.eggTotals_OLD[j]) : options.longs === Number ? new $util.LongBits(message.eggTotals_OLD[j].low >>> 0, message.eggTotals_OLD[j].high >>> 0).toNumber(true) : message.eggTotals_OLD[j];
                }
                if (message.refillUses != null && message.hasOwnProperty("refillUses"))
                    if (typeof message.refillUses === "number")
                        object.refillUses = options.longs === String ? String(message.refillUses) : message.refillUses;
                    else
                        object.refillUses = options.longs === String ? $util.Long.prototype.toString.call(message.refillUses) : options.longs === Number ? new $util.LongBits(message.refillUses.low >>> 0, message.refillUses.high >>> 0).toNumber(true) : message.refillUses;
                if (message.videoDoublerUses != null && message.hasOwnProperty("videoDoublerUses"))
                    if (typeof message.videoDoublerUses === "number")
                        object.videoDoublerUses = options.longs === String ? String(message.videoDoublerUses) : message.videoDoublerUses;
                    else
                        object.videoDoublerUses = options.longs === String ? $util.Long.prototype.toString.call(message.videoDoublerUses) : options.longs === Number ? new $util.LongBits(message.videoDoublerUses.low >>> 0, message.videoDoublerUses.high >>> 0).toNumber(true) : message.videoDoublerUses;
                if (message.warp_1Uses != null && message.hasOwnProperty("warp_1Uses"))
                    if (typeof message.warp_1Uses === "number")
                        object.warp_1Uses = options.longs === String ? String(message.warp_1Uses) : message.warp_1Uses;
                    else
                        object.warp_1Uses = options.longs === String ? $util.Long.prototype.toString.call(message.warp_1Uses) : options.longs === Number ? new $util.LongBits(message.warp_1Uses.low >>> 0, message.warp_1Uses.high >>> 0).toNumber(true) : message.warp_1Uses;
                if (message.warp_8Uses != null && message.hasOwnProperty("warp_8Uses"))
                    if (typeof message.warp_8Uses === "number")
                        object.warp_8Uses = options.longs === String ? String(message.warp_8Uses) : message.warp_8Uses;
                    else
                        object.warp_8Uses = options.longs === String ? $util.Long.prototype.toString.call(message.warp_8Uses) : options.longs === Number ? new $util.LongBits(message.warp_8Uses.low >>> 0, message.warp_8Uses.high >>> 0).toNumber(true) : message.warp_8Uses;
                if (message.droneTakedowns != null && message.hasOwnProperty("droneTakedowns"))
                    if (typeof message.droneTakedowns === "number")
                        object.droneTakedowns = options.longs === String ? String(message.droneTakedowns) : message.droneTakedowns;
                    else
                        object.droneTakedowns = options.longs === String ? $util.Long.prototype.toString.call(message.droneTakedowns) : options.longs === Number ? new $util.LongBits(message.droneTakedowns.low >>> 0, message.droneTakedowns.high >>> 0).toNumber(true) : message.droneTakedowns;
                if (message.unlimitedChickensUses != null && message.hasOwnProperty("unlimitedChickensUses"))
                    if (typeof message.unlimitedChickensUses === "number")
                        object.unlimitedChickensUses = options.longs === String ? String(message.unlimitedChickensUses) : message.unlimitedChickensUses;
                    else
                        object.unlimitedChickensUses = options.longs === String ? $util.Long.prototype.toString.call(message.unlimitedChickensUses) : options.longs === Number ? new $util.LongBits(message.unlimitedChickensUses.low >>> 0, message.unlimitedChickensUses.high >>> 0).toNumber(true) : message.unlimitedChickensUses;
                if (message.eggTotals && message.eggTotals.length) {
                    object.eggTotals = [];
                    for (let j = 0; j < message.eggTotals.length; ++j)
                        object.eggTotals[j] = options.json && !isFinite(message.eggTotals[j]) ? String(message.eggTotals[j]) : message.eggTotals[j];
                }
                if (message.numPrestiges != null && message.hasOwnProperty("numPrestiges"))
                    if (typeof message.numPrestiges === "number")
                        object.numPrestiges = options.longs === String ? String(message.numPrestiges) : message.numPrestiges;
                    else
                        object.numPrestiges = options.longs === String ? $util.Long.prototype.toString.call(message.numPrestiges) : options.longs === Number ? new $util.LongBits(message.numPrestiges.low >>> 0, message.numPrestiges.high >>> 0).toNumber(true) : message.numPrestiges;
                if (message.droneTakedownsElite != null && message.hasOwnProperty("droneTakedownsElite"))
                    if (typeof message.droneTakedownsElite === "number")
                        object.droneTakedownsElite = options.longs === String ? String(message.droneTakedownsElite) : message.droneTakedownsElite;
                    else
                        object.droneTakedownsElite = options.longs === String ? $util.Long.prototype.toString.call(message.droneTakedownsElite) : options.longs === Number ? new $util.LongBits(message.droneTakedownsElite.low >>> 0, message.droneTakedownsElite.high >>> 0).toNumber(true) : message.droneTakedownsElite;
                if (message.numPiggyBreaks != null && message.hasOwnProperty("numPiggyBreaks"))
                    if (typeof message.numPiggyBreaks === "number")
                        object.numPiggyBreaks = options.longs === String ? String(message.numPiggyBreaks) : message.numPiggyBreaks;
                    else
                        object.numPiggyBreaks = options.longs === String ? $util.Long.prototype.toString.call(message.numPiggyBreaks) : options.longs === Number ? new $util.LongBits(message.numPiggyBreaks.low >>> 0, message.numPiggyBreaks.high >>> 0).toNumber(true) : message.numPiggyBreaks;
                if (message.iapPacksPurchased != null && message.hasOwnProperty("iapPacksPurchased"))
                    if (typeof message.iapPacksPurchased === "number")
                        object.iapPacksPurchased = options.longs === String ? String(message.iapPacksPurchased) : message.iapPacksPurchased;
                    else
                        object.iapPacksPurchased = options.longs === String ? $util.Long.prototype.toString.call(message.iapPacksPurchased) : options.longs === Number ? new $util.LongBits(message.iapPacksPurchased.low >>> 0, message.iapPacksPurchased.high >>> 0).toNumber(true) : message.iapPacksPurchased;
                if (message.boostsUsed != null && message.hasOwnProperty("boostsUsed"))
                    if (typeof message.boostsUsed === "number")
                        object.boostsUsed = options.longs === String ? String(message.boostsUsed) : message.boostsUsed;
                    else
                        object.boostsUsed = options.longs === String ? $util.Long.prototype.toString.call(message.boostsUsed) : options.longs === Number ? new $util.LongBits(message.boostsUsed.low >>> 0, message.boostsUsed.high >>> 0).toNumber(true) : message.boostsUsed;
                if (message.piggyFull != null && message.hasOwnProperty("piggyFull"))
                    object.piggyFull = message.piggyFull;
                if (message.piggyFoundFull != null && message.hasOwnProperty("piggyFoundFull"))
                    object.piggyFoundFull = message.piggyFoundFull;
                if (message.timePiggyFilledRealtime != null && message.hasOwnProperty("timePiggyFilledRealtime"))
                    object.timePiggyFilledRealtime = options.json && !isFinite(message.timePiggyFilledRealtime) ? String(message.timePiggyFilledRealtime) : message.timePiggyFilledRealtime;
                if (message.timePiggyFullGametime != null && message.hasOwnProperty("timePiggyFullGametime"))
                    object.timePiggyFullGametime = options.json && !isFinite(message.timePiggyFullGametime) ? String(message.timePiggyFullGametime) : message.timePiggyFullGametime;
                if (message.lostPiggyIncrements != null && message.hasOwnProperty("lostPiggyIncrements"))
                    if (typeof message.lostPiggyIncrements === "number")
                        object.lostPiggyIncrements = options.longs === String ? String(message.lostPiggyIncrements) : message.lostPiggyIncrements;
                    else
                        object.lostPiggyIncrements = options.longs === String ? $util.Long.prototype.toString.call(message.lostPiggyIncrements) : options.longs === Number ? new $util.LongBits(message.lostPiggyIncrements.low >>> 0, message.lostPiggyIncrements.high >>> 0).toNumber(true) : message.lostPiggyIncrements;
                return object;
            };

            /**
             * Converts this Stats to JSON.
             * @function toJSON
             * @memberof ei.Backup.Stats
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Stats.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Stats;
        })();

        Backup.Game = (function() {

            /**
             * Properties of a Game.
             * @memberof ei.Backup
             * @interface IGame
             * @property {number|null} [currentFarm] Game currentFarm
             * @property {ei.Egg|null} [maxEggReached] Game maxEggReached
             * @property {number|Long|null} [goldenEggsEarned] Game goldenEggsEarned
             * @property {number|Long|null} [goldenEggsSpent] Game goldenEggsSpent
             * @property {number|Long|null} [uncliamedGoldenEggs] Game uncliamedGoldenEggs
             * @property {number|Long|null} [soulEggs] Game soulEggs
             * @property {number|Long|null} [unclaimedSoulEggs] Game unclaimedSoulEggs
             * @property {number|null} [soulEggsD] Game soulEggsD
             * @property {number|null} [unclaimedSoulEggsD] Game unclaimedSoulEggsD
             * @property {number|Long|null} [eggsOfProphecy] Game eggsOfProphecy
             * @property {number|Long|null} [unclaimedEggsOfProphecy] Game unclaimedEggsOfProphecy
             * @property {number|null} [prestigeCashEarned] Game prestigeCashEarned
             * @property {number|null} [prestigeSoulBoostCash] Game prestigeSoulBoostCash
             * @property {number|null} [lifetimeCashEarned] Game lifetimeCashEarned
             * @property {number|Long|null} [piggyBank] Game piggyBank
             * @property {boolean|null} [piggyFullAlertShown] Game piggyFullAlertShown
             * @property {number|null} [permitLevel] Game permitLevel
             * @property {Array.<ei.Backup.IResearchItem>|null} [epicResearch] Game epicResearch
             * @property {boolean|null} [hyperloopStation] Game hyperloopStation
             * @property {number|null} [nextDailyGiftTime] Game nextDailyGiftTime
             * @property {number|null} [lastDailyGiftCollectedDay] Game lastDailyGiftCollectedDay
             * @property {number|null} [numDailyGiftsCollected] Game numDailyGiftsCollected
             * @property {Array.<ei.Backup.INewsHeadline>|null} [news] Game news
             * @property {number|null} [lastNewsTime] Game lastNewsTime
             * @property {number|null} [currentMultiplier] Game currentMultiplier
             * @property {number|null} [currentMultiplierExpiration] Game currentMultiplierExpiration
             * @property {Array.<ei.Backup.IAchievementInfo>|null} [achievements] Game achievements
             * @property {Array.<number|Long>|null} [maxFarmSizeReached] Game maxFarmSizeReached
             * @property {Array.<number>|null} [eggMedalLevel] Game eggMedalLevel
             * @property {boolean|null} [longIdleNotificationSet] Game longIdleNotificationSet
             * @property {number|null} [longIdleNotificationThreshold] Game longIdleNotificationThreshold
             * @property {number|null} [longIdleReward] Game longIdleReward
             * @property {Array.<ei.Backup.IOwnedBoost>|null} [boosts] Game boosts
             * @property {number|null} [totalTimeCheatsDetected] Game totalTimeCheatsDetected
             * @property {boolean|null} [forceEliteContracts] Game forceEliteContracts
             * @property {number|null} [newPlayerEventEndTime] Game newPlayerEventEndTime
             */

            /**
             * Constructs a new Game.
             * @memberof ei.Backup
             * @classdesc Represents a Game.
             * @implements IGame
             * @constructor
             * @param {ei.Backup.IGame=} [properties] Properties to set
             */
            function Game(properties) {
                this.epicResearch = [];
                this.news = [];
                this.achievements = [];
                this.maxFarmSizeReached = [];
                this.eggMedalLevel = [];
                this.boosts = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Game currentFarm.
             * @member {number} currentFarm
             * @memberof ei.Backup.Game
             * @instance
             */
            Game.prototype.currentFarm = 0;

            /**
             * Game maxEggReached.
             * @member {ei.Egg} maxEggReached
             * @memberof ei.Backup.Game
             * @instance
             */
            Game.prototype.maxEggReached = 1;

            /**
             * Game goldenEggsEarned.
             * @member {number|Long} goldenEggsEarned
             * @memberof ei.Backup.Game
             * @instance
             */
            Game.prototype.goldenEggsEarned = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * Game goldenEggsSpent.
             * @member {number|Long} goldenEggsSpent
             * @memberof ei.Backup.Game
             * @instance
             */
            Game.prototype.goldenEggsSpent = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * Game uncliamedGoldenEggs.
             * @member {number|Long} uncliamedGoldenEggs
             * @memberof ei.Backup.Game
             * @instance
             */
            Game.prototype.uncliamedGoldenEggs = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * Game soulEggs.
             * @member {number|Long} soulEggs
             * @memberof ei.Backup.Game
             * @instance
             */
            Game.prototype.soulEggs = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * Game unclaimedSoulEggs.
             * @member {number|Long} unclaimedSoulEggs
             * @memberof ei.Backup.Game
             * @instance
             */
            Game.prototype.unclaimedSoulEggs = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * Game soulEggsD.
             * @member {number} soulEggsD
             * @memberof ei.Backup.Game
             * @instance
             */
            Game.prototype.soulEggsD = 0;

            /**
             * Game unclaimedSoulEggsD.
             * @member {number} unclaimedSoulEggsD
             * @memberof ei.Backup.Game
             * @instance
             */
            Game.prototype.unclaimedSoulEggsD = 0;

            /**
             * Game eggsOfProphecy.
             * @member {number|Long} eggsOfProphecy
             * @memberof ei.Backup.Game
             * @instance
             */
            Game.prototype.eggsOfProphecy = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * Game unclaimedEggsOfProphecy.
             * @member {number|Long} unclaimedEggsOfProphecy
             * @memberof ei.Backup.Game
             * @instance
             */
            Game.prototype.unclaimedEggsOfProphecy = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * Game prestigeCashEarned.
             * @member {number} prestigeCashEarned
             * @memberof ei.Backup.Game
             * @instance
             */
            Game.prototype.prestigeCashEarned = 0;

            /**
             * Game prestigeSoulBoostCash.
             * @member {number} prestigeSoulBoostCash
             * @memberof ei.Backup.Game
             * @instance
             */
            Game.prototype.prestigeSoulBoostCash = 0;

            /**
             * Game lifetimeCashEarned.
             * @member {number} lifetimeCashEarned
             * @memberof ei.Backup.Game
             * @instance
             */
            Game.prototype.lifetimeCashEarned = 0;

            /**
             * Game piggyBank.
             * @member {number|Long} piggyBank
             * @memberof ei.Backup.Game
             * @instance
             */
            Game.prototype.piggyBank = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * Game piggyFullAlertShown.
             * @member {boolean} piggyFullAlertShown
             * @memberof ei.Backup.Game
             * @instance
             */
            Game.prototype.piggyFullAlertShown = false;

            /**
             * Game permitLevel.
             * @member {number} permitLevel
             * @memberof ei.Backup.Game
             * @instance
             */
            Game.prototype.permitLevel = 0;

            /**
             * Game epicResearch.
             * @member {Array.<ei.Backup.IResearchItem>} epicResearch
             * @memberof ei.Backup.Game
             * @instance
             */
            Game.prototype.epicResearch = $util.emptyArray;

            /**
             * Game hyperloopStation.
             * @member {boolean} hyperloopStation
             * @memberof ei.Backup.Game
             * @instance
             */
            Game.prototype.hyperloopStation = false;

            /**
             * Game nextDailyGiftTime.
             * @member {number} nextDailyGiftTime
             * @memberof ei.Backup.Game
             * @instance
             */
            Game.prototype.nextDailyGiftTime = 0;

            /**
             * Game lastDailyGiftCollectedDay.
             * @member {number} lastDailyGiftCollectedDay
             * @memberof ei.Backup.Game
             * @instance
             */
            Game.prototype.lastDailyGiftCollectedDay = 0;

            /**
             * Game numDailyGiftsCollected.
             * @member {number} numDailyGiftsCollected
             * @memberof ei.Backup.Game
             * @instance
             */
            Game.prototype.numDailyGiftsCollected = 0;

            /**
             * Game news.
             * @member {Array.<ei.Backup.INewsHeadline>} news
             * @memberof ei.Backup.Game
             * @instance
             */
            Game.prototype.news = $util.emptyArray;

            /**
             * Game lastNewsTime.
             * @member {number} lastNewsTime
             * @memberof ei.Backup.Game
             * @instance
             */
            Game.prototype.lastNewsTime = 0;

            /**
             * Game currentMultiplier.
             * @member {number} currentMultiplier
             * @memberof ei.Backup.Game
             * @instance
             */
            Game.prototype.currentMultiplier = 0;

            /**
             * Game currentMultiplierExpiration.
             * @member {number} currentMultiplierExpiration
             * @memberof ei.Backup.Game
             * @instance
             */
            Game.prototype.currentMultiplierExpiration = 0;

            /**
             * Game achievements.
             * @member {Array.<ei.Backup.IAchievementInfo>} achievements
             * @memberof ei.Backup.Game
             * @instance
             */
            Game.prototype.achievements = $util.emptyArray;

            /**
             * Game maxFarmSizeReached.
             * @member {Array.<number|Long>} maxFarmSizeReached
             * @memberof ei.Backup.Game
             * @instance
             */
            Game.prototype.maxFarmSizeReached = $util.emptyArray;

            /**
             * Game eggMedalLevel.
             * @member {Array.<number>} eggMedalLevel
             * @memberof ei.Backup.Game
             * @instance
             */
            Game.prototype.eggMedalLevel = $util.emptyArray;

            /**
             * Game longIdleNotificationSet.
             * @member {boolean} longIdleNotificationSet
             * @memberof ei.Backup.Game
             * @instance
             */
            Game.prototype.longIdleNotificationSet = false;

            /**
             * Game longIdleNotificationThreshold.
             * @member {number} longIdleNotificationThreshold
             * @memberof ei.Backup.Game
             * @instance
             */
            Game.prototype.longIdleNotificationThreshold = 0;

            /**
             * Game longIdleReward.
             * @member {number} longIdleReward
             * @memberof ei.Backup.Game
             * @instance
             */
            Game.prototype.longIdleReward = 0;

            /**
             * Game boosts.
             * @member {Array.<ei.Backup.IOwnedBoost>} boosts
             * @memberof ei.Backup.Game
             * @instance
             */
            Game.prototype.boosts = $util.emptyArray;

            /**
             * Game totalTimeCheatsDetected.
             * @member {number} totalTimeCheatsDetected
             * @memberof ei.Backup.Game
             * @instance
             */
            Game.prototype.totalTimeCheatsDetected = 0;

            /**
             * Game forceEliteContracts.
             * @member {boolean} forceEliteContracts
             * @memberof ei.Backup.Game
             * @instance
             */
            Game.prototype.forceEliteContracts = false;

            /**
             * Game newPlayerEventEndTime.
             * @member {number} newPlayerEventEndTime
             * @memberof ei.Backup.Game
             * @instance
             */
            Game.prototype.newPlayerEventEndTime = 0;

            /**
             * Creates a new Game instance using the specified properties.
             * @function create
             * @memberof ei.Backup.Game
             * @static
             * @param {ei.Backup.IGame=} [properties] Properties to set
             * @returns {ei.Backup.Game} Game instance
             */
            Game.create = function create(properties) {
                return new Game(properties);
            };

            /**
             * Encodes the specified Game message. Does not implicitly {@link ei.Backup.Game.verify|verify} messages.
             * @function encode
             * @memberof ei.Backup.Game
             * @static
             * @param {ei.Backup.IGame} message Game message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Game.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.maxEggReached != null && Object.hasOwnProperty.call(message, "maxEggReached"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.maxEggReached);
                if (message.goldenEggsEarned != null && Object.hasOwnProperty.call(message, "goldenEggsEarned"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.goldenEggsEarned);
                if (message.goldenEggsSpent != null && Object.hasOwnProperty.call(message, "goldenEggsSpent"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.goldenEggsSpent);
                if (message.soulEggs != null && Object.hasOwnProperty.call(message, "soulEggs"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.soulEggs);
                if (message.prestigeCashEarned != null && Object.hasOwnProperty.call(message, "prestigeCashEarned"))
                    writer.uint32(/* id 5, wireType 1 =*/41).double(message.prestigeCashEarned);
                if (message.lifetimeCashEarned != null && Object.hasOwnProperty.call(message, "lifetimeCashEarned"))
                    writer.uint32(/* id 6, wireType 1 =*/49).double(message.lifetimeCashEarned);
                if (message.piggyBank != null && Object.hasOwnProperty.call(message, "piggyBank"))
                    writer.uint32(/* id 7, wireType 0 =*/56).uint64(message.piggyBank);
                if (message.permitLevel != null && Object.hasOwnProperty.call(message, "permitLevel"))
                    writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.permitLevel);
                if (message.epicResearch != null && message.epicResearch.length)
                    for (let i = 0; i < message.epicResearch.length; ++i)
                        $root.ei.Backup.ResearchItem.encode(message.epicResearch[i], writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                if (message.nextDailyGiftTime != null && Object.hasOwnProperty.call(message, "nextDailyGiftTime"))
                    writer.uint32(/* id 10, wireType 1 =*/81).double(message.nextDailyGiftTime);
                if (message.news != null && message.news.length)
                    for (let i = 0; i < message.news.length; ++i)
                        $root.ei.Backup.NewsHeadline.encode(message.news[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
                if (message.lastNewsTime != null && Object.hasOwnProperty.call(message, "lastNewsTime"))
                    writer.uint32(/* id 12, wireType 1 =*/97).double(message.lastNewsTime);
                if (message.currentMultiplier != null && Object.hasOwnProperty.call(message, "currentMultiplier"))
                    writer.uint32(/* id 13, wireType 1 =*/105).double(message.currentMultiplier);
                if (message.currentMultiplierExpiration != null && Object.hasOwnProperty.call(message, "currentMultiplierExpiration"))
                    writer.uint32(/* id 14, wireType 1 =*/113).double(message.currentMultiplierExpiration);
                if (message.achievements != null && message.achievements.length)
                    for (let i = 0; i < message.achievements.length; ++i)
                        $root.ei.Backup.AchievementInfo.encode(message.achievements[i], writer.uint32(/* id 15, wireType 2 =*/122).fork()).ldelim();
                if (message.uncliamedGoldenEggs != null && Object.hasOwnProperty.call(message, "uncliamedGoldenEggs"))
                    writer.uint32(/* id 16, wireType 0 =*/128).uint64(message.uncliamedGoldenEggs);
                if (message.unclaimedSoulEggs != null && Object.hasOwnProperty.call(message, "unclaimedSoulEggs"))
                    writer.uint32(/* id 17, wireType 0 =*/136).uint64(message.unclaimedSoulEggs);
                if (message.maxFarmSizeReached != null && message.maxFarmSizeReached.length)
                    for (let i = 0; i < message.maxFarmSizeReached.length; ++i)
                        writer.uint32(/* id 18, wireType 0 =*/144).uint64(message.maxFarmSizeReached[i]);
                if (message.eggMedalLevel != null && message.eggMedalLevel.length)
                    for (let i = 0; i < message.eggMedalLevel.length; ++i)
                        writer.uint32(/* id 19, wireType 0 =*/152).uint32(message.eggMedalLevel[i]);
                if (message.lastDailyGiftCollectedDay != null && Object.hasOwnProperty.call(message, "lastDailyGiftCollectedDay"))
                    writer.uint32(/* id 20, wireType 0 =*/160).uint32(message.lastDailyGiftCollectedDay);
                if (message.currentFarm != null && Object.hasOwnProperty.call(message, "currentFarm"))
                    writer.uint32(/* id 22, wireType 0 =*/176).uint32(message.currentFarm);
                if (message.eggsOfProphecy != null && Object.hasOwnProperty.call(message, "eggsOfProphecy"))
                    writer.uint32(/* id 23, wireType 0 =*/184).uint64(message.eggsOfProphecy);
                if (message.unclaimedEggsOfProphecy != null && Object.hasOwnProperty.call(message, "unclaimedEggsOfProphecy"))
                    writer.uint32(/* id 24, wireType 0 =*/192).uint64(message.unclaimedEggsOfProphecy);
                if (message.longIdleNotificationSet != null && Object.hasOwnProperty.call(message, "longIdleNotificationSet"))
                    writer.uint32(/* id 25, wireType 0 =*/200).bool(message.longIdleNotificationSet);
                if (message.longIdleNotificationThreshold != null && Object.hasOwnProperty.call(message, "longIdleNotificationThreshold"))
                    writer.uint32(/* id 26, wireType 1 =*/209).double(message.longIdleNotificationThreshold);
                if (message.longIdleReward != null && Object.hasOwnProperty.call(message, "longIdleReward"))
                    writer.uint32(/* id 27, wireType 1 =*/217).double(message.longIdleReward);
                if (message.numDailyGiftsCollected != null && Object.hasOwnProperty.call(message, "numDailyGiftsCollected"))
                    writer.uint32(/* id 28, wireType 0 =*/224).uint32(message.numDailyGiftsCollected);
                if (message.hyperloopStation != null && Object.hasOwnProperty.call(message, "hyperloopStation"))
                    writer.uint32(/* id 29, wireType 0 =*/232).bool(message.hyperloopStation);
                if (message.boosts != null && message.boosts.length)
                    for (let i = 0; i < message.boosts.length; ++i)
                        $root.ei.Backup.OwnedBoost.encode(message.boosts[i], writer.uint32(/* id 30, wireType 2 =*/242).fork()).ldelim();
                if (message.piggyFullAlertShown != null && Object.hasOwnProperty.call(message, "piggyFullAlertShown"))
                    writer.uint32(/* id 31, wireType 0 =*/248).bool(message.piggyFullAlertShown);
                if (message.totalTimeCheatsDetected != null && Object.hasOwnProperty.call(message, "totalTimeCheatsDetected"))
                    writer.uint32(/* id 32, wireType 0 =*/256).uint32(message.totalTimeCheatsDetected);
                if (message.prestigeSoulBoostCash != null && Object.hasOwnProperty.call(message, "prestigeSoulBoostCash"))
                    writer.uint32(/* id 33, wireType 1 =*/265).double(message.prestigeSoulBoostCash);
                if (message.soulEggsD != null && Object.hasOwnProperty.call(message, "soulEggsD"))
                    writer.uint32(/* id 34, wireType 1 =*/273).double(message.soulEggsD);
                if (message.unclaimedSoulEggsD != null && Object.hasOwnProperty.call(message, "unclaimedSoulEggsD"))
                    writer.uint32(/* id 35, wireType 1 =*/281).double(message.unclaimedSoulEggsD);
                if (message.forceEliteContracts != null && Object.hasOwnProperty.call(message, "forceEliteContracts"))
                    writer.uint32(/* id 36, wireType 0 =*/288).bool(message.forceEliteContracts);
                if (message.newPlayerEventEndTime != null && Object.hasOwnProperty.call(message, "newPlayerEventEndTime"))
                    writer.uint32(/* id 37, wireType 1 =*/297).double(message.newPlayerEventEndTime);
                return writer;
            };

            /**
             * Encodes the specified Game message, length delimited. Does not implicitly {@link ei.Backup.Game.verify|verify} messages.
             * @function encodeDelimited
             * @memberof ei.Backup.Game
             * @static
             * @param {ei.Backup.IGame} message Game message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Game.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Game message from the specified reader or buffer.
             * @function decode
             * @memberof ei.Backup.Game
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {ei.Backup.Game} Game
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Game.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ei.Backup.Game();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 22:
                        message.currentFarm = reader.uint32();
                        break;
                    case 1:
                        message.maxEggReached = reader.int32();
                        break;
                    case 2:
                        message.goldenEggsEarned = reader.uint64();
                        break;
                    case 3:
                        message.goldenEggsSpent = reader.uint64();
                        break;
                    case 16:
                        message.uncliamedGoldenEggs = reader.uint64();
                        break;
                    case 4:
                        message.soulEggs = reader.uint64();
                        break;
                    case 17:
                        message.unclaimedSoulEggs = reader.uint64();
                        break;
                    case 34:
                        message.soulEggsD = reader.double();
                        break;
                    case 35:
                        message.unclaimedSoulEggsD = reader.double();
                        break;
                    case 23:
                        message.eggsOfProphecy = reader.uint64();
                        break;
                    case 24:
                        message.unclaimedEggsOfProphecy = reader.uint64();
                        break;
                    case 5:
                        message.prestigeCashEarned = reader.double();
                        break;
                    case 33:
                        message.prestigeSoulBoostCash = reader.double();
                        break;
                    case 6:
                        message.lifetimeCashEarned = reader.double();
                        break;
                    case 7:
                        message.piggyBank = reader.uint64();
                        break;
                    case 31:
                        message.piggyFullAlertShown = reader.bool();
                        break;
                    case 8:
                        message.permitLevel = reader.uint32();
                        break;
                    case 9:
                        if (!(message.epicResearch && message.epicResearch.length))
                            message.epicResearch = [];
                        message.epicResearch.push($root.ei.Backup.ResearchItem.decode(reader, reader.uint32()));
                        break;
                    case 29:
                        message.hyperloopStation = reader.bool();
                        break;
                    case 10:
                        message.nextDailyGiftTime = reader.double();
                        break;
                    case 20:
                        message.lastDailyGiftCollectedDay = reader.uint32();
                        break;
                    case 28:
                        message.numDailyGiftsCollected = reader.uint32();
                        break;
                    case 11:
                        if (!(message.news && message.news.length))
                            message.news = [];
                        message.news.push($root.ei.Backup.NewsHeadline.decode(reader, reader.uint32()));
                        break;
                    case 12:
                        message.lastNewsTime = reader.double();
                        break;
                    case 13:
                        message.currentMultiplier = reader.double();
                        break;
                    case 14:
                        message.currentMultiplierExpiration = reader.double();
                        break;
                    case 15:
                        if (!(message.achievements && message.achievements.length))
                            message.achievements = [];
                        message.achievements.push($root.ei.Backup.AchievementInfo.decode(reader, reader.uint32()));
                        break;
                    case 18:
                        if (!(message.maxFarmSizeReached && message.maxFarmSizeReached.length))
                            message.maxFarmSizeReached = [];
                        if ((tag & 7) === 2) {
                            let end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.maxFarmSizeReached.push(reader.uint64());
                        } else
                            message.maxFarmSizeReached.push(reader.uint64());
                        break;
                    case 19:
                        if (!(message.eggMedalLevel && message.eggMedalLevel.length))
                            message.eggMedalLevel = [];
                        if ((tag & 7) === 2) {
                            let end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.eggMedalLevel.push(reader.uint32());
                        } else
                            message.eggMedalLevel.push(reader.uint32());
                        break;
                    case 25:
                        message.longIdleNotificationSet = reader.bool();
                        break;
                    case 26:
                        message.longIdleNotificationThreshold = reader.double();
                        break;
                    case 27:
                        message.longIdleReward = reader.double();
                        break;
                    case 30:
                        if (!(message.boosts && message.boosts.length))
                            message.boosts = [];
                        message.boosts.push($root.ei.Backup.OwnedBoost.decode(reader, reader.uint32()));
                        break;
                    case 32:
                        message.totalTimeCheatsDetected = reader.uint32();
                        break;
                    case 36:
                        message.forceEliteContracts = reader.bool();
                        break;
                    case 37:
                        message.newPlayerEventEndTime = reader.double();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Game message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof ei.Backup.Game
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {ei.Backup.Game} Game
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Game.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Game message.
             * @function verify
             * @memberof ei.Backup.Game
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Game.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.currentFarm != null && message.hasOwnProperty("currentFarm"))
                    if (!$util.isInteger(message.currentFarm))
                        return "currentFarm: integer expected";
                if (message.maxEggReached != null && message.hasOwnProperty("maxEggReached"))
                    switch (message.maxEggReached) {
                    default:
                        return "maxEggReached: enum value expected";
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                    case 8:
                    case 9:
                    case 10:
                    case 11:
                    case 12:
                    case 13:
                    case 14:
                    case 15:
                    case 16:
                    case 17:
                    case 18:
                    case 19:
                    case 100:
                    case 101:
                    case 102:
                    case 103:
                    case 104:
                    case 1000:
                        break;
                    }
                if (message.goldenEggsEarned != null && message.hasOwnProperty("goldenEggsEarned"))
                    if (!$util.isInteger(message.goldenEggsEarned) && !(message.goldenEggsEarned && $util.isInteger(message.goldenEggsEarned.low) && $util.isInteger(message.goldenEggsEarned.high)))
                        return "goldenEggsEarned: integer|Long expected";
                if (message.goldenEggsSpent != null && message.hasOwnProperty("goldenEggsSpent"))
                    if (!$util.isInteger(message.goldenEggsSpent) && !(message.goldenEggsSpent && $util.isInteger(message.goldenEggsSpent.low) && $util.isInteger(message.goldenEggsSpent.high)))
                        return "goldenEggsSpent: integer|Long expected";
                if (message.uncliamedGoldenEggs != null && message.hasOwnProperty("uncliamedGoldenEggs"))
                    if (!$util.isInteger(message.uncliamedGoldenEggs) && !(message.uncliamedGoldenEggs && $util.isInteger(message.uncliamedGoldenEggs.low) && $util.isInteger(message.uncliamedGoldenEggs.high)))
                        return "uncliamedGoldenEggs: integer|Long expected";
                if (message.soulEggs != null && message.hasOwnProperty("soulEggs"))
                    if (!$util.isInteger(message.soulEggs) && !(message.soulEggs && $util.isInteger(message.soulEggs.low) && $util.isInteger(message.soulEggs.high)))
                        return "soulEggs: integer|Long expected";
                if (message.unclaimedSoulEggs != null && message.hasOwnProperty("unclaimedSoulEggs"))
                    if (!$util.isInteger(message.unclaimedSoulEggs) && !(message.unclaimedSoulEggs && $util.isInteger(message.unclaimedSoulEggs.low) && $util.isInteger(message.unclaimedSoulEggs.high)))
                        return "unclaimedSoulEggs: integer|Long expected";
                if (message.soulEggsD != null && message.hasOwnProperty("soulEggsD"))
                    if (typeof message.soulEggsD !== "number")
                        return "soulEggsD: number expected";
                if (message.unclaimedSoulEggsD != null && message.hasOwnProperty("unclaimedSoulEggsD"))
                    if (typeof message.unclaimedSoulEggsD !== "number")
                        return "unclaimedSoulEggsD: number expected";
                if (message.eggsOfProphecy != null && message.hasOwnProperty("eggsOfProphecy"))
                    if (!$util.isInteger(message.eggsOfProphecy) && !(message.eggsOfProphecy && $util.isInteger(message.eggsOfProphecy.low) && $util.isInteger(message.eggsOfProphecy.high)))
                        return "eggsOfProphecy: integer|Long expected";
                if (message.unclaimedEggsOfProphecy != null && message.hasOwnProperty("unclaimedEggsOfProphecy"))
                    if (!$util.isInteger(message.unclaimedEggsOfProphecy) && !(message.unclaimedEggsOfProphecy && $util.isInteger(message.unclaimedEggsOfProphecy.low) && $util.isInteger(message.unclaimedEggsOfProphecy.high)))
                        return "unclaimedEggsOfProphecy: integer|Long expected";
                if (message.prestigeCashEarned != null && message.hasOwnProperty("prestigeCashEarned"))
                    if (typeof message.prestigeCashEarned !== "number")
                        return "prestigeCashEarned: number expected";
                if (message.prestigeSoulBoostCash != null && message.hasOwnProperty("prestigeSoulBoostCash"))
                    if (typeof message.prestigeSoulBoostCash !== "number")
                        return "prestigeSoulBoostCash: number expected";
                if (message.lifetimeCashEarned != null && message.hasOwnProperty("lifetimeCashEarned"))
                    if (typeof message.lifetimeCashEarned !== "number")
                        return "lifetimeCashEarned: number expected";
                if (message.piggyBank != null && message.hasOwnProperty("piggyBank"))
                    if (!$util.isInteger(message.piggyBank) && !(message.piggyBank && $util.isInteger(message.piggyBank.low) && $util.isInteger(message.piggyBank.high)))
                        return "piggyBank: integer|Long expected";
                if (message.piggyFullAlertShown != null && message.hasOwnProperty("piggyFullAlertShown"))
                    if (typeof message.piggyFullAlertShown !== "boolean")
                        return "piggyFullAlertShown: boolean expected";
                if (message.permitLevel != null && message.hasOwnProperty("permitLevel"))
                    if (!$util.isInteger(message.permitLevel))
                        return "permitLevel: integer expected";
                if (message.epicResearch != null && message.hasOwnProperty("epicResearch")) {
                    if (!Array.isArray(message.epicResearch))
                        return "epicResearch: array expected";
                    for (let i = 0; i < message.epicResearch.length; ++i) {
                        let error = $root.ei.Backup.ResearchItem.verify(message.epicResearch[i]);
                        if (error)
                            return "epicResearch." + error;
                    }
                }
                if (message.hyperloopStation != null && message.hasOwnProperty("hyperloopStation"))
                    if (typeof message.hyperloopStation !== "boolean")
                        return "hyperloopStation: boolean expected";
                if (message.nextDailyGiftTime != null && message.hasOwnProperty("nextDailyGiftTime"))
                    if (typeof message.nextDailyGiftTime !== "number")
                        return "nextDailyGiftTime: number expected";
                if (message.lastDailyGiftCollectedDay != null && message.hasOwnProperty("lastDailyGiftCollectedDay"))
                    if (!$util.isInteger(message.lastDailyGiftCollectedDay))
                        return "lastDailyGiftCollectedDay: integer expected";
                if (message.numDailyGiftsCollected != null && message.hasOwnProperty("numDailyGiftsCollected"))
                    if (!$util.isInteger(message.numDailyGiftsCollected))
                        return "numDailyGiftsCollected: integer expected";
                if (message.news != null && message.hasOwnProperty("news")) {
                    if (!Array.isArray(message.news))
                        return "news: array expected";
                    for (let i = 0; i < message.news.length; ++i) {
                        let error = $root.ei.Backup.NewsHeadline.verify(message.news[i]);
                        if (error)
                            return "news." + error;
                    }
                }
                if (message.lastNewsTime != null && message.hasOwnProperty("lastNewsTime"))
                    if (typeof message.lastNewsTime !== "number")
                        return "lastNewsTime: number expected";
                if (message.currentMultiplier != null && message.hasOwnProperty("currentMultiplier"))
                    if (typeof message.currentMultiplier !== "number")
                        return "currentMultiplier: number expected";
                if (message.currentMultiplierExpiration != null && message.hasOwnProperty("currentMultiplierExpiration"))
                    if (typeof message.currentMultiplierExpiration !== "number")
                        return "currentMultiplierExpiration: number expected";
                if (message.achievements != null && message.hasOwnProperty("achievements")) {
                    if (!Array.isArray(message.achievements))
                        return "achievements: array expected";
                    for (let i = 0; i < message.achievements.length; ++i) {
                        let error = $root.ei.Backup.AchievementInfo.verify(message.achievements[i]);
                        if (error)
                            return "achievements." + error;
                    }
                }
                if (message.maxFarmSizeReached != null && message.hasOwnProperty("maxFarmSizeReached")) {
                    if (!Array.isArray(message.maxFarmSizeReached))
                        return "maxFarmSizeReached: array expected";
                    for (let i = 0; i < message.maxFarmSizeReached.length; ++i)
                        if (!$util.isInteger(message.maxFarmSizeReached[i]) && !(message.maxFarmSizeReached[i] && $util.isInteger(message.maxFarmSizeReached[i].low) && $util.isInteger(message.maxFarmSizeReached[i].high)))
                            return "maxFarmSizeReached: integer|Long[] expected";
                }
                if (message.eggMedalLevel != null && message.hasOwnProperty("eggMedalLevel")) {
                    if (!Array.isArray(message.eggMedalLevel))
                        return "eggMedalLevel: array expected";
                    for (let i = 0; i < message.eggMedalLevel.length; ++i)
                        if (!$util.isInteger(message.eggMedalLevel[i]))
                            return "eggMedalLevel: integer[] expected";
                }
                if (message.longIdleNotificationSet != null && message.hasOwnProperty("longIdleNotificationSet"))
                    if (typeof message.longIdleNotificationSet !== "boolean")
                        return "longIdleNotificationSet: boolean expected";
                if (message.longIdleNotificationThreshold != null && message.hasOwnProperty("longIdleNotificationThreshold"))
                    if (typeof message.longIdleNotificationThreshold !== "number")
                        return "longIdleNotificationThreshold: number expected";
                if (message.longIdleReward != null && message.hasOwnProperty("longIdleReward"))
                    if (typeof message.longIdleReward !== "number")
                        return "longIdleReward: number expected";
                if (message.boosts != null && message.hasOwnProperty("boosts")) {
                    if (!Array.isArray(message.boosts))
                        return "boosts: array expected";
                    for (let i = 0; i < message.boosts.length; ++i) {
                        let error = $root.ei.Backup.OwnedBoost.verify(message.boosts[i]);
                        if (error)
                            return "boosts." + error;
                    }
                }
                if (message.totalTimeCheatsDetected != null && message.hasOwnProperty("totalTimeCheatsDetected"))
                    if (!$util.isInteger(message.totalTimeCheatsDetected))
                        return "totalTimeCheatsDetected: integer expected";
                if (message.forceEliteContracts != null && message.hasOwnProperty("forceEliteContracts"))
                    if (typeof message.forceEliteContracts !== "boolean")
                        return "forceEliteContracts: boolean expected";
                if (message.newPlayerEventEndTime != null && message.hasOwnProperty("newPlayerEventEndTime"))
                    if (typeof message.newPlayerEventEndTime !== "number")
                        return "newPlayerEventEndTime: number expected";
                return null;
            };

            /**
             * Creates a Game message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof ei.Backup.Game
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {ei.Backup.Game} Game
             */
            Game.fromObject = function fromObject(object) {
                if (object instanceof $root.ei.Backup.Game)
                    return object;
                let message = new $root.ei.Backup.Game();
                if (object.currentFarm != null)
                    message.currentFarm = object.currentFarm >>> 0;
                switch (object.maxEggReached) {
                case "EDIBLE":
                case 1:
                    message.maxEggReached = 1;
                    break;
                case "SUPERFOOD":
                case 2:
                    message.maxEggReached = 2;
                    break;
                case "MEDICAL":
                case 3:
                    message.maxEggReached = 3;
                    break;
                case "ROCKET_FUEL":
                case 4:
                    message.maxEggReached = 4;
                    break;
                case "SUPER_MATERIAL":
                case 5:
                    message.maxEggReached = 5;
                    break;
                case "FUSION":
                case 6:
                    message.maxEggReached = 6;
                    break;
                case "QUANTUM":
                case 7:
                    message.maxEggReached = 7;
                    break;
                case "IMMORTALITY":
                case 8:
                    message.maxEggReached = 8;
                    break;
                case "TACHYON":
                case 9:
                    message.maxEggReached = 9;
                    break;
                case "GRAVITON":
                case 10:
                    message.maxEggReached = 10;
                    break;
                case "DILITHIUM":
                case 11:
                    message.maxEggReached = 11;
                    break;
                case "PRODIGY":
                case 12:
                    message.maxEggReached = 12;
                    break;
                case "TERRAFORM":
                case 13:
                    message.maxEggReached = 13;
                    break;
                case "ANTIMATTER":
                case 14:
                    message.maxEggReached = 14;
                    break;
                case "DARK_MATTER":
                case 15:
                    message.maxEggReached = 15;
                    break;
                case "AI":
                case 16:
                    message.maxEggReached = 16;
                    break;
                case "NEBULA":
                case 17:
                    message.maxEggReached = 17;
                    break;
                case "UNIVERSE":
                case 18:
                    message.maxEggReached = 18;
                    break;
                case "ENLIGHTENMENT":
                case 19:
                    message.maxEggReached = 19;
                    break;
                case "CHOCOLATE":
                case 100:
                    message.maxEggReached = 100;
                    break;
                case "EASTER":
                case 101:
                    message.maxEggReached = 101;
                    break;
                case "WATERBALLOON":
                case 102:
                    message.maxEggReached = 102;
                    break;
                case "FIREWORK":
                case 103:
                    message.maxEggReached = 103;
                    break;
                case "PUMPKIN":
                case 104:
                    message.maxEggReached = 104;
                    break;
                case "UNKNOWN":
                case 1000:
                    message.maxEggReached = 1000;
                    break;
                }
                if (object.goldenEggsEarned != null)
                    if ($util.Long)
                        (message.goldenEggsEarned = $util.Long.fromValue(object.goldenEggsEarned)).unsigned = true;
                    else if (typeof object.goldenEggsEarned === "string")
                        message.goldenEggsEarned = parseInt(object.goldenEggsEarned, 10);
                    else if (typeof object.goldenEggsEarned === "number")
                        message.goldenEggsEarned = object.goldenEggsEarned;
                    else if (typeof object.goldenEggsEarned === "object")
                        message.goldenEggsEarned = new $util.LongBits(object.goldenEggsEarned.low >>> 0, object.goldenEggsEarned.high >>> 0).toNumber(true);
                if (object.goldenEggsSpent != null)
                    if ($util.Long)
                        (message.goldenEggsSpent = $util.Long.fromValue(object.goldenEggsSpent)).unsigned = true;
                    else if (typeof object.goldenEggsSpent === "string")
                        message.goldenEggsSpent = parseInt(object.goldenEggsSpent, 10);
                    else if (typeof object.goldenEggsSpent === "number")
                        message.goldenEggsSpent = object.goldenEggsSpent;
                    else if (typeof object.goldenEggsSpent === "object")
                        message.goldenEggsSpent = new $util.LongBits(object.goldenEggsSpent.low >>> 0, object.goldenEggsSpent.high >>> 0).toNumber(true);
                if (object.uncliamedGoldenEggs != null)
                    if ($util.Long)
                        (message.uncliamedGoldenEggs = $util.Long.fromValue(object.uncliamedGoldenEggs)).unsigned = true;
                    else if (typeof object.uncliamedGoldenEggs === "string")
                        message.uncliamedGoldenEggs = parseInt(object.uncliamedGoldenEggs, 10);
                    else if (typeof object.uncliamedGoldenEggs === "number")
                        message.uncliamedGoldenEggs = object.uncliamedGoldenEggs;
                    else if (typeof object.uncliamedGoldenEggs === "object")
                        message.uncliamedGoldenEggs = new $util.LongBits(object.uncliamedGoldenEggs.low >>> 0, object.uncliamedGoldenEggs.high >>> 0).toNumber(true);
                if (object.soulEggs != null)
                    if ($util.Long)
                        (message.soulEggs = $util.Long.fromValue(object.soulEggs)).unsigned = true;
                    else if (typeof object.soulEggs === "string")
                        message.soulEggs = parseInt(object.soulEggs, 10);
                    else if (typeof object.soulEggs === "number")
                        message.soulEggs = object.soulEggs;
                    else if (typeof object.soulEggs === "object")
                        message.soulEggs = new $util.LongBits(object.soulEggs.low >>> 0, object.soulEggs.high >>> 0).toNumber(true);
                if (object.unclaimedSoulEggs != null)
                    if ($util.Long)
                        (message.unclaimedSoulEggs = $util.Long.fromValue(object.unclaimedSoulEggs)).unsigned = true;
                    else if (typeof object.unclaimedSoulEggs === "string")
                        message.unclaimedSoulEggs = parseInt(object.unclaimedSoulEggs, 10);
                    else if (typeof object.unclaimedSoulEggs === "number")
                        message.unclaimedSoulEggs = object.unclaimedSoulEggs;
                    else if (typeof object.unclaimedSoulEggs === "object")
                        message.unclaimedSoulEggs = new $util.LongBits(object.unclaimedSoulEggs.low >>> 0, object.unclaimedSoulEggs.high >>> 0).toNumber(true);
                if (object.soulEggsD != null)
                    message.soulEggsD = Number(object.soulEggsD);
                if (object.unclaimedSoulEggsD != null)
                    message.unclaimedSoulEggsD = Number(object.unclaimedSoulEggsD);
                if (object.eggsOfProphecy != null)
                    if ($util.Long)
                        (message.eggsOfProphecy = $util.Long.fromValue(object.eggsOfProphecy)).unsigned = true;
                    else if (typeof object.eggsOfProphecy === "string")
                        message.eggsOfProphecy = parseInt(object.eggsOfProphecy, 10);
                    else if (typeof object.eggsOfProphecy === "number")
                        message.eggsOfProphecy = object.eggsOfProphecy;
                    else if (typeof object.eggsOfProphecy === "object")
                        message.eggsOfProphecy = new $util.LongBits(object.eggsOfProphecy.low >>> 0, object.eggsOfProphecy.high >>> 0).toNumber(true);
                if (object.unclaimedEggsOfProphecy != null)
                    if ($util.Long)
                        (message.unclaimedEggsOfProphecy = $util.Long.fromValue(object.unclaimedEggsOfProphecy)).unsigned = true;
                    else if (typeof object.unclaimedEggsOfProphecy === "string")
                        message.unclaimedEggsOfProphecy = parseInt(object.unclaimedEggsOfProphecy, 10);
                    else if (typeof object.unclaimedEggsOfProphecy === "number")
                        message.unclaimedEggsOfProphecy = object.unclaimedEggsOfProphecy;
                    else if (typeof object.unclaimedEggsOfProphecy === "object")
                        message.unclaimedEggsOfProphecy = new $util.LongBits(object.unclaimedEggsOfProphecy.low >>> 0, object.unclaimedEggsOfProphecy.high >>> 0).toNumber(true);
                if (object.prestigeCashEarned != null)
                    message.prestigeCashEarned = Number(object.prestigeCashEarned);
                if (object.prestigeSoulBoostCash != null)
                    message.prestigeSoulBoostCash = Number(object.prestigeSoulBoostCash);
                if (object.lifetimeCashEarned != null)
                    message.lifetimeCashEarned = Number(object.lifetimeCashEarned);
                if (object.piggyBank != null)
                    if ($util.Long)
                        (message.piggyBank = $util.Long.fromValue(object.piggyBank)).unsigned = true;
                    else if (typeof object.piggyBank === "string")
                        message.piggyBank = parseInt(object.piggyBank, 10);
                    else if (typeof object.piggyBank === "number")
                        message.piggyBank = object.piggyBank;
                    else if (typeof object.piggyBank === "object")
                        message.piggyBank = new $util.LongBits(object.piggyBank.low >>> 0, object.piggyBank.high >>> 0).toNumber(true);
                if (object.piggyFullAlertShown != null)
                    message.piggyFullAlertShown = Boolean(object.piggyFullAlertShown);
                if (object.permitLevel != null)
                    message.permitLevel = object.permitLevel >>> 0;
                if (object.epicResearch) {
                    if (!Array.isArray(object.epicResearch))
                        throw TypeError(".ei.Backup.Game.epicResearch: array expected");
                    message.epicResearch = [];
                    for (let i = 0; i < object.epicResearch.length; ++i) {
                        if (typeof object.epicResearch[i] !== "object")
                            throw TypeError(".ei.Backup.Game.epicResearch: object expected");
                        message.epicResearch[i] = $root.ei.Backup.ResearchItem.fromObject(object.epicResearch[i]);
                    }
                }
                if (object.hyperloopStation != null)
                    message.hyperloopStation = Boolean(object.hyperloopStation);
                if (object.nextDailyGiftTime != null)
                    message.nextDailyGiftTime = Number(object.nextDailyGiftTime);
                if (object.lastDailyGiftCollectedDay != null)
                    message.lastDailyGiftCollectedDay = object.lastDailyGiftCollectedDay >>> 0;
                if (object.numDailyGiftsCollected != null)
                    message.numDailyGiftsCollected = object.numDailyGiftsCollected >>> 0;
                if (object.news) {
                    if (!Array.isArray(object.news))
                        throw TypeError(".ei.Backup.Game.news: array expected");
                    message.news = [];
                    for (let i = 0; i < object.news.length; ++i) {
                        if (typeof object.news[i] !== "object")
                            throw TypeError(".ei.Backup.Game.news: object expected");
                        message.news[i] = $root.ei.Backup.NewsHeadline.fromObject(object.news[i]);
                    }
                }
                if (object.lastNewsTime != null)
                    message.lastNewsTime = Number(object.lastNewsTime);
                if (object.currentMultiplier != null)
                    message.currentMultiplier = Number(object.currentMultiplier);
                if (object.currentMultiplierExpiration != null)
                    message.currentMultiplierExpiration = Number(object.currentMultiplierExpiration);
                if (object.achievements) {
                    if (!Array.isArray(object.achievements))
                        throw TypeError(".ei.Backup.Game.achievements: array expected");
                    message.achievements = [];
                    for (let i = 0; i < object.achievements.length; ++i) {
                        if (typeof object.achievements[i] !== "object")
                            throw TypeError(".ei.Backup.Game.achievements: object expected");
                        message.achievements[i] = $root.ei.Backup.AchievementInfo.fromObject(object.achievements[i]);
                    }
                }
                if (object.maxFarmSizeReached) {
                    if (!Array.isArray(object.maxFarmSizeReached))
                        throw TypeError(".ei.Backup.Game.maxFarmSizeReached: array expected");
                    message.maxFarmSizeReached = [];
                    for (let i = 0; i < object.maxFarmSizeReached.length; ++i)
                        if ($util.Long)
                            (message.maxFarmSizeReached[i] = $util.Long.fromValue(object.maxFarmSizeReached[i])).unsigned = true;
                        else if (typeof object.maxFarmSizeReached[i] === "string")
                            message.maxFarmSizeReached[i] = parseInt(object.maxFarmSizeReached[i], 10);
                        else if (typeof object.maxFarmSizeReached[i] === "number")
                            message.maxFarmSizeReached[i] = object.maxFarmSizeReached[i];
                        else if (typeof object.maxFarmSizeReached[i] === "object")
                            message.maxFarmSizeReached[i] = new $util.LongBits(object.maxFarmSizeReached[i].low >>> 0, object.maxFarmSizeReached[i].high >>> 0).toNumber(true);
                }
                if (object.eggMedalLevel) {
                    if (!Array.isArray(object.eggMedalLevel))
                        throw TypeError(".ei.Backup.Game.eggMedalLevel: array expected");
                    message.eggMedalLevel = [];
                    for (let i = 0; i < object.eggMedalLevel.length; ++i)
                        message.eggMedalLevel[i] = object.eggMedalLevel[i] >>> 0;
                }
                if (object.longIdleNotificationSet != null)
                    message.longIdleNotificationSet = Boolean(object.longIdleNotificationSet);
                if (object.longIdleNotificationThreshold != null)
                    message.longIdleNotificationThreshold = Number(object.longIdleNotificationThreshold);
                if (object.longIdleReward != null)
                    message.longIdleReward = Number(object.longIdleReward);
                if (object.boosts) {
                    if (!Array.isArray(object.boosts))
                        throw TypeError(".ei.Backup.Game.boosts: array expected");
                    message.boosts = [];
                    for (let i = 0; i < object.boosts.length; ++i) {
                        if (typeof object.boosts[i] !== "object")
                            throw TypeError(".ei.Backup.Game.boosts: object expected");
                        message.boosts[i] = $root.ei.Backup.OwnedBoost.fromObject(object.boosts[i]);
                    }
                }
                if (object.totalTimeCheatsDetected != null)
                    message.totalTimeCheatsDetected = object.totalTimeCheatsDetected >>> 0;
                if (object.forceEliteContracts != null)
                    message.forceEliteContracts = Boolean(object.forceEliteContracts);
                if (object.newPlayerEventEndTime != null)
                    message.newPlayerEventEndTime = Number(object.newPlayerEventEndTime);
                return message;
            };

            /**
             * Creates a plain object from a Game message. Also converts values to other types if specified.
             * @function toObject
             * @memberof ei.Backup.Game
             * @static
             * @param {ei.Backup.Game} message Game
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Game.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults) {
                    object.epicResearch = [];
                    object.news = [];
                    object.achievements = [];
                    object.maxFarmSizeReached = [];
                    object.eggMedalLevel = [];
                    object.boosts = [];
                }
                if (options.defaults) {
                    object.maxEggReached = options.enums === String ? "EDIBLE" : 1;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.goldenEggsEarned = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.goldenEggsEarned = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.goldenEggsSpent = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.goldenEggsSpent = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.soulEggs = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.soulEggs = options.longs === String ? "0" : 0;
                    object.prestigeCashEarned = 0;
                    object.lifetimeCashEarned = 0;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.piggyBank = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.piggyBank = options.longs === String ? "0" : 0;
                    object.permitLevel = 0;
                    object.nextDailyGiftTime = 0;
                    object.lastNewsTime = 0;
                    object.currentMultiplier = 0;
                    object.currentMultiplierExpiration = 0;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.uncliamedGoldenEggs = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.uncliamedGoldenEggs = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.unclaimedSoulEggs = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.unclaimedSoulEggs = options.longs === String ? "0" : 0;
                    object.lastDailyGiftCollectedDay = 0;
                    object.currentFarm = 0;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.eggsOfProphecy = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.eggsOfProphecy = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.unclaimedEggsOfProphecy = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.unclaimedEggsOfProphecy = options.longs === String ? "0" : 0;
                    object.longIdleNotificationSet = false;
                    object.longIdleNotificationThreshold = 0;
                    object.longIdleReward = 0;
                    object.numDailyGiftsCollected = 0;
                    object.hyperloopStation = false;
                    object.piggyFullAlertShown = false;
                    object.totalTimeCheatsDetected = 0;
                    object.prestigeSoulBoostCash = 0;
                    object.soulEggsD = 0;
                    object.unclaimedSoulEggsD = 0;
                    object.forceEliteContracts = false;
                    object.newPlayerEventEndTime = 0;
                }
                if (message.maxEggReached != null && message.hasOwnProperty("maxEggReached"))
                    object.maxEggReached = options.enums === String ? $root.ei.Egg[message.maxEggReached] : message.maxEggReached;
                if (message.goldenEggsEarned != null && message.hasOwnProperty("goldenEggsEarned"))
                    if (typeof message.goldenEggsEarned === "number")
                        object.goldenEggsEarned = options.longs === String ? String(message.goldenEggsEarned) : message.goldenEggsEarned;
                    else
                        object.goldenEggsEarned = options.longs === String ? $util.Long.prototype.toString.call(message.goldenEggsEarned) : options.longs === Number ? new $util.LongBits(message.goldenEggsEarned.low >>> 0, message.goldenEggsEarned.high >>> 0).toNumber(true) : message.goldenEggsEarned;
                if (message.goldenEggsSpent != null && message.hasOwnProperty("goldenEggsSpent"))
                    if (typeof message.goldenEggsSpent === "number")
                        object.goldenEggsSpent = options.longs === String ? String(message.goldenEggsSpent) : message.goldenEggsSpent;
                    else
                        object.goldenEggsSpent = options.longs === String ? $util.Long.prototype.toString.call(message.goldenEggsSpent) : options.longs === Number ? new $util.LongBits(message.goldenEggsSpent.low >>> 0, message.goldenEggsSpent.high >>> 0).toNumber(true) : message.goldenEggsSpent;
                if (message.soulEggs != null && message.hasOwnProperty("soulEggs"))
                    if (typeof message.soulEggs === "number")
                        object.soulEggs = options.longs === String ? String(message.soulEggs) : message.soulEggs;
                    else
                        object.soulEggs = options.longs === String ? $util.Long.prototype.toString.call(message.soulEggs) : options.longs === Number ? new $util.LongBits(message.soulEggs.low >>> 0, message.soulEggs.high >>> 0).toNumber(true) : message.soulEggs;
                if (message.prestigeCashEarned != null && message.hasOwnProperty("prestigeCashEarned"))
                    object.prestigeCashEarned = options.json && !isFinite(message.prestigeCashEarned) ? String(message.prestigeCashEarned) : message.prestigeCashEarned;
                if (message.lifetimeCashEarned != null && message.hasOwnProperty("lifetimeCashEarned"))
                    object.lifetimeCashEarned = options.json && !isFinite(message.lifetimeCashEarned) ? String(message.lifetimeCashEarned) : message.lifetimeCashEarned;
                if (message.piggyBank != null && message.hasOwnProperty("piggyBank"))
                    if (typeof message.piggyBank === "number")
                        object.piggyBank = options.longs === String ? String(message.piggyBank) : message.piggyBank;
                    else
                        object.piggyBank = options.longs === String ? $util.Long.prototype.toString.call(message.piggyBank) : options.longs === Number ? new $util.LongBits(message.piggyBank.low >>> 0, message.piggyBank.high >>> 0).toNumber(true) : message.piggyBank;
                if (message.permitLevel != null && message.hasOwnProperty("permitLevel"))
                    object.permitLevel = message.permitLevel;
                if (message.epicResearch && message.epicResearch.length) {
                    object.epicResearch = [];
                    for (let j = 0; j < message.epicResearch.length; ++j)
                        object.epicResearch[j] = $root.ei.Backup.ResearchItem.toObject(message.epicResearch[j], options);
                }
                if (message.nextDailyGiftTime != null && message.hasOwnProperty("nextDailyGiftTime"))
                    object.nextDailyGiftTime = options.json && !isFinite(message.nextDailyGiftTime) ? String(message.nextDailyGiftTime) : message.nextDailyGiftTime;
                if (message.news && message.news.length) {
                    object.news = [];
                    for (let j = 0; j < message.news.length; ++j)
                        object.news[j] = $root.ei.Backup.NewsHeadline.toObject(message.news[j], options);
                }
                if (message.lastNewsTime != null && message.hasOwnProperty("lastNewsTime"))
                    object.lastNewsTime = options.json && !isFinite(message.lastNewsTime) ? String(message.lastNewsTime) : message.lastNewsTime;
                if (message.currentMultiplier != null && message.hasOwnProperty("currentMultiplier"))
                    object.currentMultiplier = options.json && !isFinite(message.currentMultiplier) ? String(message.currentMultiplier) : message.currentMultiplier;
                if (message.currentMultiplierExpiration != null && message.hasOwnProperty("currentMultiplierExpiration"))
                    object.currentMultiplierExpiration = options.json && !isFinite(message.currentMultiplierExpiration) ? String(message.currentMultiplierExpiration) : message.currentMultiplierExpiration;
                if (message.achievements && message.achievements.length) {
                    object.achievements = [];
                    for (let j = 0; j < message.achievements.length; ++j)
                        object.achievements[j] = $root.ei.Backup.AchievementInfo.toObject(message.achievements[j], options);
                }
                if (message.uncliamedGoldenEggs != null && message.hasOwnProperty("uncliamedGoldenEggs"))
                    if (typeof message.uncliamedGoldenEggs === "number")
                        object.uncliamedGoldenEggs = options.longs === String ? String(message.uncliamedGoldenEggs) : message.uncliamedGoldenEggs;
                    else
                        object.uncliamedGoldenEggs = options.longs === String ? $util.Long.prototype.toString.call(message.uncliamedGoldenEggs) : options.longs === Number ? new $util.LongBits(message.uncliamedGoldenEggs.low >>> 0, message.uncliamedGoldenEggs.high >>> 0).toNumber(true) : message.uncliamedGoldenEggs;
                if (message.unclaimedSoulEggs != null && message.hasOwnProperty("unclaimedSoulEggs"))
                    if (typeof message.unclaimedSoulEggs === "number")
                        object.unclaimedSoulEggs = options.longs === String ? String(message.unclaimedSoulEggs) : message.unclaimedSoulEggs;
                    else
                        object.unclaimedSoulEggs = options.longs === String ? $util.Long.prototype.toString.call(message.unclaimedSoulEggs) : options.longs === Number ? new $util.LongBits(message.unclaimedSoulEggs.low >>> 0, message.unclaimedSoulEggs.high >>> 0).toNumber(true) : message.unclaimedSoulEggs;
                if (message.maxFarmSizeReached && message.maxFarmSizeReached.length) {
                    object.maxFarmSizeReached = [];
                    for (let j = 0; j < message.maxFarmSizeReached.length; ++j)
                        if (typeof message.maxFarmSizeReached[j] === "number")
                            object.maxFarmSizeReached[j] = options.longs === String ? String(message.maxFarmSizeReached[j]) : message.maxFarmSizeReached[j];
                        else
                            object.maxFarmSizeReached[j] = options.longs === String ? $util.Long.prototype.toString.call(message.maxFarmSizeReached[j]) : options.longs === Number ? new $util.LongBits(message.maxFarmSizeReached[j].low >>> 0, message.maxFarmSizeReached[j].high >>> 0).toNumber(true) : message.maxFarmSizeReached[j];
                }
                if (message.eggMedalLevel && message.eggMedalLevel.length) {
                    object.eggMedalLevel = [];
                    for (let j = 0; j < message.eggMedalLevel.length; ++j)
                        object.eggMedalLevel[j] = message.eggMedalLevel[j];
                }
                if (message.lastDailyGiftCollectedDay != null && message.hasOwnProperty("lastDailyGiftCollectedDay"))
                    object.lastDailyGiftCollectedDay = message.lastDailyGiftCollectedDay;
                if (message.currentFarm != null && message.hasOwnProperty("currentFarm"))
                    object.currentFarm = message.currentFarm;
                if (message.eggsOfProphecy != null && message.hasOwnProperty("eggsOfProphecy"))
                    if (typeof message.eggsOfProphecy === "number")
                        object.eggsOfProphecy = options.longs === String ? String(message.eggsOfProphecy) : message.eggsOfProphecy;
                    else
                        object.eggsOfProphecy = options.longs === String ? $util.Long.prototype.toString.call(message.eggsOfProphecy) : options.longs === Number ? new $util.LongBits(message.eggsOfProphecy.low >>> 0, message.eggsOfProphecy.high >>> 0).toNumber(true) : message.eggsOfProphecy;
                if (message.unclaimedEggsOfProphecy != null && message.hasOwnProperty("unclaimedEggsOfProphecy"))
                    if (typeof message.unclaimedEggsOfProphecy === "number")
                        object.unclaimedEggsOfProphecy = options.longs === String ? String(message.unclaimedEggsOfProphecy) : message.unclaimedEggsOfProphecy;
                    else
                        object.unclaimedEggsOfProphecy = options.longs === String ? $util.Long.prototype.toString.call(message.unclaimedEggsOfProphecy) : options.longs === Number ? new $util.LongBits(message.unclaimedEggsOfProphecy.low >>> 0, message.unclaimedEggsOfProphecy.high >>> 0).toNumber(true) : message.unclaimedEggsOfProphecy;
                if (message.longIdleNotificationSet != null && message.hasOwnProperty("longIdleNotificationSet"))
                    object.longIdleNotificationSet = message.longIdleNotificationSet;
                if (message.longIdleNotificationThreshold != null && message.hasOwnProperty("longIdleNotificationThreshold"))
                    object.longIdleNotificationThreshold = options.json && !isFinite(message.longIdleNotificationThreshold) ? String(message.longIdleNotificationThreshold) : message.longIdleNotificationThreshold;
                if (message.longIdleReward != null && message.hasOwnProperty("longIdleReward"))
                    object.longIdleReward = options.json && !isFinite(message.longIdleReward) ? String(message.longIdleReward) : message.longIdleReward;
                if (message.numDailyGiftsCollected != null && message.hasOwnProperty("numDailyGiftsCollected"))
                    object.numDailyGiftsCollected = message.numDailyGiftsCollected;
                if (message.hyperloopStation != null && message.hasOwnProperty("hyperloopStation"))
                    object.hyperloopStation = message.hyperloopStation;
                if (message.boosts && message.boosts.length) {
                    object.boosts = [];
                    for (let j = 0; j < message.boosts.length; ++j)
                        object.boosts[j] = $root.ei.Backup.OwnedBoost.toObject(message.boosts[j], options);
                }
                if (message.piggyFullAlertShown != null && message.hasOwnProperty("piggyFullAlertShown"))
                    object.piggyFullAlertShown = message.piggyFullAlertShown;
                if (message.totalTimeCheatsDetected != null && message.hasOwnProperty("totalTimeCheatsDetected"))
                    object.totalTimeCheatsDetected = message.totalTimeCheatsDetected;
                if (message.prestigeSoulBoostCash != null && message.hasOwnProperty("prestigeSoulBoostCash"))
                    object.prestigeSoulBoostCash = options.json && !isFinite(message.prestigeSoulBoostCash) ? String(message.prestigeSoulBoostCash) : message.prestigeSoulBoostCash;
                if (message.soulEggsD != null && message.hasOwnProperty("soulEggsD"))
                    object.soulEggsD = options.json && !isFinite(message.soulEggsD) ? String(message.soulEggsD) : message.soulEggsD;
                if (message.unclaimedSoulEggsD != null && message.hasOwnProperty("unclaimedSoulEggsD"))
                    object.unclaimedSoulEggsD = options.json && !isFinite(message.unclaimedSoulEggsD) ? String(message.unclaimedSoulEggsD) : message.unclaimedSoulEggsD;
                if (message.forceEliteContracts != null && message.hasOwnProperty("forceEliteContracts"))
                    object.forceEliteContracts = message.forceEliteContracts;
                if (message.newPlayerEventEndTime != null && message.hasOwnProperty("newPlayerEventEndTime"))
                    object.newPlayerEventEndTime = options.json && !isFinite(message.newPlayerEventEndTime) ? String(message.newPlayerEventEndTime) : message.newPlayerEventEndTime;
                return object;
            };

            /**
             * Converts this Game to JSON.
             * @function toJSON
             * @memberof ei.Backup.Game
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Game.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Game;
        })();

        Backup.Artifacts = (function() {

            /**
             * Properties of an Artifacts.
             * @memberof ei.Backup
             * @interface IArtifacts
             * @property {boolean|null} [infusing] Artifacts infusing
             * @property {ei.IArtifactInventoryItem|null} [itemBeingInfused] Artifacts itemBeingInfused
             * @property {ei.IArtifactSpec|null} [specBeingInfused] Artifacts specBeingInfused
             * @property {ei.Egg|null} [eggTypeInfusing] Artifacts eggTypeInfusing
             * @property {number|null} [infusingEggsRequired] Artifacts infusingEggsRequired
             * @property {number|null} [eggsInfused] Artifacts eggsInfused
             * @property {number|null} [flowPercentageArtifacts] Artifacts flowPercentageArtifacts
             * @property {boolean|null} [fuelingEnabled] Artifacts fuelingEnabled
             * @property {boolean|null} [infusingEnabled] Artifacts infusingEnabled
             * @property {ei.MissionInfo.Spaceship|null} [lastFueledShip] Artifacts lastFueledShip
             * @property {number|null} [inventoryScore] Artifacts inventoryScore
             * @property {boolean|null} [enabled] Artifacts enabled
             * @property {boolean|null} [introShown] Artifacts introShown
             */

            /**
             * Constructs a new Artifacts.
             * @memberof ei.Backup
             * @classdesc Represents an Artifacts.
             * @implements IArtifacts
             * @constructor
             * @param {ei.Backup.IArtifacts=} [properties] Properties to set
             */
            function Artifacts(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Artifacts infusing.
             * @member {boolean} infusing
             * @memberof ei.Backup.Artifacts
             * @instance
             */
            Artifacts.prototype.infusing = false;

            /**
             * Artifacts itemBeingInfused.
             * @member {ei.IArtifactInventoryItem|null|undefined} itemBeingInfused
             * @memberof ei.Backup.Artifacts
             * @instance
             */
            Artifacts.prototype.itemBeingInfused = null;

            /**
             * Artifacts specBeingInfused.
             * @member {ei.IArtifactSpec|null|undefined} specBeingInfused
             * @memberof ei.Backup.Artifacts
             * @instance
             */
            Artifacts.prototype.specBeingInfused = null;

            /**
             * Artifacts eggTypeInfusing.
             * @member {ei.Egg} eggTypeInfusing
             * @memberof ei.Backup.Artifacts
             * @instance
             */
            Artifacts.prototype.eggTypeInfusing = 1;

            /**
             * Artifacts infusingEggsRequired.
             * @member {number} infusingEggsRequired
             * @memberof ei.Backup.Artifacts
             * @instance
             */
            Artifacts.prototype.infusingEggsRequired = 0;

            /**
             * Artifacts eggsInfused.
             * @member {number} eggsInfused
             * @memberof ei.Backup.Artifacts
             * @instance
             */
            Artifacts.prototype.eggsInfused = 0;

            /**
             * Artifacts flowPercentageArtifacts.
             * @member {number} flowPercentageArtifacts
             * @memberof ei.Backup.Artifacts
             * @instance
             */
            Artifacts.prototype.flowPercentageArtifacts = 0.5;

            /**
             * Artifacts fuelingEnabled.
             * @member {boolean} fuelingEnabled
             * @memberof ei.Backup.Artifacts
             * @instance
             */
            Artifacts.prototype.fuelingEnabled = true;

            /**
             * Artifacts infusingEnabled.
             * @member {boolean} infusingEnabled
             * @memberof ei.Backup.Artifacts
             * @instance
             */
            Artifacts.prototype.infusingEnabled = true;

            /**
             * Artifacts lastFueledShip.
             * @member {ei.MissionInfo.Spaceship} lastFueledShip
             * @memberof ei.Backup.Artifacts
             * @instance
             */
            Artifacts.prototype.lastFueledShip = 0;

            /**
             * Artifacts inventoryScore.
             * @member {number} inventoryScore
             * @memberof ei.Backup.Artifacts
             * @instance
             */
            Artifacts.prototype.inventoryScore = 0;

            /**
             * Artifacts enabled.
             * @member {boolean} enabled
             * @memberof ei.Backup.Artifacts
             * @instance
             */
            Artifacts.prototype.enabled = false;

            /**
             * Artifacts introShown.
             * @member {boolean} introShown
             * @memberof ei.Backup.Artifacts
             * @instance
             */
            Artifacts.prototype.introShown = false;

            /**
             * Creates a new Artifacts instance using the specified properties.
             * @function create
             * @memberof ei.Backup.Artifacts
             * @static
             * @param {ei.Backup.IArtifacts=} [properties] Properties to set
             * @returns {ei.Backup.Artifacts} Artifacts instance
             */
            Artifacts.create = function create(properties) {
                return new Artifacts(properties);
            };

            /**
             * Encodes the specified Artifacts message. Does not implicitly {@link ei.Backup.Artifacts.verify|verify} messages.
             * @function encode
             * @memberof ei.Backup.Artifacts
             * @static
             * @param {ei.Backup.IArtifacts} message Artifacts message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Artifacts.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.infusing != null && Object.hasOwnProperty.call(message, "infusing"))
                    writer.uint32(/* id 1, wireType 0 =*/8).bool(message.infusing);
                if (message.itemBeingInfused != null && Object.hasOwnProperty.call(message, "itemBeingInfused"))
                    $root.ei.ArtifactInventoryItem.encode(message.itemBeingInfused, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.eggTypeInfusing != null && Object.hasOwnProperty.call(message, "eggTypeInfusing"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.eggTypeInfusing);
                if (message.infusingEggsRequired != null && Object.hasOwnProperty.call(message, "infusingEggsRequired"))
                    writer.uint32(/* id 4, wireType 1 =*/33).double(message.infusingEggsRequired);
                if (message.eggsInfused != null && Object.hasOwnProperty.call(message, "eggsInfused"))
                    writer.uint32(/* id 5, wireType 1 =*/41).double(message.eggsInfused);
                if (message.flowPercentageArtifacts != null && Object.hasOwnProperty.call(message, "flowPercentageArtifacts"))
                    writer.uint32(/* id 6, wireType 1 =*/49).double(message.flowPercentageArtifacts);
                if (message.fuelingEnabled != null && Object.hasOwnProperty.call(message, "fuelingEnabled"))
                    writer.uint32(/* id 7, wireType 0 =*/56).bool(message.fuelingEnabled);
                if (message.infusingEnabled != null && Object.hasOwnProperty.call(message, "infusingEnabled"))
                    writer.uint32(/* id 8, wireType 0 =*/64).bool(message.infusingEnabled);
                if (message.lastFueledShip != null && Object.hasOwnProperty.call(message, "lastFueledShip"))
                    writer.uint32(/* id 9, wireType 0 =*/72).int32(message.lastFueledShip);
                if (message.inventoryScore != null && Object.hasOwnProperty.call(message, "inventoryScore"))
                    writer.uint32(/* id 10, wireType 1 =*/81).double(message.inventoryScore);
                if (message.enabled != null && Object.hasOwnProperty.call(message, "enabled"))
                    writer.uint32(/* id 11, wireType 0 =*/88).bool(message.enabled);
                if (message.introShown != null && Object.hasOwnProperty.call(message, "introShown"))
                    writer.uint32(/* id 12, wireType 0 =*/96).bool(message.introShown);
                if (message.specBeingInfused != null && Object.hasOwnProperty.call(message, "specBeingInfused"))
                    $root.ei.ArtifactSpec.encode(message.specBeingInfused, writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified Artifacts message, length delimited. Does not implicitly {@link ei.Backup.Artifacts.verify|verify} messages.
             * @function encodeDelimited
             * @memberof ei.Backup.Artifacts
             * @static
             * @param {ei.Backup.IArtifacts} message Artifacts message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Artifacts.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an Artifacts message from the specified reader or buffer.
             * @function decode
             * @memberof ei.Backup.Artifacts
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {ei.Backup.Artifacts} Artifacts
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Artifacts.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ei.Backup.Artifacts();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.infusing = reader.bool();
                        break;
                    case 2:
                        message.itemBeingInfused = $root.ei.ArtifactInventoryItem.decode(reader, reader.uint32());
                        break;
                    case 13:
                        message.specBeingInfused = $root.ei.ArtifactSpec.decode(reader, reader.uint32());
                        break;
                    case 3:
                        message.eggTypeInfusing = reader.int32();
                        break;
                    case 4:
                        message.infusingEggsRequired = reader.double();
                        break;
                    case 5:
                        message.eggsInfused = reader.double();
                        break;
                    case 6:
                        message.flowPercentageArtifacts = reader.double();
                        break;
                    case 7:
                        message.fuelingEnabled = reader.bool();
                        break;
                    case 8:
                        message.infusingEnabled = reader.bool();
                        break;
                    case 9:
                        message.lastFueledShip = reader.int32();
                        break;
                    case 10:
                        message.inventoryScore = reader.double();
                        break;
                    case 11:
                        message.enabled = reader.bool();
                        break;
                    case 12:
                        message.introShown = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an Artifacts message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof ei.Backup.Artifacts
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {ei.Backup.Artifacts} Artifacts
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Artifacts.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an Artifacts message.
             * @function verify
             * @memberof ei.Backup.Artifacts
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Artifacts.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.infusing != null && message.hasOwnProperty("infusing"))
                    if (typeof message.infusing !== "boolean")
                        return "infusing: boolean expected";
                if (message.itemBeingInfused != null && message.hasOwnProperty("itemBeingInfused")) {
                    let error = $root.ei.ArtifactInventoryItem.verify(message.itemBeingInfused);
                    if (error)
                        return "itemBeingInfused." + error;
                }
                if (message.specBeingInfused != null && message.hasOwnProperty("specBeingInfused")) {
                    let error = $root.ei.ArtifactSpec.verify(message.specBeingInfused);
                    if (error)
                        return "specBeingInfused." + error;
                }
                if (message.eggTypeInfusing != null && message.hasOwnProperty("eggTypeInfusing"))
                    switch (message.eggTypeInfusing) {
                    default:
                        return "eggTypeInfusing: enum value expected";
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                    case 8:
                    case 9:
                    case 10:
                    case 11:
                    case 12:
                    case 13:
                    case 14:
                    case 15:
                    case 16:
                    case 17:
                    case 18:
                    case 19:
                    case 100:
                    case 101:
                    case 102:
                    case 103:
                    case 104:
                    case 1000:
                        break;
                    }
                if (message.infusingEggsRequired != null && message.hasOwnProperty("infusingEggsRequired"))
                    if (typeof message.infusingEggsRequired !== "number")
                        return "infusingEggsRequired: number expected";
                if (message.eggsInfused != null && message.hasOwnProperty("eggsInfused"))
                    if (typeof message.eggsInfused !== "number")
                        return "eggsInfused: number expected";
                if (message.flowPercentageArtifacts != null && message.hasOwnProperty("flowPercentageArtifacts"))
                    if (typeof message.flowPercentageArtifacts !== "number")
                        return "flowPercentageArtifacts: number expected";
                if (message.fuelingEnabled != null && message.hasOwnProperty("fuelingEnabled"))
                    if (typeof message.fuelingEnabled !== "boolean")
                        return "fuelingEnabled: boolean expected";
                if (message.infusingEnabled != null && message.hasOwnProperty("infusingEnabled"))
                    if (typeof message.infusingEnabled !== "boolean")
                        return "infusingEnabled: boolean expected";
                if (message.lastFueledShip != null && message.hasOwnProperty("lastFueledShip"))
                    switch (message.lastFueledShip) {
                    default:
                        return "lastFueledShip: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                    case 8:
                    case 9:
                        break;
                    }
                if (message.inventoryScore != null && message.hasOwnProperty("inventoryScore"))
                    if (typeof message.inventoryScore !== "number")
                        return "inventoryScore: number expected";
                if (message.enabled != null && message.hasOwnProperty("enabled"))
                    if (typeof message.enabled !== "boolean")
                        return "enabled: boolean expected";
                if (message.introShown != null && message.hasOwnProperty("introShown"))
                    if (typeof message.introShown !== "boolean")
                        return "introShown: boolean expected";
                return null;
            };

            /**
             * Creates an Artifacts message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof ei.Backup.Artifacts
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {ei.Backup.Artifacts} Artifacts
             */
            Artifacts.fromObject = function fromObject(object) {
                if (object instanceof $root.ei.Backup.Artifacts)
                    return object;
                let message = new $root.ei.Backup.Artifacts();
                if (object.infusing != null)
                    message.infusing = Boolean(object.infusing);
                if (object.itemBeingInfused != null) {
                    if (typeof object.itemBeingInfused !== "object")
                        throw TypeError(".ei.Backup.Artifacts.itemBeingInfused: object expected");
                    message.itemBeingInfused = $root.ei.ArtifactInventoryItem.fromObject(object.itemBeingInfused);
                }
                if (object.specBeingInfused != null) {
                    if (typeof object.specBeingInfused !== "object")
                        throw TypeError(".ei.Backup.Artifacts.specBeingInfused: object expected");
                    message.specBeingInfused = $root.ei.ArtifactSpec.fromObject(object.specBeingInfused);
                }
                switch (object.eggTypeInfusing) {
                case "EDIBLE":
                case 1:
                    message.eggTypeInfusing = 1;
                    break;
                case "SUPERFOOD":
                case 2:
                    message.eggTypeInfusing = 2;
                    break;
                case "MEDICAL":
                case 3:
                    message.eggTypeInfusing = 3;
                    break;
                case "ROCKET_FUEL":
                case 4:
                    message.eggTypeInfusing = 4;
                    break;
                case "SUPER_MATERIAL":
                case 5:
                    message.eggTypeInfusing = 5;
                    break;
                case "FUSION":
                case 6:
                    message.eggTypeInfusing = 6;
                    break;
                case "QUANTUM":
                case 7:
                    message.eggTypeInfusing = 7;
                    break;
                case "IMMORTALITY":
                case 8:
                    message.eggTypeInfusing = 8;
                    break;
                case "TACHYON":
                case 9:
                    message.eggTypeInfusing = 9;
                    break;
                case "GRAVITON":
                case 10:
                    message.eggTypeInfusing = 10;
                    break;
                case "DILITHIUM":
                case 11:
                    message.eggTypeInfusing = 11;
                    break;
                case "PRODIGY":
                case 12:
                    message.eggTypeInfusing = 12;
                    break;
                case "TERRAFORM":
                case 13:
                    message.eggTypeInfusing = 13;
                    break;
                case "ANTIMATTER":
                case 14:
                    message.eggTypeInfusing = 14;
                    break;
                case "DARK_MATTER":
                case 15:
                    message.eggTypeInfusing = 15;
                    break;
                case "AI":
                case 16:
                    message.eggTypeInfusing = 16;
                    break;
                case "NEBULA":
                case 17:
                    message.eggTypeInfusing = 17;
                    break;
                case "UNIVERSE":
                case 18:
                    message.eggTypeInfusing = 18;
                    break;
                case "ENLIGHTENMENT":
                case 19:
                    message.eggTypeInfusing = 19;
                    break;
                case "CHOCOLATE":
                case 100:
                    message.eggTypeInfusing = 100;
                    break;
                case "EASTER":
                case 101:
                    message.eggTypeInfusing = 101;
                    break;
                case "WATERBALLOON":
                case 102:
                    message.eggTypeInfusing = 102;
                    break;
                case "FIREWORK":
                case 103:
                    message.eggTypeInfusing = 103;
                    break;
                case "PUMPKIN":
                case 104:
                    message.eggTypeInfusing = 104;
                    break;
                case "UNKNOWN":
                case 1000:
                    message.eggTypeInfusing = 1000;
                    break;
                }
                if (object.infusingEggsRequired != null)
                    message.infusingEggsRequired = Number(object.infusingEggsRequired);
                if (object.eggsInfused != null)
                    message.eggsInfused = Number(object.eggsInfused);
                if (object.flowPercentageArtifacts != null)
                    message.flowPercentageArtifacts = Number(object.flowPercentageArtifacts);
                if (object.fuelingEnabled != null)
                    message.fuelingEnabled = Boolean(object.fuelingEnabled);
                if (object.infusingEnabled != null)
                    message.infusingEnabled = Boolean(object.infusingEnabled);
                switch (object.lastFueledShip) {
                case "CHICKEN_ONE":
                case 0:
                    message.lastFueledShip = 0;
                    break;
                case "CHICKEN_NINE":
                case 1:
                    message.lastFueledShip = 1;
                    break;
                case "CHICKEN_HEAVY":
                case 2:
                    message.lastFueledShip = 2;
                    break;
                case "BCR":
                case 3:
                    message.lastFueledShip = 3;
                    break;
                case "MILLENIUM_CHICKEN":
                case 4:
                    message.lastFueledShip = 4;
                    break;
                case "CORELLIHEN_CORVETTE":
                case 5:
                    message.lastFueledShip = 5;
                    break;
                case "GALEGGTICA":
                case 6:
                    message.lastFueledShip = 6;
                    break;
                case "CHICKFIANT":
                case 7:
                    message.lastFueledShip = 7;
                    break;
                case "VOYEGGER":
                case 8:
                    message.lastFueledShip = 8;
                    break;
                case "HENERPRISE":
                case 9:
                    message.lastFueledShip = 9;
                    break;
                }
                if (object.inventoryScore != null)
                    message.inventoryScore = Number(object.inventoryScore);
                if (object.enabled != null)
                    message.enabled = Boolean(object.enabled);
                if (object.introShown != null)
                    message.introShown = Boolean(object.introShown);
                return message;
            };

            /**
             * Creates a plain object from an Artifacts message. Also converts values to other types if specified.
             * @function toObject
             * @memberof ei.Backup.Artifacts
             * @static
             * @param {ei.Backup.Artifacts} message Artifacts
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Artifacts.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.infusing = false;
                    object.itemBeingInfused = null;
                    object.eggTypeInfusing = options.enums === String ? "EDIBLE" : 1;
                    object.infusingEggsRequired = 0;
                    object.eggsInfused = 0;
                    object.flowPercentageArtifacts = 0.5;
                    object.fuelingEnabled = true;
                    object.infusingEnabled = true;
                    object.lastFueledShip = options.enums === String ? "CHICKEN_ONE" : 0;
                    object.inventoryScore = 0;
                    object.enabled = false;
                    object.introShown = false;
                    object.specBeingInfused = null;
                }
                if (message.infusing != null && message.hasOwnProperty("infusing"))
                    object.infusing = message.infusing;
                if (message.itemBeingInfused != null && message.hasOwnProperty("itemBeingInfused"))
                    object.itemBeingInfused = $root.ei.ArtifactInventoryItem.toObject(message.itemBeingInfused, options);
                if (message.eggTypeInfusing != null && message.hasOwnProperty("eggTypeInfusing"))
                    object.eggTypeInfusing = options.enums === String ? $root.ei.Egg[message.eggTypeInfusing] : message.eggTypeInfusing;
                if (message.infusingEggsRequired != null && message.hasOwnProperty("infusingEggsRequired"))
                    object.infusingEggsRequired = options.json && !isFinite(message.infusingEggsRequired) ? String(message.infusingEggsRequired) : message.infusingEggsRequired;
                if (message.eggsInfused != null && message.hasOwnProperty("eggsInfused"))
                    object.eggsInfused = options.json && !isFinite(message.eggsInfused) ? String(message.eggsInfused) : message.eggsInfused;
                if (message.flowPercentageArtifacts != null && message.hasOwnProperty("flowPercentageArtifacts"))
                    object.flowPercentageArtifacts = options.json && !isFinite(message.flowPercentageArtifacts) ? String(message.flowPercentageArtifacts) : message.flowPercentageArtifacts;
                if (message.fuelingEnabled != null && message.hasOwnProperty("fuelingEnabled"))
                    object.fuelingEnabled = message.fuelingEnabled;
                if (message.infusingEnabled != null && message.hasOwnProperty("infusingEnabled"))
                    object.infusingEnabled = message.infusingEnabled;
                if (message.lastFueledShip != null && message.hasOwnProperty("lastFueledShip"))
                    object.lastFueledShip = options.enums === String ? $root.ei.MissionInfo.Spaceship[message.lastFueledShip] : message.lastFueledShip;
                if (message.inventoryScore != null && message.hasOwnProperty("inventoryScore"))
                    object.inventoryScore = options.json && !isFinite(message.inventoryScore) ? String(message.inventoryScore) : message.inventoryScore;
                if (message.enabled != null && message.hasOwnProperty("enabled"))
                    object.enabled = message.enabled;
                if (message.introShown != null && message.hasOwnProperty("introShown"))
                    object.introShown = message.introShown;
                if (message.specBeingInfused != null && message.hasOwnProperty("specBeingInfused"))
                    object.specBeingInfused = $root.ei.ArtifactSpec.toObject(message.specBeingInfused, options);
                return object;
            };

            /**
             * Converts this Artifacts to JSON.
             * @function toJSON
             * @memberof ei.Backup.Artifacts
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Artifacts.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Artifacts;
        })();

        Backup.Simulation = (function() {

            /**
             * Properties of a Simulation.
             * @memberof ei.Backup
             * @interface ISimulation
             * @property {ei.Egg|null} [eggType] Simulation eggType
             * @property {ei.FarmType|null} [farmType] Simulation farmType
             * @property {string|null} [contractId] Simulation contractId
             * @property {number|null} [cashEarned] Simulation cashEarned
             * @property {number|null} [cashSpent] Simulation cashSpent
             * @property {number|null} [unclaimedCash] Simulation unclaimedCash
             * @property {number|null} [lastStepTime] Simulation lastStepTime
             * @property {number|Long|null} [numChickens] Simulation numChickens
             * @property {number|Long|null} [numChickensUnsettled] Simulation numChickensUnsettled
             * @property {number|Long|null} [numChickensRunning] Simulation numChickensRunning
             * @property {number|null} [eggsLaid] Simulation eggsLaid
             * @property {number|null} [eggsShipped] Simulation eggsShipped
             * @property {number|null} [eggsPaidFor] Simulation eggsPaidFor
             * @property {number|null} [silosOwned] Simulation silosOwned
             * @property {Array.<number>|null} [habs] Simulation habs
             * @property {Array.<number|Long>|null} [habPopulation] Simulation habPopulation
             * @property {Array.<number|Long>|null} [habPopulationIndound] Simulation habPopulationIndound
             * @property {Array.<number>|null} [habIncubatorPopuplation] Simulation habIncubatorPopuplation
             * @property {number|null} [hatcheryPopulation] Simulation hatcheryPopulation
             * @property {Array.<number>|null} [vehicles] Simulation vehicles
             * @property {Array.<number>|null} [trainLength] Simulation trainLength
             * @property {Array.<ei.Backup.IResearchItem>|null} [commonResearch] Simulation commonResearch
             * @property {Array.<ei.Backup.IActiveBoost>|null} [activeBoosts] Simulation activeBoosts
             * @property {number|null} [timeCheatsDetected] Simulation timeCheatsDetected
             * @property {number|null} [timeCheatDebt] Simulation timeCheatDebt
             * @property {number|null} [boostTokensReceived] Simulation boostTokensReceived
             * @property {number|null} [boostTokensSpent] Simulation boostTokensSpent
             * @property {number|null} [boostTokensGiven] Simulation boostTokensGiven
             * @property {number|null} [unclaimedBoostTokens] Simulation unclaimedBoostTokens
             * @property {number|null} [gametimeUntilNextBoostToken] Simulation gametimeUntilNextBoostToken
             */

            /**
             * Constructs a new Simulation.
             * @memberof ei.Backup
             * @classdesc Represents a Simulation.
             * @implements ISimulation
             * @constructor
             * @param {ei.Backup.ISimulation=} [properties] Properties to set
             */
            function Simulation(properties) {
                this.habs = [];
                this.habPopulation = [];
                this.habPopulationIndound = [];
                this.habIncubatorPopuplation = [];
                this.vehicles = [];
                this.trainLength = [];
                this.commonResearch = [];
                this.activeBoosts = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Simulation eggType.
             * @member {ei.Egg} eggType
             * @memberof ei.Backup.Simulation
             * @instance
             */
            Simulation.prototype.eggType = 1;

            /**
             * Simulation farmType.
             * @member {ei.FarmType} farmType
             * @memberof ei.Backup.Simulation
             * @instance
             */
            Simulation.prototype.farmType = 1;

            /**
             * Simulation contractId.
             * @member {string} contractId
             * @memberof ei.Backup.Simulation
             * @instance
             */
            Simulation.prototype.contractId = "";

            /**
             * Simulation cashEarned.
             * @member {number} cashEarned
             * @memberof ei.Backup.Simulation
             * @instance
             */
            Simulation.prototype.cashEarned = 0;

            /**
             * Simulation cashSpent.
             * @member {number} cashSpent
             * @memberof ei.Backup.Simulation
             * @instance
             */
            Simulation.prototype.cashSpent = 0;

            /**
             * Simulation unclaimedCash.
             * @member {number} unclaimedCash
             * @memberof ei.Backup.Simulation
             * @instance
             */
            Simulation.prototype.unclaimedCash = 0;

            /**
             * Simulation lastStepTime.
             * @member {number} lastStepTime
             * @memberof ei.Backup.Simulation
             * @instance
             */
            Simulation.prototype.lastStepTime = 0;

            /**
             * Simulation numChickens.
             * @member {number|Long} numChickens
             * @memberof ei.Backup.Simulation
             * @instance
             */
            Simulation.prototype.numChickens = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * Simulation numChickensUnsettled.
             * @member {number|Long} numChickensUnsettled
             * @memberof ei.Backup.Simulation
             * @instance
             */
            Simulation.prototype.numChickensUnsettled = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * Simulation numChickensRunning.
             * @member {number|Long} numChickensRunning
             * @memberof ei.Backup.Simulation
             * @instance
             */
            Simulation.prototype.numChickensRunning = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * Simulation eggsLaid.
             * @member {number} eggsLaid
             * @memberof ei.Backup.Simulation
             * @instance
             */
            Simulation.prototype.eggsLaid = 0;

            /**
             * Simulation eggsShipped.
             * @member {number} eggsShipped
             * @memberof ei.Backup.Simulation
             * @instance
             */
            Simulation.prototype.eggsShipped = 0;

            /**
             * Simulation eggsPaidFor.
             * @member {number} eggsPaidFor
             * @memberof ei.Backup.Simulation
             * @instance
             */
            Simulation.prototype.eggsPaidFor = 0;

            /**
             * Simulation silosOwned.
             * @member {number} silosOwned
             * @memberof ei.Backup.Simulation
             * @instance
             */
            Simulation.prototype.silosOwned = 0;

            /**
             * Simulation habs.
             * @member {Array.<number>} habs
             * @memberof ei.Backup.Simulation
             * @instance
             */
            Simulation.prototype.habs = $util.emptyArray;

            /**
             * Simulation habPopulation.
             * @member {Array.<number|Long>} habPopulation
             * @memberof ei.Backup.Simulation
             * @instance
             */
            Simulation.prototype.habPopulation = $util.emptyArray;

            /**
             * Simulation habPopulationIndound.
             * @member {Array.<number|Long>} habPopulationIndound
             * @memberof ei.Backup.Simulation
             * @instance
             */
            Simulation.prototype.habPopulationIndound = $util.emptyArray;

            /**
             * Simulation habIncubatorPopuplation.
             * @member {Array.<number>} habIncubatorPopuplation
             * @memberof ei.Backup.Simulation
             * @instance
             */
            Simulation.prototype.habIncubatorPopuplation = $util.emptyArray;

            /**
             * Simulation hatcheryPopulation.
             * @member {number} hatcheryPopulation
             * @memberof ei.Backup.Simulation
             * @instance
             */
            Simulation.prototype.hatcheryPopulation = 0;

            /**
             * Simulation vehicles.
             * @member {Array.<number>} vehicles
             * @memberof ei.Backup.Simulation
             * @instance
             */
            Simulation.prototype.vehicles = $util.emptyArray;

            /**
             * Simulation trainLength.
             * @member {Array.<number>} trainLength
             * @memberof ei.Backup.Simulation
             * @instance
             */
            Simulation.prototype.trainLength = $util.emptyArray;

            /**
             * Simulation commonResearch.
             * @member {Array.<ei.Backup.IResearchItem>} commonResearch
             * @memberof ei.Backup.Simulation
             * @instance
             */
            Simulation.prototype.commonResearch = $util.emptyArray;

            /**
             * Simulation activeBoosts.
             * @member {Array.<ei.Backup.IActiveBoost>} activeBoosts
             * @memberof ei.Backup.Simulation
             * @instance
             */
            Simulation.prototype.activeBoosts = $util.emptyArray;

            /**
             * Simulation timeCheatsDetected.
             * @member {number} timeCheatsDetected
             * @memberof ei.Backup.Simulation
             * @instance
             */
            Simulation.prototype.timeCheatsDetected = 0;

            /**
             * Simulation timeCheatDebt.
             * @member {number} timeCheatDebt
             * @memberof ei.Backup.Simulation
             * @instance
             */
            Simulation.prototype.timeCheatDebt = 0;

            /**
             * Simulation boostTokensReceived.
             * @member {number} boostTokensReceived
             * @memberof ei.Backup.Simulation
             * @instance
             */
            Simulation.prototype.boostTokensReceived = 0;

            /**
             * Simulation boostTokensSpent.
             * @member {number} boostTokensSpent
             * @memberof ei.Backup.Simulation
             * @instance
             */
            Simulation.prototype.boostTokensSpent = 0;

            /**
             * Simulation boostTokensGiven.
             * @member {number} boostTokensGiven
             * @memberof ei.Backup.Simulation
             * @instance
             */
            Simulation.prototype.boostTokensGiven = 0;

            /**
             * Simulation unclaimedBoostTokens.
             * @member {number} unclaimedBoostTokens
             * @memberof ei.Backup.Simulation
             * @instance
             */
            Simulation.prototype.unclaimedBoostTokens = 0;

            /**
             * Simulation gametimeUntilNextBoostToken.
             * @member {number} gametimeUntilNextBoostToken
             * @memberof ei.Backup.Simulation
             * @instance
             */
            Simulation.prototype.gametimeUntilNextBoostToken = 0;

            /**
             * Creates a new Simulation instance using the specified properties.
             * @function create
             * @memberof ei.Backup.Simulation
             * @static
             * @param {ei.Backup.ISimulation=} [properties] Properties to set
             * @returns {ei.Backup.Simulation} Simulation instance
             */
            Simulation.create = function create(properties) {
                return new Simulation(properties);
            };

            /**
             * Encodes the specified Simulation message. Does not implicitly {@link ei.Backup.Simulation.verify|verify} messages.
             * @function encode
             * @memberof ei.Backup.Simulation
             * @static
             * @param {ei.Backup.ISimulation} message Simulation message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Simulation.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.eggType != null && Object.hasOwnProperty.call(message, "eggType"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.eggType);
                if (message.cashEarned != null && Object.hasOwnProperty.call(message, "cashEarned"))
                    writer.uint32(/* id 2, wireType 1 =*/17).double(message.cashEarned);
                if (message.cashSpent != null && Object.hasOwnProperty.call(message, "cashSpent"))
                    writer.uint32(/* id 3, wireType 1 =*/25).double(message.cashSpent);
                if (message.unclaimedCash != null && Object.hasOwnProperty.call(message, "unclaimedCash"))
                    writer.uint32(/* id 4, wireType 1 =*/33).double(message.unclaimedCash);
                if (message.lastStepTime != null && Object.hasOwnProperty.call(message, "lastStepTime"))
                    writer.uint32(/* id 5, wireType 1 =*/41).double(message.lastStepTime);
                if (message.numChickens != null && Object.hasOwnProperty.call(message, "numChickens"))
                    writer.uint32(/* id 6, wireType 0 =*/48).uint64(message.numChickens);
                if (message.numChickensUnsettled != null && Object.hasOwnProperty.call(message, "numChickensUnsettled"))
                    writer.uint32(/* id 7, wireType 0 =*/56).uint64(message.numChickensUnsettled);
                if (message.numChickensRunning != null && Object.hasOwnProperty.call(message, "numChickensRunning"))
                    writer.uint32(/* id 8, wireType 0 =*/64).uint64(message.numChickensRunning);
                if (message.eggsLaid != null && Object.hasOwnProperty.call(message, "eggsLaid"))
                    writer.uint32(/* id 9, wireType 1 =*/73).double(message.eggsLaid);
                if (message.eggsPaidFor != null && Object.hasOwnProperty.call(message, "eggsPaidFor"))
                    writer.uint32(/* id 10, wireType 1 =*/81).double(message.eggsPaidFor);
                if (message.silosOwned != null && Object.hasOwnProperty.call(message, "silosOwned"))
                    writer.uint32(/* id 11, wireType 0 =*/88).uint32(message.silosOwned);
                if (message.habs != null && message.habs.length)
                    for (let i = 0; i < message.habs.length; ++i)
                        writer.uint32(/* id 12, wireType 0 =*/96).uint32(message.habs[i]);
                if (message.habPopulation != null && message.habPopulation.length)
                    for (let i = 0; i < message.habPopulation.length; ++i)
                        writer.uint32(/* id 13, wireType 0 =*/104).uint64(message.habPopulation[i]);
                if (message.habPopulationIndound != null && message.habPopulationIndound.length)
                    for (let i = 0; i < message.habPopulationIndound.length; ++i)
                        writer.uint32(/* id 14, wireType 0 =*/112).uint64(message.habPopulationIndound[i]);
                if (message.habIncubatorPopuplation != null && message.habIncubatorPopuplation.length)
                    for (let i = 0; i < message.habIncubatorPopuplation.length; ++i)
                        writer.uint32(/* id 15, wireType 1 =*/121).double(message.habIncubatorPopuplation[i]);
                if (message.hatcheryPopulation != null && Object.hasOwnProperty.call(message, "hatcheryPopulation"))
                    writer.uint32(/* id 16, wireType 1 =*/129).double(message.hatcheryPopulation);
                if (message.vehicles != null && message.vehicles.length)
                    for (let i = 0; i < message.vehicles.length; ++i)
                        writer.uint32(/* id 17, wireType 0 =*/136).uint32(message.vehicles[i]);
                if (message.commonResearch != null && message.commonResearch.length)
                    for (let i = 0; i < message.commonResearch.length; ++i)
                        $root.ei.Backup.ResearchItem.encode(message.commonResearch[i], writer.uint32(/* id 18, wireType 2 =*/146).fork()).ldelim();
                if (message.farmType != null && Object.hasOwnProperty.call(message, "farmType"))
                    writer.uint32(/* id 19, wireType 0 =*/152).int32(message.farmType);
                if (message.contractId != null && Object.hasOwnProperty.call(message, "contractId"))
                    writer.uint32(/* id 20, wireType 2 =*/162).string(message.contractId);
                if (message.trainLength != null && message.trainLength.length)
                    for (let i = 0; i < message.trainLength.length; ++i)
                        writer.uint32(/* id 21, wireType 0 =*/168).uint32(message.trainLength[i]);
                if (message.activeBoosts != null && message.activeBoosts.length)
                    for (let i = 0; i < message.activeBoosts.length; ++i)
                        $root.ei.Backup.ActiveBoost.encode(message.activeBoosts[i], writer.uint32(/* id 22, wireType 2 =*/178).fork()).ldelim();
                if (message.timeCheatsDetected != null && Object.hasOwnProperty.call(message, "timeCheatsDetected"))
                    writer.uint32(/* id 23, wireType 0 =*/184).uint32(message.timeCheatsDetected);
                if (message.timeCheatDebt != null && Object.hasOwnProperty.call(message, "timeCheatDebt"))
                    writer.uint32(/* id 24, wireType 1 =*/193).double(message.timeCheatDebt);
                if (message.boostTokensReceived != null && Object.hasOwnProperty.call(message, "boostTokensReceived"))
                    writer.uint32(/* id 25, wireType 0 =*/200).uint32(message.boostTokensReceived);
                if (message.boostTokensSpent != null && Object.hasOwnProperty.call(message, "boostTokensSpent"))
                    writer.uint32(/* id 26, wireType 0 =*/208).uint32(message.boostTokensSpent);
                if (message.unclaimedBoostTokens != null && Object.hasOwnProperty.call(message, "unclaimedBoostTokens"))
                    writer.uint32(/* id 27, wireType 0 =*/216).uint32(message.unclaimedBoostTokens);
                if (message.boostTokensGiven != null && Object.hasOwnProperty.call(message, "boostTokensGiven"))
                    writer.uint32(/* id 28, wireType 0 =*/224).uint32(message.boostTokensGiven);
                if (message.gametimeUntilNextBoostToken != null && Object.hasOwnProperty.call(message, "gametimeUntilNextBoostToken"))
                    writer.uint32(/* id 29, wireType 1 =*/233).double(message.gametimeUntilNextBoostToken);
                if (message.eggsShipped != null && Object.hasOwnProperty.call(message, "eggsShipped"))
                    writer.uint32(/* id 30, wireType 1 =*/241).double(message.eggsShipped);
                return writer;
            };

            /**
             * Encodes the specified Simulation message, length delimited. Does not implicitly {@link ei.Backup.Simulation.verify|verify} messages.
             * @function encodeDelimited
             * @memberof ei.Backup.Simulation
             * @static
             * @param {ei.Backup.ISimulation} message Simulation message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Simulation.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Simulation message from the specified reader or buffer.
             * @function decode
             * @memberof ei.Backup.Simulation
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {ei.Backup.Simulation} Simulation
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Simulation.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ei.Backup.Simulation();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.eggType = reader.int32();
                        break;
                    case 19:
                        message.farmType = reader.int32();
                        break;
                    case 20:
                        message.contractId = reader.string();
                        break;
                    case 2:
                        message.cashEarned = reader.double();
                        break;
                    case 3:
                        message.cashSpent = reader.double();
                        break;
                    case 4:
                        message.unclaimedCash = reader.double();
                        break;
                    case 5:
                        message.lastStepTime = reader.double();
                        break;
                    case 6:
                        message.numChickens = reader.uint64();
                        break;
                    case 7:
                        message.numChickensUnsettled = reader.uint64();
                        break;
                    case 8:
                        message.numChickensRunning = reader.uint64();
                        break;
                    case 9:
                        message.eggsLaid = reader.double();
                        break;
                    case 30:
                        message.eggsShipped = reader.double();
                        break;
                    case 10:
                        message.eggsPaidFor = reader.double();
                        break;
                    case 11:
                        message.silosOwned = reader.uint32();
                        break;
                    case 12:
                        if (!(message.habs && message.habs.length))
                            message.habs = [];
                        if ((tag & 7) === 2) {
                            let end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.habs.push(reader.uint32());
                        } else
                            message.habs.push(reader.uint32());
                        break;
                    case 13:
                        if (!(message.habPopulation && message.habPopulation.length))
                            message.habPopulation = [];
                        if ((tag & 7) === 2) {
                            let end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.habPopulation.push(reader.uint64());
                        } else
                            message.habPopulation.push(reader.uint64());
                        break;
                    case 14:
                        if (!(message.habPopulationIndound && message.habPopulationIndound.length))
                            message.habPopulationIndound = [];
                        if ((tag & 7) === 2) {
                            let end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.habPopulationIndound.push(reader.uint64());
                        } else
                            message.habPopulationIndound.push(reader.uint64());
                        break;
                    case 15:
                        if (!(message.habIncubatorPopuplation && message.habIncubatorPopuplation.length))
                            message.habIncubatorPopuplation = [];
                        if ((tag & 7) === 2) {
                            let end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.habIncubatorPopuplation.push(reader.double());
                        } else
                            message.habIncubatorPopuplation.push(reader.double());
                        break;
                    case 16:
                        message.hatcheryPopulation = reader.double();
                        break;
                    case 17:
                        if (!(message.vehicles && message.vehicles.length))
                            message.vehicles = [];
                        if ((tag & 7) === 2) {
                            let end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.vehicles.push(reader.uint32());
                        } else
                            message.vehicles.push(reader.uint32());
                        break;
                    case 21:
                        if (!(message.trainLength && message.trainLength.length))
                            message.trainLength = [];
                        if ((tag & 7) === 2) {
                            let end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.trainLength.push(reader.uint32());
                        } else
                            message.trainLength.push(reader.uint32());
                        break;
                    case 18:
                        if (!(message.commonResearch && message.commonResearch.length))
                            message.commonResearch = [];
                        message.commonResearch.push($root.ei.Backup.ResearchItem.decode(reader, reader.uint32()));
                        break;
                    case 22:
                        if (!(message.activeBoosts && message.activeBoosts.length))
                            message.activeBoosts = [];
                        message.activeBoosts.push($root.ei.Backup.ActiveBoost.decode(reader, reader.uint32()));
                        break;
                    case 23:
                        message.timeCheatsDetected = reader.uint32();
                        break;
                    case 24:
                        message.timeCheatDebt = reader.double();
                        break;
                    case 25:
                        message.boostTokensReceived = reader.uint32();
                        break;
                    case 26:
                        message.boostTokensSpent = reader.uint32();
                        break;
                    case 28:
                        message.boostTokensGiven = reader.uint32();
                        break;
                    case 27:
                        message.unclaimedBoostTokens = reader.uint32();
                        break;
                    case 29:
                        message.gametimeUntilNextBoostToken = reader.double();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Simulation message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof ei.Backup.Simulation
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {ei.Backup.Simulation} Simulation
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Simulation.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Simulation message.
             * @function verify
             * @memberof ei.Backup.Simulation
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Simulation.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.eggType != null && message.hasOwnProperty("eggType"))
                    switch (message.eggType) {
                    default:
                        return "eggType: enum value expected";
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                    case 8:
                    case 9:
                    case 10:
                    case 11:
                    case 12:
                    case 13:
                    case 14:
                    case 15:
                    case 16:
                    case 17:
                    case 18:
                    case 19:
                    case 100:
                    case 101:
                    case 102:
                    case 103:
                    case 104:
                    case 1000:
                        break;
                    }
                if (message.farmType != null && message.hasOwnProperty("farmType"))
                    switch (message.farmType) {
                    default:
                        return "farmType: enum value expected";
                    case 1:
                    case 2:
                    case 3:
                        break;
                    }
                if (message.contractId != null && message.hasOwnProperty("contractId"))
                    if (!$util.isString(message.contractId))
                        return "contractId: string expected";
                if (message.cashEarned != null && message.hasOwnProperty("cashEarned"))
                    if (typeof message.cashEarned !== "number")
                        return "cashEarned: number expected";
                if (message.cashSpent != null && message.hasOwnProperty("cashSpent"))
                    if (typeof message.cashSpent !== "number")
                        return "cashSpent: number expected";
                if (message.unclaimedCash != null && message.hasOwnProperty("unclaimedCash"))
                    if (typeof message.unclaimedCash !== "number")
                        return "unclaimedCash: number expected";
                if (message.lastStepTime != null && message.hasOwnProperty("lastStepTime"))
                    if (typeof message.lastStepTime !== "number")
                        return "lastStepTime: number expected";
                if (message.numChickens != null && message.hasOwnProperty("numChickens"))
                    if (!$util.isInteger(message.numChickens) && !(message.numChickens && $util.isInteger(message.numChickens.low) && $util.isInteger(message.numChickens.high)))
                        return "numChickens: integer|Long expected";
                if (message.numChickensUnsettled != null && message.hasOwnProperty("numChickensUnsettled"))
                    if (!$util.isInteger(message.numChickensUnsettled) && !(message.numChickensUnsettled && $util.isInteger(message.numChickensUnsettled.low) && $util.isInteger(message.numChickensUnsettled.high)))
                        return "numChickensUnsettled: integer|Long expected";
                if (message.numChickensRunning != null && message.hasOwnProperty("numChickensRunning"))
                    if (!$util.isInteger(message.numChickensRunning) && !(message.numChickensRunning && $util.isInteger(message.numChickensRunning.low) && $util.isInteger(message.numChickensRunning.high)))
                        return "numChickensRunning: integer|Long expected";
                if (message.eggsLaid != null && message.hasOwnProperty("eggsLaid"))
                    if (typeof message.eggsLaid !== "number")
                        return "eggsLaid: number expected";
                if (message.eggsShipped != null && message.hasOwnProperty("eggsShipped"))
                    if (typeof message.eggsShipped !== "number")
                        return "eggsShipped: number expected";
                if (message.eggsPaidFor != null && message.hasOwnProperty("eggsPaidFor"))
                    if (typeof message.eggsPaidFor !== "number")
                        return "eggsPaidFor: number expected";
                if (message.silosOwned != null && message.hasOwnProperty("silosOwned"))
                    if (!$util.isInteger(message.silosOwned))
                        return "silosOwned: integer expected";
                if (message.habs != null && message.hasOwnProperty("habs")) {
                    if (!Array.isArray(message.habs))
                        return "habs: array expected";
                    for (let i = 0; i < message.habs.length; ++i)
                        if (!$util.isInteger(message.habs[i]))
                            return "habs: integer[] expected";
                }
                if (message.habPopulation != null && message.hasOwnProperty("habPopulation")) {
                    if (!Array.isArray(message.habPopulation))
                        return "habPopulation: array expected";
                    for (let i = 0; i < message.habPopulation.length; ++i)
                        if (!$util.isInteger(message.habPopulation[i]) && !(message.habPopulation[i] && $util.isInteger(message.habPopulation[i].low) && $util.isInteger(message.habPopulation[i].high)))
                            return "habPopulation: integer|Long[] expected";
                }
                if (message.habPopulationIndound != null && message.hasOwnProperty("habPopulationIndound")) {
                    if (!Array.isArray(message.habPopulationIndound))
                        return "habPopulationIndound: array expected";
                    for (let i = 0; i < message.habPopulationIndound.length; ++i)
                        if (!$util.isInteger(message.habPopulationIndound[i]) && !(message.habPopulationIndound[i] && $util.isInteger(message.habPopulationIndound[i].low) && $util.isInteger(message.habPopulationIndound[i].high)))
                            return "habPopulationIndound: integer|Long[] expected";
                }
                if (message.habIncubatorPopuplation != null && message.hasOwnProperty("habIncubatorPopuplation")) {
                    if (!Array.isArray(message.habIncubatorPopuplation))
                        return "habIncubatorPopuplation: array expected";
                    for (let i = 0; i < message.habIncubatorPopuplation.length; ++i)
                        if (typeof message.habIncubatorPopuplation[i] !== "number")
                            return "habIncubatorPopuplation: number[] expected";
                }
                if (message.hatcheryPopulation != null && message.hasOwnProperty("hatcheryPopulation"))
                    if (typeof message.hatcheryPopulation !== "number")
                        return "hatcheryPopulation: number expected";
                if (message.vehicles != null && message.hasOwnProperty("vehicles")) {
                    if (!Array.isArray(message.vehicles))
                        return "vehicles: array expected";
                    for (let i = 0; i < message.vehicles.length; ++i)
                        if (!$util.isInteger(message.vehicles[i]))
                            return "vehicles: integer[] expected";
                }
                if (message.trainLength != null && message.hasOwnProperty("trainLength")) {
                    if (!Array.isArray(message.trainLength))
                        return "trainLength: array expected";
                    for (let i = 0; i < message.trainLength.length; ++i)
                        if (!$util.isInteger(message.trainLength[i]))
                            return "trainLength: integer[] expected";
                }
                if (message.commonResearch != null && message.hasOwnProperty("commonResearch")) {
                    if (!Array.isArray(message.commonResearch))
                        return "commonResearch: array expected";
                    for (let i = 0; i < message.commonResearch.length; ++i) {
                        let error = $root.ei.Backup.ResearchItem.verify(message.commonResearch[i]);
                        if (error)
                            return "commonResearch." + error;
                    }
                }
                if (message.activeBoosts != null && message.hasOwnProperty("activeBoosts")) {
                    if (!Array.isArray(message.activeBoosts))
                        return "activeBoosts: array expected";
                    for (let i = 0; i < message.activeBoosts.length; ++i) {
                        let error = $root.ei.Backup.ActiveBoost.verify(message.activeBoosts[i]);
                        if (error)
                            return "activeBoosts." + error;
                    }
                }
                if (message.timeCheatsDetected != null && message.hasOwnProperty("timeCheatsDetected"))
                    if (!$util.isInteger(message.timeCheatsDetected))
                        return "timeCheatsDetected: integer expected";
                if (message.timeCheatDebt != null && message.hasOwnProperty("timeCheatDebt"))
                    if (typeof message.timeCheatDebt !== "number")
                        return "timeCheatDebt: number expected";
                if (message.boostTokensReceived != null && message.hasOwnProperty("boostTokensReceived"))
                    if (!$util.isInteger(message.boostTokensReceived))
                        return "boostTokensReceived: integer expected";
                if (message.boostTokensSpent != null && message.hasOwnProperty("boostTokensSpent"))
                    if (!$util.isInteger(message.boostTokensSpent))
                        return "boostTokensSpent: integer expected";
                if (message.boostTokensGiven != null && message.hasOwnProperty("boostTokensGiven"))
                    if (!$util.isInteger(message.boostTokensGiven))
                        return "boostTokensGiven: integer expected";
                if (message.unclaimedBoostTokens != null && message.hasOwnProperty("unclaimedBoostTokens"))
                    if (!$util.isInteger(message.unclaimedBoostTokens))
                        return "unclaimedBoostTokens: integer expected";
                if (message.gametimeUntilNextBoostToken != null && message.hasOwnProperty("gametimeUntilNextBoostToken"))
                    if (typeof message.gametimeUntilNextBoostToken !== "number")
                        return "gametimeUntilNextBoostToken: number expected";
                return null;
            };

            /**
             * Creates a Simulation message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof ei.Backup.Simulation
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {ei.Backup.Simulation} Simulation
             */
            Simulation.fromObject = function fromObject(object) {
                if (object instanceof $root.ei.Backup.Simulation)
                    return object;
                let message = new $root.ei.Backup.Simulation();
                switch (object.eggType) {
                case "EDIBLE":
                case 1:
                    message.eggType = 1;
                    break;
                case "SUPERFOOD":
                case 2:
                    message.eggType = 2;
                    break;
                case "MEDICAL":
                case 3:
                    message.eggType = 3;
                    break;
                case "ROCKET_FUEL":
                case 4:
                    message.eggType = 4;
                    break;
                case "SUPER_MATERIAL":
                case 5:
                    message.eggType = 5;
                    break;
                case "FUSION":
                case 6:
                    message.eggType = 6;
                    break;
                case "QUANTUM":
                case 7:
                    message.eggType = 7;
                    break;
                case "IMMORTALITY":
                case 8:
                    message.eggType = 8;
                    break;
                case "TACHYON":
                case 9:
                    message.eggType = 9;
                    break;
                case "GRAVITON":
                case 10:
                    message.eggType = 10;
                    break;
                case "DILITHIUM":
                case 11:
                    message.eggType = 11;
                    break;
                case "PRODIGY":
                case 12:
                    message.eggType = 12;
                    break;
                case "TERRAFORM":
                case 13:
                    message.eggType = 13;
                    break;
                case "ANTIMATTER":
                case 14:
                    message.eggType = 14;
                    break;
                case "DARK_MATTER":
                case 15:
                    message.eggType = 15;
                    break;
                case "AI":
                case 16:
                    message.eggType = 16;
                    break;
                case "NEBULA":
                case 17:
                    message.eggType = 17;
                    break;
                case "UNIVERSE":
                case 18:
                    message.eggType = 18;
                    break;
                case "ENLIGHTENMENT":
                case 19:
                    message.eggType = 19;
                    break;
                case "CHOCOLATE":
                case 100:
                    message.eggType = 100;
                    break;
                case "EASTER":
                case 101:
                    message.eggType = 101;
                    break;
                case "WATERBALLOON":
                case 102:
                    message.eggType = 102;
                    break;
                case "FIREWORK":
                case 103:
                    message.eggType = 103;
                    break;
                case "PUMPKIN":
                case 104:
                    message.eggType = 104;
                    break;
                case "UNKNOWN":
                case 1000:
                    message.eggType = 1000;
                    break;
                }
                switch (object.farmType) {
                case "EMPTY":
                case 1:
                    message.farmType = 1;
                    break;
                case "HOME":
                case 2:
                    message.farmType = 2;
                    break;
                case "CONTRACT":
                case 3:
                    message.farmType = 3;
                    break;
                }
                if (object.contractId != null)
                    message.contractId = String(object.contractId);
                if (object.cashEarned != null)
                    message.cashEarned = Number(object.cashEarned);
                if (object.cashSpent != null)
                    message.cashSpent = Number(object.cashSpent);
                if (object.unclaimedCash != null)
                    message.unclaimedCash = Number(object.unclaimedCash);
                if (object.lastStepTime != null)
                    message.lastStepTime = Number(object.lastStepTime);
                if (object.numChickens != null)
                    if ($util.Long)
                        (message.numChickens = $util.Long.fromValue(object.numChickens)).unsigned = true;
                    else if (typeof object.numChickens === "string")
                        message.numChickens = parseInt(object.numChickens, 10);
                    else if (typeof object.numChickens === "number")
                        message.numChickens = object.numChickens;
                    else if (typeof object.numChickens === "object")
                        message.numChickens = new $util.LongBits(object.numChickens.low >>> 0, object.numChickens.high >>> 0).toNumber(true);
                if (object.numChickensUnsettled != null)
                    if ($util.Long)
                        (message.numChickensUnsettled = $util.Long.fromValue(object.numChickensUnsettled)).unsigned = true;
                    else if (typeof object.numChickensUnsettled === "string")
                        message.numChickensUnsettled = parseInt(object.numChickensUnsettled, 10);
                    else if (typeof object.numChickensUnsettled === "number")
                        message.numChickensUnsettled = object.numChickensUnsettled;
                    else if (typeof object.numChickensUnsettled === "object")
                        message.numChickensUnsettled = new $util.LongBits(object.numChickensUnsettled.low >>> 0, object.numChickensUnsettled.high >>> 0).toNumber(true);
                if (object.numChickensRunning != null)
                    if ($util.Long)
                        (message.numChickensRunning = $util.Long.fromValue(object.numChickensRunning)).unsigned = true;
                    else if (typeof object.numChickensRunning === "string")
                        message.numChickensRunning = parseInt(object.numChickensRunning, 10);
                    else if (typeof object.numChickensRunning === "number")
                        message.numChickensRunning = object.numChickensRunning;
                    else if (typeof object.numChickensRunning === "object")
                        message.numChickensRunning = new $util.LongBits(object.numChickensRunning.low >>> 0, object.numChickensRunning.high >>> 0).toNumber(true);
                if (object.eggsLaid != null)
                    message.eggsLaid = Number(object.eggsLaid);
                if (object.eggsShipped != null)
                    message.eggsShipped = Number(object.eggsShipped);
                if (object.eggsPaidFor != null)
                    message.eggsPaidFor = Number(object.eggsPaidFor);
                if (object.silosOwned != null)
                    message.silosOwned = object.silosOwned >>> 0;
                if (object.habs) {
                    if (!Array.isArray(object.habs))
                        throw TypeError(".ei.Backup.Simulation.habs: array expected");
                    message.habs = [];
                    for (let i = 0; i < object.habs.length; ++i)
                        message.habs[i] = object.habs[i] >>> 0;
                }
                if (object.habPopulation) {
                    if (!Array.isArray(object.habPopulation))
                        throw TypeError(".ei.Backup.Simulation.habPopulation: array expected");
                    message.habPopulation = [];
                    for (let i = 0; i < object.habPopulation.length; ++i)
                        if ($util.Long)
                            (message.habPopulation[i] = $util.Long.fromValue(object.habPopulation[i])).unsigned = true;
                        else if (typeof object.habPopulation[i] === "string")
                            message.habPopulation[i] = parseInt(object.habPopulation[i], 10);
                        else if (typeof object.habPopulation[i] === "number")
                            message.habPopulation[i] = object.habPopulation[i];
                        else if (typeof object.habPopulation[i] === "object")
                            message.habPopulation[i] = new $util.LongBits(object.habPopulation[i].low >>> 0, object.habPopulation[i].high >>> 0).toNumber(true);
                }
                if (object.habPopulationIndound) {
                    if (!Array.isArray(object.habPopulationIndound))
                        throw TypeError(".ei.Backup.Simulation.habPopulationIndound: array expected");
                    message.habPopulationIndound = [];
                    for (let i = 0; i < object.habPopulationIndound.length; ++i)
                        if ($util.Long)
                            (message.habPopulationIndound[i] = $util.Long.fromValue(object.habPopulationIndound[i])).unsigned = true;
                        else if (typeof object.habPopulationIndound[i] === "string")
                            message.habPopulationIndound[i] = parseInt(object.habPopulationIndound[i], 10);
                        else if (typeof object.habPopulationIndound[i] === "number")
                            message.habPopulationIndound[i] = object.habPopulationIndound[i];
                        else if (typeof object.habPopulationIndound[i] === "object")
                            message.habPopulationIndound[i] = new $util.LongBits(object.habPopulationIndound[i].low >>> 0, object.habPopulationIndound[i].high >>> 0).toNumber(true);
                }
                if (object.habIncubatorPopuplation) {
                    if (!Array.isArray(object.habIncubatorPopuplation))
                        throw TypeError(".ei.Backup.Simulation.habIncubatorPopuplation: array expected");
                    message.habIncubatorPopuplation = [];
                    for (let i = 0; i < object.habIncubatorPopuplation.length; ++i)
                        message.habIncubatorPopuplation[i] = Number(object.habIncubatorPopuplation[i]);
                }
                if (object.hatcheryPopulation != null)
                    message.hatcheryPopulation = Number(object.hatcheryPopulation);
                if (object.vehicles) {
                    if (!Array.isArray(object.vehicles))
                        throw TypeError(".ei.Backup.Simulation.vehicles: array expected");
                    message.vehicles = [];
                    for (let i = 0; i < object.vehicles.length; ++i)
                        message.vehicles[i] = object.vehicles[i] >>> 0;
                }
                if (object.trainLength) {
                    if (!Array.isArray(object.trainLength))
                        throw TypeError(".ei.Backup.Simulation.trainLength: array expected");
                    message.trainLength = [];
                    for (let i = 0; i < object.trainLength.length; ++i)
                        message.trainLength[i] = object.trainLength[i] >>> 0;
                }
                if (object.commonResearch) {
                    if (!Array.isArray(object.commonResearch))
                        throw TypeError(".ei.Backup.Simulation.commonResearch: array expected");
                    message.commonResearch = [];
                    for (let i = 0; i < object.commonResearch.length; ++i) {
                        if (typeof object.commonResearch[i] !== "object")
                            throw TypeError(".ei.Backup.Simulation.commonResearch: object expected");
                        message.commonResearch[i] = $root.ei.Backup.ResearchItem.fromObject(object.commonResearch[i]);
                    }
                }
                if (object.activeBoosts) {
                    if (!Array.isArray(object.activeBoosts))
                        throw TypeError(".ei.Backup.Simulation.activeBoosts: array expected");
                    message.activeBoosts = [];
                    for (let i = 0; i < object.activeBoosts.length; ++i) {
                        if (typeof object.activeBoosts[i] !== "object")
                            throw TypeError(".ei.Backup.Simulation.activeBoosts: object expected");
                        message.activeBoosts[i] = $root.ei.Backup.ActiveBoost.fromObject(object.activeBoosts[i]);
                    }
                }
                if (object.timeCheatsDetected != null)
                    message.timeCheatsDetected = object.timeCheatsDetected >>> 0;
                if (object.timeCheatDebt != null)
                    message.timeCheatDebt = Number(object.timeCheatDebt);
                if (object.boostTokensReceived != null)
                    message.boostTokensReceived = object.boostTokensReceived >>> 0;
                if (object.boostTokensSpent != null)
                    message.boostTokensSpent = object.boostTokensSpent >>> 0;
                if (object.boostTokensGiven != null)
                    message.boostTokensGiven = object.boostTokensGiven >>> 0;
                if (object.unclaimedBoostTokens != null)
                    message.unclaimedBoostTokens = object.unclaimedBoostTokens >>> 0;
                if (object.gametimeUntilNextBoostToken != null)
                    message.gametimeUntilNextBoostToken = Number(object.gametimeUntilNextBoostToken);
                return message;
            };

            /**
             * Creates a plain object from a Simulation message. Also converts values to other types if specified.
             * @function toObject
             * @memberof ei.Backup.Simulation
             * @static
             * @param {ei.Backup.Simulation} message Simulation
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Simulation.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults) {
                    object.habs = [];
                    object.habPopulation = [];
                    object.habPopulationIndound = [];
                    object.habIncubatorPopuplation = [];
                    object.vehicles = [];
                    object.commonResearch = [];
                    object.trainLength = [];
                    object.activeBoosts = [];
                }
                if (options.defaults) {
                    object.eggType = options.enums === String ? "EDIBLE" : 1;
                    object.cashEarned = 0;
                    object.cashSpent = 0;
                    object.unclaimedCash = 0;
                    object.lastStepTime = 0;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.numChickens = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.numChickens = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.numChickensUnsettled = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.numChickensUnsettled = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.numChickensRunning = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.numChickensRunning = options.longs === String ? "0" : 0;
                    object.eggsLaid = 0;
                    object.eggsPaidFor = 0;
                    object.silosOwned = 0;
                    object.hatcheryPopulation = 0;
                    object.farmType = options.enums === String ? "EMPTY" : 1;
                    object.contractId = "";
                    object.timeCheatsDetected = 0;
                    object.timeCheatDebt = 0;
                    object.boostTokensReceived = 0;
                    object.boostTokensSpent = 0;
                    object.unclaimedBoostTokens = 0;
                    object.boostTokensGiven = 0;
                    object.gametimeUntilNextBoostToken = 0;
                    object.eggsShipped = 0;
                }
                if (message.eggType != null && message.hasOwnProperty("eggType"))
                    object.eggType = options.enums === String ? $root.ei.Egg[message.eggType] : message.eggType;
                if (message.cashEarned != null && message.hasOwnProperty("cashEarned"))
                    object.cashEarned = options.json && !isFinite(message.cashEarned) ? String(message.cashEarned) : message.cashEarned;
                if (message.cashSpent != null && message.hasOwnProperty("cashSpent"))
                    object.cashSpent = options.json && !isFinite(message.cashSpent) ? String(message.cashSpent) : message.cashSpent;
                if (message.unclaimedCash != null && message.hasOwnProperty("unclaimedCash"))
                    object.unclaimedCash = options.json && !isFinite(message.unclaimedCash) ? String(message.unclaimedCash) : message.unclaimedCash;
                if (message.lastStepTime != null && message.hasOwnProperty("lastStepTime"))
                    object.lastStepTime = options.json && !isFinite(message.lastStepTime) ? String(message.lastStepTime) : message.lastStepTime;
                if (message.numChickens != null && message.hasOwnProperty("numChickens"))
                    if (typeof message.numChickens === "number")
                        object.numChickens = options.longs === String ? String(message.numChickens) : message.numChickens;
                    else
                        object.numChickens = options.longs === String ? $util.Long.prototype.toString.call(message.numChickens) : options.longs === Number ? new $util.LongBits(message.numChickens.low >>> 0, message.numChickens.high >>> 0).toNumber(true) : message.numChickens;
                if (message.numChickensUnsettled != null && message.hasOwnProperty("numChickensUnsettled"))
                    if (typeof message.numChickensUnsettled === "number")
                        object.numChickensUnsettled = options.longs === String ? String(message.numChickensUnsettled) : message.numChickensUnsettled;
                    else
                        object.numChickensUnsettled = options.longs === String ? $util.Long.prototype.toString.call(message.numChickensUnsettled) : options.longs === Number ? new $util.LongBits(message.numChickensUnsettled.low >>> 0, message.numChickensUnsettled.high >>> 0).toNumber(true) : message.numChickensUnsettled;
                if (message.numChickensRunning != null && message.hasOwnProperty("numChickensRunning"))
                    if (typeof message.numChickensRunning === "number")
                        object.numChickensRunning = options.longs === String ? String(message.numChickensRunning) : message.numChickensRunning;
                    else
                        object.numChickensRunning = options.longs === String ? $util.Long.prototype.toString.call(message.numChickensRunning) : options.longs === Number ? new $util.LongBits(message.numChickensRunning.low >>> 0, message.numChickensRunning.high >>> 0).toNumber(true) : message.numChickensRunning;
                if (message.eggsLaid != null && message.hasOwnProperty("eggsLaid"))
                    object.eggsLaid = options.json && !isFinite(message.eggsLaid) ? String(message.eggsLaid) : message.eggsLaid;
                if (message.eggsPaidFor != null && message.hasOwnProperty("eggsPaidFor"))
                    object.eggsPaidFor = options.json && !isFinite(message.eggsPaidFor) ? String(message.eggsPaidFor) : message.eggsPaidFor;
                if (message.silosOwned != null && message.hasOwnProperty("silosOwned"))
                    object.silosOwned = message.silosOwned;
                if (message.habs && message.habs.length) {
                    object.habs = [];
                    for (let j = 0; j < message.habs.length; ++j)
                        object.habs[j] = message.habs[j];
                }
                if (message.habPopulation && message.habPopulation.length) {
                    object.habPopulation = [];
                    for (let j = 0; j < message.habPopulation.length; ++j)
                        if (typeof message.habPopulation[j] === "number")
                            object.habPopulation[j] = options.longs === String ? String(message.habPopulation[j]) : message.habPopulation[j];
                        else
                            object.habPopulation[j] = options.longs === String ? $util.Long.prototype.toString.call(message.habPopulation[j]) : options.longs === Number ? new $util.LongBits(message.habPopulation[j].low >>> 0, message.habPopulation[j].high >>> 0).toNumber(true) : message.habPopulation[j];
                }
                if (message.habPopulationIndound && message.habPopulationIndound.length) {
                    object.habPopulationIndound = [];
                    for (let j = 0; j < message.habPopulationIndound.length; ++j)
                        if (typeof message.habPopulationIndound[j] === "number")
                            object.habPopulationIndound[j] = options.longs === String ? String(message.habPopulationIndound[j]) : message.habPopulationIndound[j];
                        else
                            object.habPopulationIndound[j] = options.longs === String ? $util.Long.prototype.toString.call(message.habPopulationIndound[j]) : options.longs === Number ? new $util.LongBits(message.habPopulationIndound[j].low >>> 0, message.habPopulationIndound[j].high >>> 0).toNumber(true) : message.habPopulationIndound[j];
                }
                if (message.habIncubatorPopuplation && message.habIncubatorPopuplation.length) {
                    object.habIncubatorPopuplation = [];
                    for (let j = 0; j < message.habIncubatorPopuplation.length; ++j)
                        object.habIncubatorPopuplation[j] = options.json && !isFinite(message.habIncubatorPopuplation[j]) ? String(message.habIncubatorPopuplation[j]) : message.habIncubatorPopuplation[j];
                }
                if (message.hatcheryPopulation != null && message.hasOwnProperty("hatcheryPopulation"))
                    object.hatcheryPopulation = options.json && !isFinite(message.hatcheryPopulation) ? String(message.hatcheryPopulation) : message.hatcheryPopulation;
                if (message.vehicles && message.vehicles.length) {
                    object.vehicles = [];
                    for (let j = 0; j < message.vehicles.length; ++j)
                        object.vehicles[j] = message.vehicles[j];
                }
                if (message.commonResearch && message.commonResearch.length) {
                    object.commonResearch = [];
                    for (let j = 0; j < message.commonResearch.length; ++j)
                        object.commonResearch[j] = $root.ei.Backup.ResearchItem.toObject(message.commonResearch[j], options);
                }
                if (message.farmType != null && message.hasOwnProperty("farmType"))
                    object.farmType = options.enums === String ? $root.ei.FarmType[message.farmType] : message.farmType;
                if (message.contractId != null && message.hasOwnProperty("contractId"))
                    object.contractId = message.contractId;
                if (message.trainLength && message.trainLength.length) {
                    object.trainLength = [];
                    for (let j = 0; j < message.trainLength.length; ++j)
                        object.trainLength[j] = message.trainLength[j];
                }
                if (message.activeBoosts && message.activeBoosts.length) {
                    object.activeBoosts = [];
                    for (let j = 0; j < message.activeBoosts.length; ++j)
                        object.activeBoosts[j] = $root.ei.Backup.ActiveBoost.toObject(message.activeBoosts[j], options);
                }
                if (message.timeCheatsDetected != null && message.hasOwnProperty("timeCheatsDetected"))
                    object.timeCheatsDetected = message.timeCheatsDetected;
                if (message.timeCheatDebt != null && message.hasOwnProperty("timeCheatDebt"))
                    object.timeCheatDebt = options.json && !isFinite(message.timeCheatDebt) ? String(message.timeCheatDebt) : message.timeCheatDebt;
                if (message.boostTokensReceived != null && message.hasOwnProperty("boostTokensReceived"))
                    object.boostTokensReceived = message.boostTokensReceived;
                if (message.boostTokensSpent != null && message.hasOwnProperty("boostTokensSpent"))
                    object.boostTokensSpent = message.boostTokensSpent;
                if (message.unclaimedBoostTokens != null && message.hasOwnProperty("unclaimedBoostTokens"))
                    object.unclaimedBoostTokens = message.unclaimedBoostTokens;
                if (message.boostTokensGiven != null && message.hasOwnProperty("boostTokensGiven"))
                    object.boostTokensGiven = message.boostTokensGiven;
                if (message.gametimeUntilNextBoostToken != null && message.hasOwnProperty("gametimeUntilNextBoostToken"))
                    object.gametimeUntilNextBoostToken = options.json && !isFinite(message.gametimeUntilNextBoostToken) ? String(message.gametimeUntilNextBoostToken) : message.gametimeUntilNextBoostToken;
                if (message.eggsShipped != null && message.hasOwnProperty("eggsShipped"))
                    object.eggsShipped = options.json && !isFinite(message.eggsShipped) ? String(message.eggsShipped) : message.eggsShipped;
                return object;
            };

            /**
             * Converts this Simulation to JSON.
             * @function toJSON
             * @memberof ei.Backup.Simulation
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Simulation.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Simulation;
        })();

        Backup.Mission = (function() {

            /**
             * Properties of a Mission.
             * @memberof ei.Backup
             * @interface IMission
             * @property {string|null} [currentMission] Mission currentMission
             * @property {number|null} [referenceValue] Mission referenceValue
             * @property {Array.<string>|null} [currentMissions] Mission currentMissions
             * @property {Array.<ei.Backup.IMissionInfo>|null} [missions] Mission missions
             */

            /**
             * Constructs a new Mission.
             * @memberof ei.Backup
             * @classdesc Represents a Mission.
             * @implements IMission
             * @constructor
             * @param {ei.Backup.IMission=} [properties] Properties to set
             */
            function Mission(properties) {
                this.currentMissions = [];
                this.missions = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Mission currentMission.
             * @member {string} currentMission
             * @memberof ei.Backup.Mission
             * @instance
             */
            Mission.prototype.currentMission = "";

            /**
             * Mission referenceValue.
             * @member {number} referenceValue
             * @memberof ei.Backup.Mission
             * @instance
             */
            Mission.prototype.referenceValue = 0;

            /**
             * Mission currentMissions.
             * @member {Array.<string>} currentMissions
             * @memberof ei.Backup.Mission
             * @instance
             */
            Mission.prototype.currentMissions = $util.emptyArray;

            /**
             * Mission missions.
             * @member {Array.<ei.Backup.IMissionInfo>} missions
             * @memberof ei.Backup.Mission
             * @instance
             */
            Mission.prototype.missions = $util.emptyArray;

            /**
             * Creates a new Mission instance using the specified properties.
             * @function create
             * @memberof ei.Backup.Mission
             * @static
             * @param {ei.Backup.IMission=} [properties] Properties to set
             * @returns {ei.Backup.Mission} Mission instance
             */
            Mission.create = function create(properties) {
                return new Mission(properties);
            };

            /**
             * Encodes the specified Mission message. Does not implicitly {@link ei.Backup.Mission.verify|verify} messages.
             * @function encode
             * @memberof ei.Backup.Mission
             * @static
             * @param {ei.Backup.IMission} message Mission message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Mission.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.currentMission != null && Object.hasOwnProperty.call(message, "currentMission"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.currentMission);
                if (message.referenceValue != null && Object.hasOwnProperty.call(message, "referenceValue"))
                    writer.uint32(/* id 2, wireType 1 =*/17).double(message.referenceValue);
                if (message.missions != null && message.missions.length)
                    for (let i = 0; i < message.missions.length; ++i)
                        $root.ei.Backup.MissionInfo.encode(message.missions[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                if (message.currentMissions != null && message.currentMissions.length)
                    for (let i = 0; i < message.currentMissions.length; ++i)
                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.currentMissions[i]);
                return writer;
            };

            /**
             * Encodes the specified Mission message, length delimited. Does not implicitly {@link ei.Backup.Mission.verify|verify} messages.
             * @function encodeDelimited
             * @memberof ei.Backup.Mission
             * @static
             * @param {ei.Backup.IMission} message Mission message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Mission.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Mission message from the specified reader or buffer.
             * @function decode
             * @memberof ei.Backup.Mission
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {ei.Backup.Mission} Mission
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Mission.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ei.Backup.Mission();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.currentMission = reader.string();
                        break;
                    case 2:
                        message.referenceValue = reader.double();
                        break;
                    case 4:
                        if (!(message.currentMissions && message.currentMissions.length))
                            message.currentMissions = [];
                        message.currentMissions.push(reader.string());
                        break;
                    case 3:
                        if (!(message.missions && message.missions.length))
                            message.missions = [];
                        message.missions.push($root.ei.Backup.MissionInfo.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Mission message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof ei.Backup.Mission
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {ei.Backup.Mission} Mission
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Mission.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Mission message.
             * @function verify
             * @memberof ei.Backup.Mission
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Mission.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.currentMission != null && message.hasOwnProperty("currentMission"))
                    if (!$util.isString(message.currentMission))
                        return "currentMission: string expected";
                if (message.referenceValue != null && message.hasOwnProperty("referenceValue"))
                    if (typeof message.referenceValue !== "number")
                        return "referenceValue: number expected";
                if (message.currentMissions != null && message.hasOwnProperty("currentMissions")) {
                    if (!Array.isArray(message.currentMissions))
                        return "currentMissions: array expected";
                    for (let i = 0; i < message.currentMissions.length; ++i)
                        if (!$util.isString(message.currentMissions[i]))
                            return "currentMissions: string[] expected";
                }
                if (message.missions != null && message.hasOwnProperty("missions")) {
                    if (!Array.isArray(message.missions))
                        return "missions: array expected";
                    for (let i = 0; i < message.missions.length; ++i) {
                        let error = $root.ei.Backup.MissionInfo.verify(message.missions[i]);
                        if (error)
                            return "missions." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a Mission message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof ei.Backup.Mission
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {ei.Backup.Mission} Mission
             */
            Mission.fromObject = function fromObject(object) {
                if (object instanceof $root.ei.Backup.Mission)
                    return object;
                let message = new $root.ei.Backup.Mission();
                if (object.currentMission != null)
                    message.currentMission = String(object.currentMission);
                if (object.referenceValue != null)
                    message.referenceValue = Number(object.referenceValue);
                if (object.currentMissions) {
                    if (!Array.isArray(object.currentMissions))
                        throw TypeError(".ei.Backup.Mission.currentMissions: array expected");
                    message.currentMissions = [];
                    for (let i = 0; i < object.currentMissions.length; ++i)
                        message.currentMissions[i] = String(object.currentMissions[i]);
                }
                if (object.missions) {
                    if (!Array.isArray(object.missions))
                        throw TypeError(".ei.Backup.Mission.missions: array expected");
                    message.missions = [];
                    for (let i = 0; i < object.missions.length; ++i) {
                        if (typeof object.missions[i] !== "object")
                            throw TypeError(".ei.Backup.Mission.missions: object expected");
                        message.missions[i] = $root.ei.Backup.MissionInfo.fromObject(object.missions[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a Mission message. Also converts values to other types if specified.
             * @function toObject
             * @memberof ei.Backup.Mission
             * @static
             * @param {ei.Backup.Mission} message Mission
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Mission.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults) {
                    object.missions = [];
                    object.currentMissions = [];
                }
                if (options.defaults) {
                    object.currentMission = "";
                    object.referenceValue = 0;
                }
                if (message.currentMission != null && message.hasOwnProperty("currentMission"))
                    object.currentMission = message.currentMission;
                if (message.referenceValue != null && message.hasOwnProperty("referenceValue"))
                    object.referenceValue = options.json && !isFinite(message.referenceValue) ? String(message.referenceValue) : message.referenceValue;
                if (message.missions && message.missions.length) {
                    object.missions = [];
                    for (let j = 0; j < message.missions.length; ++j)
                        object.missions[j] = $root.ei.Backup.MissionInfo.toObject(message.missions[j], options);
                }
                if (message.currentMissions && message.currentMissions.length) {
                    object.currentMissions = [];
                    for (let j = 0; j < message.currentMissions.length; ++j)
                        object.currentMissions[j] = message.currentMissions[j];
                }
                return object;
            };

            /**
             * Converts this Mission to JSON.
             * @function toJSON
             * @memberof ei.Backup.Mission
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Mission.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Mission;
        })();

        Backup.Misc = (function() {

            /**
             * Properties of a Misc.
             * @memberof ei.Backup
             * @interface IMisc
             * @property {boolean|null} [chickenBtnPrefBig] Misc chickenBtnPrefBig
             * @property {boolean|null} [freeHatcheryRefillGiven] Misc freeHatcheryRefillGiven
             * @property {number|null} [lastShareFarmValue] Misc lastShareFarmValue
             * @property {number|null} [lastShareSwarmFarmValue] Misc lastShareSwarmFarmValue
             * @property {number|null} [lastShareSwarmSize] Misc lastShareSwarmSize
             * @property {number|Long|null} [lastPrestigeAlertSoulEggs_DEPRECATED] Misc lastPrestigeAlertSoulEggs_DEPRECATED
             * @property {number|Long|null} [friendRank] Misc friendRank
             * @property {number|Long|null} [friendRankPop] Misc friendRankPop
             * @property {number|Long|null} [globalRank] Misc globalRank
             * @property {number|Long|null} [globalRankPop] Misc globalRankPop
             * @property {boolean|null} [trophyAlert] Misc trophyAlert
             * @property {boolean|null} [arAlert] Misc arAlert
             * @property {boolean|null} [contractsAlert] Misc contractsAlert
             * @property {boolean|null} [coopAlert] Misc coopAlert
             * @property {boolean|null} [switchAlert] Misc switchAlert
             * @property {boolean|null} [eggOfProphecyAlert] Misc eggOfProphecyAlert
             * @property {boolean|null} [boostTokenAlert] Misc boostTokenAlert
             * @property {boolean|null} [soulEggAlert] Misc soulEggAlert
             * @property {boolean|null} [backupReminderAlert] Misc backupReminderAlert
             */

            /**
             * Constructs a new Misc.
             * @memberof ei.Backup
             * @classdesc Represents a Misc.
             * @implements IMisc
             * @constructor
             * @param {ei.Backup.IMisc=} [properties] Properties to set
             */
            function Misc(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Misc chickenBtnPrefBig.
             * @member {boolean} chickenBtnPrefBig
             * @memberof ei.Backup.Misc
             * @instance
             */
            Misc.prototype.chickenBtnPrefBig = false;

            /**
             * Misc freeHatcheryRefillGiven.
             * @member {boolean} freeHatcheryRefillGiven
             * @memberof ei.Backup.Misc
             * @instance
             */
            Misc.prototype.freeHatcheryRefillGiven = false;

            /**
             * Misc lastShareFarmValue.
             * @member {number} lastShareFarmValue
             * @memberof ei.Backup.Misc
             * @instance
             */
            Misc.prototype.lastShareFarmValue = 10000000;

            /**
             * Misc lastShareSwarmFarmValue.
             * @member {number} lastShareSwarmFarmValue
             * @memberof ei.Backup.Misc
             * @instance
             */
            Misc.prototype.lastShareSwarmFarmValue = 10000000;

            /**
             * Misc lastShareSwarmSize.
             * @member {number} lastShareSwarmSize
             * @memberof ei.Backup.Misc
             * @instance
             */
            Misc.prototype.lastShareSwarmSize = 140;

            /**
             * Misc lastPrestigeAlertSoulEggs_DEPRECATED.
             * @member {number|Long} lastPrestigeAlertSoulEggs_DEPRECATED
             * @memberof ei.Backup.Misc
             * @instance
             */
            Misc.prototype.lastPrestigeAlertSoulEggs_DEPRECATED = $util.Long ? $util.Long.fromBits(45,0,true) : 45;

            /**
             * Misc friendRank.
             * @member {number|Long} friendRank
             * @memberof ei.Backup.Misc
             * @instance
             */
            Misc.prototype.friendRank = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * Misc friendRankPop.
             * @member {number|Long} friendRankPop
             * @memberof ei.Backup.Misc
             * @instance
             */
            Misc.prototype.friendRankPop = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * Misc globalRank.
             * @member {number|Long} globalRank
             * @memberof ei.Backup.Misc
             * @instance
             */
            Misc.prototype.globalRank = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * Misc globalRankPop.
             * @member {number|Long} globalRankPop
             * @memberof ei.Backup.Misc
             * @instance
             */
            Misc.prototype.globalRankPop = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * Misc trophyAlert.
             * @member {boolean} trophyAlert
             * @memberof ei.Backup.Misc
             * @instance
             */
            Misc.prototype.trophyAlert = false;

            /**
             * Misc arAlert.
             * @member {boolean} arAlert
             * @memberof ei.Backup.Misc
             * @instance
             */
            Misc.prototype.arAlert = false;

            /**
             * Misc contractsAlert.
             * @member {boolean} contractsAlert
             * @memberof ei.Backup.Misc
             * @instance
             */
            Misc.prototype.contractsAlert = false;

            /**
             * Misc coopAlert.
             * @member {boolean} coopAlert
             * @memberof ei.Backup.Misc
             * @instance
             */
            Misc.prototype.coopAlert = false;

            /**
             * Misc switchAlert.
             * @member {boolean} switchAlert
             * @memberof ei.Backup.Misc
             * @instance
             */
            Misc.prototype.switchAlert = false;

            /**
             * Misc eggOfProphecyAlert.
             * @member {boolean} eggOfProphecyAlert
             * @memberof ei.Backup.Misc
             * @instance
             */
            Misc.prototype.eggOfProphecyAlert = false;

            /**
             * Misc boostTokenAlert.
             * @member {boolean} boostTokenAlert
             * @memberof ei.Backup.Misc
             * @instance
             */
            Misc.prototype.boostTokenAlert = false;

            /**
             * Misc soulEggAlert.
             * @member {boolean} soulEggAlert
             * @memberof ei.Backup.Misc
             * @instance
             */
            Misc.prototype.soulEggAlert = false;

            /**
             * Misc backupReminderAlert.
             * @member {boolean} backupReminderAlert
             * @memberof ei.Backup.Misc
             * @instance
             */
            Misc.prototype.backupReminderAlert = false;

            /**
             * Creates a new Misc instance using the specified properties.
             * @function create
             * @memberof ei.Backup.Misc
             * @static
             * @param {ei.Backup.IMisc=} [properties] Properties to set
             * @returns {ei.Backup.Misc} Misc instance
             */
            Misc.create = function create(properties) {
                return new Misc(properties);
            };

            /**
             * Encodes the specified Misc message. Does not implicitly {@link ei.Backup.Misc.verify|verify} messages.
             * @function encode
             * @memberof ei.Backup.Misc
             * @static
             * @param {ei.Backup.IMisc} message Misc message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Misc.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.chickenBtnPrefBig != null && Object.hasOwnProperty.call(message, "chickenBtnPrefBig"))
                    writer.uint32(/* id 1, wireType 0 =*/8).bool(message.chickenBtnPrefBig);
                if (message.freeHatcheryRefillGiven != null && Object.hasOwnProperty.call(message, "freeHatcheryRefillGiven"))
                    writer.uint32(/* id 2, wireType 0 =*/16).bool(message.freeHatcheryRefillGiven);
                if (message.lastShareFarmValue != null && Object.hasOwnProperty.call(message, "lastShareFarmValue"))
                    writer.uint32(/* id 3, wireType 1 =*/25).double(message.lastShareFarmValue);
                if (message.lastShareSwarmFarmValue != null && Object.hasOwnProperty.call(message, "lastShareSwarmFarmValue"))
                    writer.uint32(/* id 4, wireType 1 =*/33).double(message.lastShareSwarmFarmValue);
                if (message.lastShareSwarmSize != null && Object.hasOwnProperty.call(message, "lastShareSwarmSize"))
                    writer.uint32(/* id 5, wireType 1 =*/41).double(message.lastShareSwarmSize);
                if (message.friendRank != null && Object.hasOwnProperty.call(message, "friendRank"))
                    writer.uint32(/* id 6, wireType 0 =*/48).uint64(message.friendRank);
                if (message.friendRankPop != null && Object.hasOwnProperty.call(message, "friendRankPop"))
                    writer.uint32(/* id 7, wireType 0 =*/56).uint64(message.friendRankPop);
                if (message.globalRank != null && Object.hasOwnProperty.call(message, "globalRank"))
                    writer.uint32(/* id 8, wireType 0 =*/64).uint64(message.globalRank);
                if (message.globalRankPop != null && Object.hasOwnProperty.call(message, "globalRankPop"))
                    writer.uint32(/* id 9, wireType 0 =*/72).uint64(message.globalRankPop);
                if (message.lastPrestigeAlertSoulEggs_DEPRECATED != null && Object.hasOwnProperty.call(message, "lastPrestigeAlertSoulEggs_DEPRECATED"))
                    writer.uint32(/* id 10, wireType 0 =*/80).uint64(message.lastPrestigeAlertSoulEggs_DEPRECATED);
                if (message.trophyAlert != null && Object.hasOwnProperty.call(message, "trophyAlert"))
                    writer.uint32(/* id 11, wireType 0 =*/88).bool(message.trophyAlert);
                if (message.arAlert != null && Object.hasOwnProperty.call(message, "arAlert"))
                    writer.uint32(/* id 12, wireType 0 =*/96).bool(message.arAlert);
                if (message.contractsAlert != null && Object.hasOwnProperty.call(message, "contractsAlert"))
                    writer.uint32(/* id 13, wireType 0 =*/104).bool(message.contractsAlert);
                if (message.coopAlert != null && Object.hasOwnProperty.call(message, "coopAlert"))
                    writer.uint32(/* id 14, wireType 0 =*/112).bool(message.coopAlert);
                if (message.switchAlert != null && Object.hasOwnProperty.call(message, "switchAlert"))
                    writer.uint32(/* id 15, wireType 0 =*/120).bool(message.switchAlert);
                if (message.eggOfProphecyAlert != null && Object.hasOwnProperty.call(message, "eggOfProphecyAlert"))
                    writer.uint32(/* id 16, wireType 0 =*/128).bool(message.eggOfProphecyAlert);
                if (message.boostTokenAlert != null && Object.hasOwnProperty.call(message, "boostTokenAlert"))
                    writer.uint32(/* id 17, wireType 0 =*/136).bool(message.boostTokenAlert);
                if (message.soulEggAlert != null && Object.hasOwnProperty.call(message, "soulEggAlert"))
                    writer.uint32(/* id 18, wireType 0 =*/144).bool(message.soulEggAlert);
                if (message.backupReminderAlert != null && Object.hasOwnProperty.call(message, "backupReminderAlert"))
                    writer.uint32(/* id 19, wireType 0 =*/152).bool(message.backupReminderAlert);
                return writer;
            };

            /**
             * Encodes the specified Misc message, length delimited. Does not implicitly {@link ei.Backup.Misc.verify|verify} messages.
             * @function encodeDelimited
             * @memberof ei.Backup.Misc
             * @static
             * @param {ei.Backup.IMisc} message Misc message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Misc.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Misc message from the specified reader or buffer.
             * @function decode
             * @memberof ei.Backup.Misc
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {ei.Backup.Misc} Misc
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Misc.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ei.Backup.Misc();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.chickenBtnPrefBig = reader.bool();
                        break;
                    case 2:
                        message.freeHatcheryRefillGiven = reader.bool();
                        break;
                    case 3:
                        message.lastShareFarmValue = reader.double();
                        break;
                    case 4:
                        message.lastShareSwarmFarmValue = reader.double();
                        break;
                    case 5:
                        message.lastShareSwarmSize = reader.double();
                        break;
                    case 10:
                        message.lastPrestigeAlertSoulEggs_DEPRECATED = reader.uint64();
                        break;
                    case 6:
                        message.friendRank = reader.uint64();
                        break;
                    case 7:
                        message.friendRankPop = reader.uint64();
                        break;
                    case 8:
                        message.globalRank = reader.uint64();
                        break;
                    case 9:
                        message.globalRankPop = reader.uint64();
                        break;
                    case 11:
                        message.trophyAlert = reader.bool();
                        break;
                    case 12:
                        message.arAlert = reader.bool();
                        break;
                    case 13:
                        message.contractsAlert = reader.bool();
                        break;
                    case 14:
                        message.coopAlert = reader.bool();
                        break;
                    case 15:
                        message.switchAlert = reader.bool();
                        break;
                    case 16:
                        message.eggOfProphecyAlert = reader.bool();
                        break;
                    case 17:
                        message.boostTokenAlert = reader.bool();
                        break;
                    case 18:
                        message.soulEggAlert = reader.bool();
                        break;
                    case 19:
                        message.backupReminderAlert = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Misc message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof ei.Backup.Misc
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {ei.Backup.Misc} Misc
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Misc.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Misc message.
             * @function verify
             * @memberof ei.Backup.Misc
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Misc.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.chickenBtnPrefBig != null && message.hasOwnProperty("chickenBtnPrefBig"))
                    if (typeof message.chickenBtnPrefBig !== "boolean")
                        return "chickenBtnPrefBig: boolean expected";
                if (message.freeHatcheryRefillGiven != null && message.hasOwnProperty("freeHatcheryRefillGiven"))
                    if (typeof message.freeHatcheryRefillGiven !== "boolean")
                        return "freeHatcheryRefillGiven: boolean expected";
                if (message.lastShareFarmValue != null && message.hasOwnProperty("lastShareFarmValue"))
                    if (typeof message.lastShareFarmValue !== "number")
                        return "lastShareFarmValue: number expected";
                if (message.lastShareSwarmFarmValue != null && message.hasOwnProperty("lastShareSwarmFarmValue"))
                    if (typeof message.lastShareSwarmFarmValue !== "number")
                        return "lastShareSwarmFarmValue: number expected";
                if (message.lastShareSwarmSize != null && message.hasOwnProperty("lastShareSwarmSize"))
                    if (typeof message.lastShareSwarmSize !== "number")
                        return "lastShareSwarmSize: number expected";
                if (message.lastPrestigeAlertSoulEggs_DEPRECATED != null && message.hasOwnProperty("lastPrestigeAlertSoulEggs_DEPRECATED"))
                    if (!$util.isInteger(message.lastPrestigeAlertSoulEggs_DEPRECATED) && !(message.lastPrestigeAlertSoulEggs_DEPRECATED && $util.isInteger(message.lastPrestigeAlertSoulEggs_DEPRECATED.low) && $util.isInteger(message.lastPrestigeAlertSoulEggs_DEPRECATED.high)))
                        return "lastPrestigeAlertSoulEggs_DEPRECATED: integer|Long expected";
                if (message.friendRank != null && message.hasOwnProperty("friendRank"))
                    if (!$util.isInteger(message.friendRank) && !(message.friendRank && $util.isInteger(message.friendRank.low) && $util.isInteger(message.friendRank.high)))
                        return "friendRank: integer|Long expected";
                if (message.friendRankPop != null && message.hasOwnProperty("friendRankPop"))
                    if (!$util.isInteger(message.friendRankPop) && !(message.friendRankPop && $util.isInteger(message.friendRankPop.low) && $util.isInteger(message.friendRankPop.high)))
                        return "friendRankPop: integer|Long expected";
                if (message.globalRank != null && message.hasOwnProperty("globalRank"))
                    if (!$util.isInteger(message.globalRank) && !(message.globalRank && $util.isInteger(message.globalRank.low) && $util.isInteger(message.globalRank.high)))
                        return "globalRank: integer|Long expected";
                if (message.globalRankPop != null && message.hasOwnProperty("globalRankPop"))
                    if (!$util.isInteger(message.globalRankPop) && !(message.globalRankPop && $util.isInteger(message.globalRankPop.low) && $util.isInteger(message.globalRankPop.high)))
                        return "globalRankPop: integer|Long expected";
                if (message.trophyAlert != null && message.hasOwnProperty("trophyAlert"))
                    if (typeof message.trophyAlert !== "boolean")
                        return "trophyAlert: boolean expected";
                if (message.arAlert != null && message.hasOwnProperty("arAlert"))
                    if (typeof message.arAlert !== "boolean")
                        return "arAlert: boolean expected";
                if (message.contractsAlert != null && message.hasOwnProperty("contractsAlert"))
                    if (typeof message.contractsAlert !== "boolean")
                        return "contractsAlert: boolean expected";
                if (message.coopAlert != null && message.hasOwnProperty("coopAlert"))
                    if (typeof message.coopAlert !== "boolean")
                        return "coopAlert: boolean expected";
                if (message.switchAlert != null && message.hasOwnProperty("switchAlert"))
                    if (typeof message.switchAlert !== "boolean")
                        return "switchAlert: boolean expected";
                if (message.eggOfProphecyAlert != null && message.hasOwnProperty("eggOfProphecyAlert"))
                    if (typeof message.eggOfProphecyAlert !== "boolean")
                        return "eggOfProphecyAlert: boolean expected";
                if (message.boostTokenAlert != null && message.hasOwnProperty("boostTokenAlert"))
                    if (typeof message.boostTokenAlert !== "boolean")
                        return "boostTokenAlert: boolean expected";
                if (message.soulEggAlert != null && message.hasOwnProperty("soulEggAlert"))
                    if (typeof message.soulEggAlert !== "boolean")
                        return "soulEggAlert: boolean expected";
                if (message.backupReminderAlert != null && message.hasOwnProperty("backupReminderAlert"))
                    if (typeof message.backupReminderAlert !== "boolean")
                        return "backupReminderAlert: boolean expected";
                return null;
            };

            /**
             * Creates a Misc message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof ei.Backup.Misc
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {ei.Backup.Misc} Misc
             */
            Misc.fromObject = function fromObject(object) {
                if (object instanceof $root.ei.Backup.Misc)
                    return object;
                let message = new $root.ei.Backup.Misc();
                if (object.chickenBtnPrefBig != null)
                    message.chickenBtnPrefBig = Boolean(object.chickenBtnPrefBig);
                if (object.freeHatcheryRefillGiven != null)
                    message.freeHatcheryRefillGiven = Boolean(object.freeHatcheryRefillGiven);
                if (object.lastShareFarmValue != null)
                    message.lastShareFarmValue = Number(object.lastShareFarmValue);
                if (object.lastShareSwarmFarmValue != null)
                    message.lastShareSwarmFarmValue = Number(object.lastShareSwarmFarmValue);
                if (object.lastShareSwarmSize != null)
                    message.lastShareSwarmSize = Number(object.lastShareSwarmSize);
                if (object.lastPrestigeAlertSoulEggs_DEPRECATED != null)
                    if ($util.Long)
                        (message.lastPrestigeAlertSoulEggs_DEPRECATED = $util.Long.fromValue(object.lastPrestigeAlertSoulEggs_DEPRECATED)).unsigned = true;
                    else if (typeof object.lastPrestigeAlertSoulEggs_DEPRECATED === "string")
                        message.lastPrestigeAlertSoulEggs_DEPRECATED = parseInt(object.lastPrestigeAlertSoulEggs_DEPRECATED, 10);
                    else if (typeof object.lastPrestigeAlertSoulEggs_DEPRECATED === "number")
                        message.lastPrestigeAlertSoulEggs_DEPRECATED = object.lastPrestigeAlertSoulEggs_DEPRECATED;
                    else if (typeof object.lastPrestigeAlertSoulEggs_DEPRECATED === "object")
                        message.lastPrestigeAlertSoulEggs_DEPRECATED = new $util.LongBits(object.lastPrestigeAlertSoulEggs_DEPRECATED.low >>> 0, object.lastPrestigeAlertSoulEggs_DEPRECATED.high >>> 0).toNumber(true);
                if (object.friendRank != null)
                    if ($util.Long)
                        (message.friendRank = $util.Long.fromValue(object.friendRank)).unsigned = true;
                    else if (typeof object.friendRank === "string")
                        message.friendRank = parseInt(object.friendRank, 10);
                    else if (typeof object.friendRank === "number")
                        message.friendRank = object.friendRank;
                    else if (typeof object.friendRank === "object")
                        message.friendRank = new $util.LongBits(object.friendRank.low >>> 0, object.friendRank.high >>> 0).toNumber(true);
                if (object.friendRankPop != null)
                    if ($util.Long)
                        (message.friendRankPop = $util.Long.fromValue(object.friendRankPop)).unsigned = true;
                    else if (typeof object.friendRankPop === "string")
                        message.friendRankPop = parseInt(object.friendRankPop, 10);
                    else if (typeof object.friendRankPop === "number")
                        message.friendRankPop = object.friendRankPop;
                    else if (typeof object.friendRankPop === "object")
                        message.friendRankPop = new $util.LongBits(object.friendRankPop.low >>> 0, object.friendRankPop.high >>> 0).toNumber(true);
                if (object.globalRank != null)
                    if ($util.Long)
                        (message.globalRank = $util.Long.fromValue(object.globalRank)).unsigned = true;
                    else if (typeof object.globalRank === "string")
                        message.globalRank = parseInt(object.globalRank, 10);
                    else if (typeof object.globalRank === "number")
                        message.globalRank = object.globalRank;
                    else if (typeof object.globalRank === "object")
                        message.globalRank = new $util.LongBits(object.globalRank.low >>> 0, object.globalRank.high >>> 0).toNumber(true);
                if (object.globalRankPop != null)
                    if ($util.Long)
                        (message.globalRankPop = $util.Long.fromValue(object.globalRankPop)).unsigned = true;
                    else if (typeof object.globalRankPop === "string")
                        message.globalRankPop = parseInt(object.globalRankPop, 10);
                    else if (typeof object.globalRankPop === "number")
                        message.globalRankPop = object.globalRankPop;
                    else if (typeof object.globalRankPop === "object")
                        message.globalRankPop = new $util.LongBits(object.globalRankPop.low >>> 0, object.globalRankPop.high >>> 0).toNumber(true);
                if (object.trophyAlert != null)
                    message.trophyAlert = Boolean(object.trophyAlert);
                if (object.arAlert != null)
                    message.arAlert = Boolean(object.arAlert);
                if (object.contractsAlert != null)
                    message.contractsAlert = Boolean(object.contractsAlert);
                if (object.coopAlert != null)
                    message.coopAlert = Boolean(object.coopAlert);
                if (object.switchAlert != null)
                    message.switchAlert = Boolean(object.switchAlert);
                if (object.eggOfProphecyAlert != null)
                    message.eggOfProphecyAlert = Boolean(object.eggOfProphecyAlert);
                if (object.boostTokenAlert != null)
                    message.boostTokenAlert = Boolean(object.boostTokenAlert);
                if (object.soulEggAlert != null)
                    message.soulEggAlert = Boolean(object.soulEggAlert);
                if (object.backupReminderAlert != null)
                    message.backupReminderAlert = Boolean(object.backupReminderAlert);
                return message;
            };

            /**
             * Creates a plain object from a Misc message. Also converts values to other types if specified.
             * @function toObject
             * @memberof ei.Backup.Misc
             * @static
             * @param {ei.Backup.Misc} message Misc
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Misc.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.chickenBtnPrefBig = false;
                    object.freeHatcheryRefillGiven = false;
                    object.lastShareFarmValue = 10000000;
                    object.lastShareSwarmFarmValue = 10000000;
                    object.lastShareSwarmSize = 140;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.friendRank = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.friendRank = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.friendRankPop = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.friendRankPop = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.globalRank = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.globalRank = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.globalRankPop = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.globalRankPop = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        let long = new $util.Long(45, 0, true);
                        object.lastPrestigeAlertSoulEggs_DEPRECATED = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.lastPrestigeAlertSoulEggs_DEPRECATED = options.longs === String ? "45" : 45;
                    object.trophyAlert = false;
                    object.arAlert = false;
                    object.contractsAlert = false;
                    object.coopAlert = false;
                    object.switchAlert = false;
                    object.eggOfProphecyAlert = false;
                    object.boostTokenAlert = false;
                    object.soulEggAlert = false;
                    object.backupReminderAlert = false;
                }
                if (message.chickenBtnPrefBig != null && message.hasOwnProperty("chickenBtnPrefBig"))
                    object.chickenBtnPrefBig = message.chickenBtnPrefBig;
                if (message.freeHatcheryRefillGiven != null && message.hasOwnProperty("freeHatcheryRefillGiven"))
                    object.freeHatcheryRefillGiven = message.freeHatcheryRefillGiven;
                if (message.lastShareFarmValue != null && message.hasOwnProperty("lastShareFarmValue"))
                    object.lastShareFarmValue = options.json && !isFinite(message.lastShareFarmValue) ? String(message.lastShareFarmValue) : message.lastShareFarmValue;
                if (message.lastShareSwarmFarmValue != null && message.hasOwnProperty("lastShareSwarmFarmValue"))
                    object.lastShareSwarmFarmValue = options.json && !isFinite(message.lastShareSwarmFarmValue) ? String(message.lastShareSwarmFarmValue) : message.lastShareSwarmFarmValue;
                if (message.lastShareSwarmSize != null && message.hasOwnProperty("lastShareSwarmSize"))
                    object.lastShareSwarmSize = options.json && !isFinite(message.lastShareSwarmSize) ? String(message.lastShareSwarmSize) : message.lastShareSwarmSize;
                if (message.friendRank != null && message.hasOwnProperty("friendRank"))
                    if (typeof message.friendRank === "number")
                        object.friendRank = options.longs === String ? String(message.friendRank) : message.friendRank;
                    else
                        object.friendRank = options.longs === String ? $util.Long.prototype.toString.call(message.friendRank) : options.longs === Number ? new $util.LongBits(message.friendRank.low >>> 0, message.friendRank.high >>> 0).toNumber(true) : message.friendRank;
                if (message.friendRankPop != null && message.hasOwnProperty("friendRankPop"))
                    if (typeof message.friendRankPop === "number")
                        object.friendRankPop = options.longs === String ? String(message.friendRankPop) : message.friendRankPop;
                    else
                        object.friendRankPop = options.longs === String ? $util.Long.prototype.toString.call(message.friendRankPop) : options.longs === Number ? new $util.LongBits(message.friendRankPop.low >>> 0, message.friendRankPop.high >>> 0).toNumber(true) : message.friendRankPop;
                if (message.globalRank != null && message.hasOwnProperty("globalRank"))
                    if (typeof message.globalRank === "number")
                        object.globalRank = options.longs === String ? String(message.globalRank) : message.globalRank;
                    else
                        object.globalRank = options.longs === String ? $util.Long.prototype.toString.call(message.globalRank) : options.longs === Number ? new $util.LongBits(message.globalRank.low >>> 0, message.globalRank.high >>> 0).toNumber(true) : message.globalRank;
                if (message.globalRankPop != null && message.hasOwnProperty("globalRankPop"))
                    if (typeof message.globalRankPop === "number")
                        object.globalRankPop = options.longs === String ? String(message.globalRankPop) : message.globalRankPop;
                    else
                        object.globalRankPop = options.longs === String ? $util.Long.prototype.toString.call(message.globalRankPop) : options.longs === Number ? new $util.LongBits(message.globalRankPop.low >>> 0, message.globalRankPop.high >>> 0).toNumber(true) : message.globalRankPop;
                if (message.lastPrestigeAlertSoulEggs_DEPRECATED != null && message.hasOwnProperty("lastPrestigeAlertSoulEggs_DEPRECATED"))
                    if (typeof message.lastPrestigeAlertSoulEggs_DEPRECATED === "number")
                        object.lastPrestigeAlertSoulEggs_DEPRECATED = options.longs === String ? String(message.lastPrestigeAlertSoulEggs_DEPRECATED) : message.lastPrestigeAlertSoulEggs_DEPRECATED;
                    else
                        object.lastPrestigeAlertSoulEggs_DEPRECATED = options.longs === String ? $util.Long.prototype.toString.call(message.lastPrestigeAlertSoulEggs_DEPRECATED) : options.longs === Number ? new $util.LongBits(message.lastPrestigeAlertSoulEggs_DEPRECATED.low >>> 0, message.lastPrestigeAlertSoulEggs_DEPRECATED.high >>> 0).toNumber(true) : message.lastPrestigeAlertSoulEggs_DEPRECATED;
                if (message.trophyAlert != null && message.hasOwnProperty("trophyAlert"))
                    object.trophyAlert = message.trophyAlert;
                if (message.arAlert != null && message.hasOwnProperty("arAlert"))
                    object.arAlert = message.arAlert;
                if (message.contractsAlert != null && message.hasOwnProperty("contractsAlert"))
                    object.contractsAlert = message.contractsAlert;
                if (message.coopAlert != null && message.hasOwnProperty("coopAlert"))
                    object.coopAlert = message.coopAlert;
                if (message.switchAlert != null && message.hasOwnProperty("switchAlert"))
                    object.switchAlert = message.switchAlert;
                if (message.eggOfProphecyAlert != null && message.hasOwnProperty("eggOfProphecyAlert"))
                    object.eggOfProphecyAlert = message.eggOfProphecyAlert;
                if (message.boostTokenAlert != null && message.hasOwnProperty("boostTokenAlert"))
                    object.boostTokenAlert = message.boostTokenAlert;
                if (message.soulEggAlert != null && message.hasOwnProperty("soulEggAlert"))
                    object.soulEggAlert = message.soulEggAlert;
                if (message.backupReminderAlert != null && message.hasOwnProperty("backupReminderAlert"))
                    object.backupReminderAlert = message.backupReminderAlert;
                return object;
            };

            /**
             * Converts this Misc to JSON.
             * @function toJSON
             * @memberof ei.Backup.Misc
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Misc.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Misc;
        })();

        Backup.ResearchItem = (function() {

            /**
             * Properties of a ResearchItem.
             * @memberof ei.Backup
             * @interface IResearchItem
             * @property {string|null} [id] ResearchItem id
             * @property {number|null} [level] ResearchItem level
             */

            /**
             * Constructs a new ResearchItem.
             * @memberof ei.Backup
             * @classdesc Represents a ResearchItem.
             * @implements IResearchItem
             * @constructor
             * @param {ei.Backup.IResearchItem=} [properties] Properties to set
             */
            function ResearchItem(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ResearchItem id.
             * @member {string} id
             * @memberof ei.Backup.ResearchItem
             * @instance
             */
            ResearchItem.prototype.id = "";

            /**
             * ResearchItem level.
             * @member {number} level
             * @memberof ei.Backup.ResearchItem
             * @instance
             */
            ResearchItem.prototype.level = 0;

            /**
             * Creates a new ResearchItem instance using the specified properties.
             * @function create
             * @memberof ei.Backup.ResearchItem
             * @static
             * @param {ei.Backup.IResearchItem=} [properties] Properties to set
             * @returns {ei.Backup.ResearchItem} ResearchItem instance
             */
            ResearchItem.create = function create(properties) {
                return new ResearchItem(properties);
            };

            /**
             * Encodes the specified ResearchItem message. Does not implicitly {@link ei.Backup.ResearchItem.verify|verify} messages.
             * @function encode
             * @memberof ei.Backup.ResearchItem
             * @static
             * @param {ei.Backup.IResearchItem} message ResearchItem message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ResearchItem.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);
                if (message.level != null && Object.hasOwnProperty.call(message, "level"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.level);
                return writer;
            };

            /**
             * Encodes the specified ResearchItem message, length delimited. Does not implicitly {@link ei.Backup.ResearchItem.verify|verify} messages.
             * @function encodeDelimited
             * @memberof ei.Backup.ResearchItem
             * @static
             * @param {ei.Backup.IResearchItem} message ResearchItem message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ResearchItem.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ResearchItem message from the specified reader or buffer.
             * @function decode
             * @memberof ei.Backup.ResearchItem
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {ei.Backup.ResearchItem} ResearchItem
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ResearchItem.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ei.Backup.ResearchItem();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.id = reader.string();
                        break;
                    case 2:
                        message.level = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ResearchItem message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof ei.Backup.ResearchItem
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {ei.Backup.ResearchItem} ResearchItem
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ResearchItem.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ResearchItem message.
             * @function verify
             * @memberof ei.Backup.ResearchItem
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ResearchItem.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.id != null && message.hasOwnProperty("id"))
                    if (!$util.isString(message.id))
                        return "id: string expected";
                if (message.level != null && message.hasOwnProperty("level"))
                    if (!$util.isInteger(message.level))
                        return "level: integer expected";
                return null;
            };

            /**
             * Creates a ResearchItem message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof ei.Backup.ResearchItem
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {ei.Backup.ResearchItem} ResearchItem
             */
            ResearchItem.fromObject = function fromObject(object) {
                if (object instanceof $root.ei.Backup.ResearchItem)
                    return object;
                let message = new $root.ei.Backup.ResearchItem();
                if (object.id != null)
                    message.id = String(object.id);
                if (object.level != null)
                    message.level = object.level >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a ResearchItem message. Also converts values to other types if specified.
             * @function toObject
             * @memberof ei.Backup.ResearchItem
             * @static
             * @param {ei.Backup.ResearchItem} message ResearchItem
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ResearchItem.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.id = "";
                    object.level = 0;
                }
                if (message.id != null && message.hasOwnProperty("id"))
                    object.id = message.id;
                if (message.level != null && message.hasOwnProperty("level"))
                    object.level = message.level;
                return object;
            };

            /**
             * Converts this ResearchItem to JSON.
             * @function toJSON
             * @memberof ei.Backup.ResearchItem
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ResearchItem.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ResearchItem;
        })();

        Backup.NewsHeadline = (function() {

            /**
             * Properties of a NewsHeadline.
             * @memberof ei.Backup
             * @interface INewsHeadline
             * @property {string|null} [id] NewsHeadline id
             * @property {boolean|null} [read] NewsHeadline read
             */

            /**
             * Constructs a new NewsHeadline.
             * @memberof ei.Backup
             * @classdesc Represents a NewsHeadline.
             * @implements INewsHeadline
             * @constructor
             * @param {ei.Backup.INewsHeadline=} [properties] Properties to set
             */
            function NewsHeadline(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * NewsHeadline id.
             * @member {string} id
             * @memberof ei.Backup.NewsHeadline
             * @instance
             */
            NewsHeadline.prototype.id = "";

            /**
             * NewsHeadline read.
             * @member {boolean} read
             * @memberof ei.Backup.NewsHeadline
             * @instance
             */
            NewsHeadline.prototype.read = false;

            /**
             * Creates a new NewsHeadline instance using the specified properties.
             * @function create
             * @memberof ei.Backup.NewsHeadline
             * @static
             * @param {ei.Backup.INewsHeadline=} [properties] Properties to set
             * @returns {ei.Backup.NewsHeadline} NewsHeadline instance
             */
            NewsHeadline.create = function create(properties) {
                return new NewsHeadline(properties);
            };

            /**
             * Encodes the specified NewsHeadline message. Does not implicitly {@link ei.Backup.NewsHeadline.verify|verify} messages.
             * @function encode
             * @memberof ei.Backup.NewsHeadline
             * @static
             * @param {ei.Backup.INewsHeadline} message NewsHeadline message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            NewsHeadline.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);
                if (message.read != null && Object.hasOwnProperty.call(message, "read"))
                    writer.uint32(/* id 2, wireType 0 =*/16).bool(message.read);
                return writer;
            };

            /**
             * Encodes the specified NewsHeadline message, length delimited. Does not implicitly {@link ei.Backup.NewsHeadline.verify|verify} messages.
             * @function encodeDelimited
             * @memberof ei.Backup.NewsHeadline
             * @static
             * @param {ei.Backup.INewsHeadline} message NewsHeadline message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            NewsHeadline.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a NewsHeadline message from the specified reader or buffer.
             * @function decode
             * @memberof ei.Backup.NewsHeadline
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {ei.Backup.NewsHeadline} NewsHeadline
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            NewsHeadline.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ei.Backup.NewsHeadline();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.id = reader.string();
                        break;
                    case 2:
                        message.read = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a NewsHeadline message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof ei.Backup.NewsHeadline
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {ei.Backup.NewsHeadline} NewsHeadline
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            NewsHeadline.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a NewsHeadline message.
             * @function verify
             * @memberof ei.Backup.NewsHeadline
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            NewsHeadline.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.id != null && message.hasOwnProperty("id"))
                    if (!$util.isString(message.id))
                        return "id: string expected";
                if (message.read != null && message.hasOwnProperty("read"))
                    if (typeof message.read !== "boolean")
                        return "read: boolean expected";
                return null;
            };

            /**
             * Creates a NewsHeadline message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof ei.Backup.NewsHeadline
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {ei.Backup.NewsHeadline} NewsHeadline
             */
            NewsHeadline.fromObject = function fromObject(object) {
                if (object instanceof $root.ei.Backup.NewsHeadline)
                    return object;
                let message = new $root.ei.Backup.NewsHeadline();
                if (object.id != null)
                    message.id = String(object.id);
                if (object.read != null)
                    message.read = Boolean(object.read);
                return message;
            };

            /**
             * Creates a plain object from a NewsHeadline message. Also converts values to other types if specified.
             * @function toObject
             * @memberof ei.Backup.NewsHeadline
             * @static
             * @param {ei.Backup.NewsHeadline} message NewsHeadline
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            NewsHeadline.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.id = "";
                    object.read = false;
                }
                if (message.id != null && message.hasOwnProperty("id"))
                    object.id = message.id;
                if (message.read != null && message.hasOwnProperty("read"))
                    object.read = message.read;
                return object;
            };

            /**
             * Converts this NewsHeadline to JSON.
             * @function toJSON
             * @memberof ei.Backup.NewsHeadline
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            NewsHeadline.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return NewsHeadline;
        })();

        Backup.AchievementInfo = (function() {

            /**
             * Properties of an AchievementInfo.
             * @memberof ei.Backup
             * @interface IAchievementInfo
             * @property {string|null} [id] AchievementInfo id
             * @property {boolean|null} [achieved] AchievementInfo achieved
             */

            /**
             * Constructs a new AchievementInfo.
             * @memberof ei.Backup
             * @classdesc Represents an AchievementInfo.
             * @implements IAchievementInfo
             * @constructor
             * @param {ei.Backup.IAchievementInfo=} [properties] Properties to set
             */
            function AchievementInfo(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * AchievementInfo id.
             * @member {string} id
             * @memberof ei.Backup.AchievementInfo
             * @instance
             */
            AchievementInfo.prototype.id = "";

            /**
             * AchievementInfo achieved.
             * @member {boolean} achieved
             * @memberof ei.Backup.AchievementInfo
             * @instance
             */
            AchievementInfo.prototype.achieved = false;

            /**
             * Creates a new AchievementInfo instance using the specified properties.
             * @function create
             * @memberof ei.Backup.AchievementInfo
             * @static
             * @param {ei.Backup.IAchievementInfo=} [properties] Properties to set
             * @returns {ei.Backup.AchievementInfo} AchievementInfo instance
             */
            AchievementInfo.create = function create(properties) {
                return new AchievementInfo(properties);
            };

            /**
             * Encodes the specified AchievementInfo message. Does not implicitly {@link ei.Backup.AchievementInfo.verify|verify} messages.
             * @function encode
             * @memberof ei.Backup.AchievementInfo
             * @static
             * @param {ei.Backup.IAchievementInfo} message AchievementInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AchievementInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);
                if (message.achieved != null && Object.hasOwnProperty.call(message, "achieved"))
                    writer.uint32(/* id 2, wireType 0 =*/16).bool(message.achieved);
                return writer;
            };

            /**
             * Encodes the specified AchievementInfo message, length delimited. Does not implicitly {@link ei.Backup.AchievementInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof ei.Backup.AchievementInfo
             * @static
             * @param {ei.Backup.IAchievementInfo} message AchievementInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AchievementInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an AchievementInfo message from the specified reader or buffer.
             * @function decode
             * @memberof ei.Backup.AchievementInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {ei.Backup.AchievementInfo} AchievementInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AchievementInfo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ei.Backup.AchievementInfo();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.id = reader.string();
                        break;
                    case 2:
                        message.achieved = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an AchievementInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof ei.Backup.AchievementInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {ei.Backup.AchievementInfo} AchievementInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AchievementInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an AchievementInfo message.
             * @function verify
             * @memberof ei.Backup.AchievementInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            AchievementInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.id != null && message.hasOwnProperty("id"))
                    if (!$util.isString(message.id))
                        return "id: string expected";
                if (message.achieved != null && message.hasOwnProperty("achieved"))
                    if (typeof message.achieved !== "boolean")
                        return "achieved: boolean expected";
                return null;
            };

            /**
             * Creates an AchievementInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof ei.Backup.AchievementInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {ei.Backup.AchievementInfo} AchievementInfo
             */
            AchievementInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.ei.Backup.AchievementInfo)
                    return object;
                let message = new $root.ei.Backup.AchievementInfo();
                if (object.id != null)
                    message.id = String(object.id);
                if (object.achieved != null)
                    message.achieved = Boolean(object.achieved);
                return message;
            };

            /**
             * Creates a plain object from an AchievementInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof ei.Backup.AchievementInfo
             * @static
             * @param {ei.Backup.AchievementInfo} message AchievementInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            AchievementInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.id = "";
                    object.achieved = false;
                }
                if (message.id != null && message.hasOwnProperty("id"))
                    object.id = message.id;
                if (message.achieved != null && message.hasOwnProperty("achieved"))
                    object.achieved = message.achieved;
                return object;
            };

            /**
             * Converts this AchievementInfo to JSON.
             * @function toJSON
             * @memberof ei.Backup.AchievementInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            AchievementInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return AchievementInfo;
        })();

        Backup.ActiveBoost = (function() {

            /**
             * Properties of an ActiveBoost.
             * @memberof ei.Backup
             * @interface IActiveBoost
             * @property {string|null} [boostId] ActiveBoost boostId
             * @property {number|null} [timeRemaining] ActiveBoost timeRemaining
             * @property {number|null} [referenceValue] ActiveBoost referenceValue
             */

            /**
             * Constructs a new ActiveBoost.
             * @memberof ei.Backup
             * @classdesc Represents an ActiveBoost.
             * @implements IActiveBoost
             * @constructor
             * @param {ei.Backup.IActiveBoost=} [properties] Properties to set
             */
            function ActiveBoost(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ActiveBoost boostId.
             * @member {string} boostId
             * @memberof ei.Backup.ActiveBoost
             * @instance
             */
            ActiveBoost.prototype.boostId = "";

            /**
             * ActiveBoost timeRemaining.
             * @member {number} timeRemaining
             * @memberof ei.Backup.ActiveBoost
             * @instance
             */
            ActiveBoost.prototype.timeRemaining = 0;

            /**
             * ActiveBoost referenceValue.
             * @member {number} referenceValue
             * @memberof ei.Backup.ActiveBoost
             * @instance
             */
            ActiveBoost.prototype.referenceValue = 0;

            /**
             * Creates a new ActiveBoost instance using the specified properties.
             * @function create
             * @memberof ei.Backup.ActiveBoost
             * @static
             * @param {ei.Backup.IActiveBoost=} [properties] Properties to set
             * @returns {ei.Backup.ActiveBoost} ActiveBoost instance
             */
            ActiveBoost.create = function create(properties) {
                return new ActiveBoost(properties);
            };

            /**
             * Encodes the specified ActiveBoost message. Does not implicitly {@link ei.Backup.ActiveBoost.verify|verify} messages.
             * @function encode
             * @memberof ei.Backup.ActiveBoost
             * @static
             * @param {ei.Backup.IActiveBoost} message ActiveBoost message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ActiveBoost.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.boostId != null && Object.hasOwnProperty.call(message, "boostId"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.boostId);
                if (message.timeRemaining != null && Object.hasOwnProperty.call(message, "timeRemaining"))
                    writer.uint32(/* id 2, wireType 1 =*/17).double(message.timeRemaining);
                if (message.referenceValue != null && Object.hasOwnProperty.call(message, "referenceValue"))
                    writer.uint32(/* id 3, wireType 1 =*/25).double(message.referenceValue);
                return writer;
            };

            /**
             * Encodes the specified ActiveBoost message, length delimited. Does not implicitly {@link ei.Backup.ActiveBoost.verify|verify} messages.
             * @function encodeDelimited
             * @memberof ei.Backup.ActiveBoost
             * @static
             * @param {ei.Backup.IActiveBoost} message ActiveBoost message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ActiveBoost.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an ActiveBoost message from the specified reader or buffer.
             * @function decode
             * @memberof ei.Backup.ActiveBoost
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {ei.Backup.ActiveBoost} ActiveBoost
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ActiveBoost.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ei.Backup.ActiveBoost();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.boostId = reader.string();
                        break;
                    case 2:
                        message.timeRemaining = reader.double();
                        break;
                    case 3:
                        message.referenceValue = reader.double();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an ActiveBoost message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof ei.Backup.ActiveBoost
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {ei.Backup.ActiveBoost} ActiveBoost
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ActiveBoost.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an ActiveBoost message.
             * @function verify
             * @memberof ei.Backup.ActiveBoost
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ActiveBoost.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.boostId != null && message.hasOwnProperty("boostId"))
                    if (!$util.isString(message.boostId))
                        return "boostId: string expected";
                if (message.timeRemaining != null && message.hasOwnProperty("timeRemaining"))
                    if (typeof message.timeRemaining !== "number")
                        return "timeRemaining: number expected";
                if (message.referenceValue != null && message.hasOwnProperty("referenceValue"))
                    if (typeof message.referenceValue !== "number")
                        return "referenceValue: number expected";
                return null;
            };

            /**
             * Creates an ActiveBoost message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof ei.Backup.ActiveBoost
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {ei.Backup.ActiveBoost} ActiveBoost
             */
            ActiveBoost.fromObject = function fromObject(object) {
                if (object instanceof $root.ei.Backup.ActiveBoost)
                    return object;
                let message = new $root.ei.Backup.ActiveBoost();
                if (object.boostId != null)
                    message.boostId = String(object.boostId);
                if (object.timeRemaining != null)
                    message.timeRemaining = Number(object.timeRemaining);
                if (object.referenceValue != null)
                    message.referenceValue = Number(object.referenceValue);
                return message;
            };

            /**
             * Creates a plain object from an ActiveBoost message. Also converts values to other types if specified.
             * @function toObject
             * @memberof ei.Backup.ActiveBoost
             * @static
             * @param {ei.Backup.ActiveBoost} message ActiveBoost
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ActiveBoost.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.boostId = "";
                    object.timeRemaining = 0;
                    object.referenceValue = 0;
                }
                if (message.boostId != null && message.hasOwnProperty("boostId"))
                    object.boostId = message.boostId;
                if (message.timeRemaining != null && message.hasOwnProperty("timeRemaining"))
                    object.timeRemaining = options.json && !isFinite(message.timeRemaining) ? String(message.timeRemaining) : message.timeRemaining;
                if (message.referenceValue != null && message.hasOwnProperty("referenceValue"))
                    object.referenceValue = options.json && !isFinite(message.referenceValue) ? String(message.referenceValue) : message.referenceValue;
                return object;
            };

            /**
             * Converts this ActiveBoost to JSON.
             * @function toJSON
             * @memberof ei.Backup.ActiveBoost
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ActiveBoost.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ActiveBoost;
        })();

        Backup.OwnedBoost = (function() {

            /**
             * Properties of an OwnedBoost.
             * @memberof ei.Backup
             * @interface IOwnedBoost
             * @property {string|null} [boostId] OwnedBoost boostId
             * @property {number|null} [count] OwnedBoost count
             */

            /**
             * Constructs a new OwnedBoost.
             * @memberof ei.Backup
             * @classdesc Represents an OwnedBoost.
             * @implements IOwnedBoost
             * @constructor
             * @param {ei.Backup.IOwnedBoost=} [properties] Properties to set
             */
            function OwnedBoost(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * OwnedBoost boostId.
             * @member {string} boostId
             * @memberof ei.Backup.OwnedBoost
             * @instance
             */
            OwnedBoost.prototype.boostId = "";

            /**
             * OwnedBoost count.
             * @member {number} count
             * @memberof ei.Backup.OwnedBoost
             * @instance
             */
            OwnedBoost.prototype.count = 0;

            /**
             * Creates a new OwnedBoost instance using the specified properties.
             * @function create
             * @memberof ei.Backup.OwnedBoost
             * @static
             * @param {ei.Backup.IOwnedBoost=} [properties] Properties to set
             * @returns {ei.Backup.OwnedBoost} OwnedBoost instance
             */
            OwnedBoost.create = function create(properties) {
                return new OwnedBoost(properties);
            };

            /**
             * Encodes the specified OwnedBoost message. Does not implicitly {@link ei.Backup.OwnedBoost.verify|verify} messages.
             * @function encode
             * @memberof ei.Backup.OwnedBoost
             * @static
             * @param {ei.Backup.IOwnedBoost} message OwnedBoost message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            OwnedBoost.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.boostId != null && Object.hasOwnProperty.call(message, "boostId"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.boostId);
                if (message.count != null && Object.hasOwnProperty.call(message, "count"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.count);
                return writer;
            };

            /**
             * Encodes the specified OwnedBoost message, length delimited. Does not implicitly {@link ei.Backup.OwnedBoost.verify|verify} messages.
             * @function encodeDelimited
             * @memberof ei.Backup.OwnedBoost
             * @static
             * @param {ei.Backup.IOwnedBoost} message OwnedBoost message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            OwnedBoost.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an OwnedBoost message from the specified reader or buffer.
             * @function decode
             * @memberof ei.Backup.OwnedBoost
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {ei.Backup.OwnedBoost} OwnedBoost
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            OwnedBoost.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ei.Backup.OwnedBoost();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.boostId = reader.string();
                        break;
                    case 2:
                        message.count = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an OwnedBoost message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof ei.Backup.OwnedBoost
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {ei.Backup.OwnedBoost} OwnedBoost
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            OwnedBoost.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an OwnedBoost message.
             * @function verify
             * @memberof ei.Backup.OwnedBoost
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            OwnedBoost.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.boostId != null && message.hasOwnProperty("boostId"))
                    if (!$util.isString(message.boostId))
                        return "boostId: string expected";
                if (message.count != null && message.hasOwnProperty("count"))
                    if (!$util.isInteger(message.count))
                        return "count: integer expected";
                return null;
            };

            /**
             * Creates an OwnedBoost message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof ei.Backup.OwnedBoost
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {ei.Backup.OwnedBoost} OwnedBoost
             */
            OwnedBoost.fromObject = function fromObject(object) {
                if (object instanceof $root.ei.Backup.OwnedBoost)
                    return object;
                let message = new $root.ei.Backup.OwnedBoost();
                if (object.boostId != null)
                    message.boostId = String(object.boostId);
                if (object.count != null)
                    message.count = object.count >>> 0;
                return message;
            };

            /**
             * Creates a plain object from an OwnedBoost message. Also converts values to other types if specified.
             * @function toObject
             * @memberof ei.Backup.OwnedBoost
             * @static
             * @param {ei.Backup.OwnedBoost} message OwnedBoost
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            OwnedBoost.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.boostId = "";
                    object.count = 0;
                }
                if (message.boostId != null && message.hasOwnProperty("boostId"))
                    object.boostId = message.boostId;
                if (message.count != null && message.hasOwnProperty("count"))
                    object.count = message.count;
                return object;
            };

            /**
             * Converts this OwnedBoost to JSON.
             * @function toJSON
             * @memberof ei.Backup.OwnedBoost
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            OwnedBoost.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return OwnedBoost;
        })();

        Backup.MissionInfo = (function() {

            /**
             * Properties of a MissionInfo.
             * @memberof ei.Backup
             * @interface IMissionInfo
             * @property {string|null} [id] MissionInfo id
             * @property {boolean|null} [completed] MissionInfo completed
             * @property {number|null} [referenceValue] MissionInfo referenceValue
             */

            /**
             * Constructs a new MissionInfo.
             * @memberof ei.Backup
             * @classdesc Represents a MissionInfo.
             * @implements IMissionInfo
             * @constructor
             * @param {ei.Backup.IMissionInfo=} [properties] Properties to set
             */
            function MissionInfo(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * MissionInfo id.
             * @member {string} id
             * @memberof ei.Backup.MissionInfo
             * @instance
             */
            MissionInfo.prototype.id = "";

            /**
             * MissionInfo completed.
             * @member {boolean} completed
             * @memberof ei.Backup.MissionInfo
             * @instance
             */
            MissionInfo.prototype.completed = false;

            /**
             * MissionInfo referenceValue.
             * @member {number} referenceValue
             * @memberof ei.Backup.MissionInfo
             * @instance
             */
            MissionInfo.prototype.referenceValue = 0;

            /**
             * Creates a new MissionInfo instance using the specified properties.
             * @function create
             * @memberof ei.Backup.MissionInfo
             * @static
             * @param {ei.Backup.IMissionInfo=} [properties] Properties to set
             * @returns {ei.Backup.MissionInfo} MissionInfo instance
             */
            MissionInfo.create = function create(properties) {
                return new MissionInfo(properties);
            };

            /**
             * Encodes the specified MissionInfo message. Does not implicitly {@link ei.Backup.MissionInfo.verify|verify} messages.
             * @function encode
             * @memberof ei.Backup.MissionInfo
             * @static
             * @param {ei.Backup.IMissionInfo} message MissionInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MissionInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);
                if (message.completed != null && Object.hasOwnProperty.call(message, "completed"))
                    writer.uint32(/* id 2, wireType 0 =*/16).bool(message.completed);
                if (message.referenceValue != null && Object.hasOwnProperty.call(message, "referenceValue"))
                    writer.uint32(/* id 3, wireType 1 =*/25).double(message.referenceValue);
                return writer;
            };

            /**
             * Encodes the specified MissionInfo message, length delimited. Does not implicitly {@link ei.Backup.MissionInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof ei.Backup.MissionInfo
             * @static
             * @param {ei.Backup.IMissionInfo} message MissionInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MissionInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a MissionInfo message from the specified reader or buffer.
             * @function decode
             * @memberof ei.Backup.MissionInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {ei.Backup.MissionInfo} MissionInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MissionInfo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ei.Backup.MissionInfo();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.id = reader.string();
                        break;
                    case 2:
                        message.completed = reader.bool();
                        break;
                    case 3:
                        message.referenceValue = reader.double();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a MissionInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof ei.Backup.MissionInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {ei.Backup.MissionInfo} MissionInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MissionInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a MissionInfo message.
             * @function verify
             * @memberof ei.Backup.MissionInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            MissionInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.id != null && message.hasOwnProperty("id"))
                    if (!$util.isString(message.id))
                        return "id: string expected";
                if (message.completed != null && message.hasOwnProperty("completed"))
                    if (typeof message.completed !== "boolean")
                        return "completed: boolean expected";
                if (message.referenceValue != null && message.hasOwnProperty("referenceValue"))
                    if (typeof message.referenceValue !== "number")
                        return "referenceValue: number expected";
                return null;
            };

            /**
             * Creates a MissionInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof ei.Backup.MissionInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {ei.Backup.MissionInfo} MissionInfo
             */
            MissionInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.ei.Backup.MissionInfo)
                    return object;
                let message = new $root.ei.Backup.MissionInfo();
                if (object.id != null)
                    message.id = String(object.id);
                if (object.completed != null)
                    message.completed = Boolean(object.completed);
                if (object.referenceValue != null)
                    message.referenceValue = Number(object.referenceValue);
                return message;
            };

            /**
             * Creates a plain object from a MissionInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof ei.Backup.MissionInfo
             * @static
             * @param {ei.Backup.MissionInfo} message MissionInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            MissionInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.id = "";
                    object.completed = false;
                    object.referenceValue = 0;
                }
                if (message.id != null && message.hasOwnProperty("id"))
                    object.id = message.id;
                if (message.completed != null && message.hasOwnProperty("completed"))
                    object.completed = message.completed;
                if (message.referenceValue != null && message.hasOwnProperty("referenceValue"))
                    object.referenceValue = options.json && !isFinite(message.referenceValue) ? String(message.referenceValue) : message.referenceValue;
                return object;
            };

            /**
             * Converts this MissionInfo to JSON.
             * @function toJSON
             * @memberof ei.Backup.MissionInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            MissionInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return MissionInfo;
        })();

        return Backup;
    })();

    ei.EggIncFirstContactRequest = (function() {

        /**
         * Properties of an EggIncFirstContactRequest.
         * @memberof ei
         * @interface IEggIncFirstContactRequest
         * @property {ei.IBasicRequestInfo|null} [rinfo] EggIncFirstContactRequest rinfo
         * @property {string|null} [eiUserId] EggIncFirstContactRequest eiUserId
         * @property {string|null} [userId] EggIncFirstContactRequest userId
         * @property {string|null} [gameServicesId] EggIncFirstContactRequest gameServicesId
         * @property {string|null} [deviceId] EggIncFirstContactRequest deviceId
         * @property {string|null} [username] EggIncFirstContactRequest username
         * @property {number|null} [clientVersion] EggIncFirstContactRequest clientVersion
         * @property {aux.Platform|null} [platform] EggIncFirstContactRequest platform
         */

        /**
         * Constructs a new EggIncFirstContactRequest.
         * @memberof ei
         * @classdesc Represents an EggIncFirstContactRequest.
         * @implements IEggIncFirstContactRequest
         * @constructor
         * @param {ei.IEggIncFirstContactRequest=} [properties] Properties to set
         */
        function EggIncFirstContactRequest(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * EggIncFirstContactRequest rinfo.
         * @member {ei.IBasicRequestInfo|null|undefined} rinfo
         * @memberof ei.EggIncFirstContactRequest
         * @instance
         */
        EggIncFirstContactRequest.prototype.rinfo = null;

        /**
         * EggIncFirstContactRequest eiUserId.
         * @member {string} eiUserId
         * @memberof ei.EggIncFirstContactRequest
         * @instance
         */
        EggIncFirstContactRequest.prototype.eiUserId = "";

        /**
         * EggIncFirstContactRequest userId.
         * @member {string} userId
         * @memberof ei.EggIncFirstContactRequest
         * @instance
         */
        EggIncFirstContactRequest.prototype.userId = "";

        /**
         * EggIncFirstContactRequest gameServicesId.
         * @member {string} gameServicesId
         * @memberof ei.EggIncFirstContactRequest
         * @instance
         */
        EggIncFirstContactRequest.prototype.gameServicesId = "";

        /**
         * EggIncFirstContactRequest deviceId.
         * @member {string} deviceId
         * @memberof ei.EggIncFirstContactRequest
         * @instance
         */
        EggIncFirstContactRequest.prototype.deviceId = "";

        /**
         * EggIncFirstContactRequest username.
         * @member {string} username
         * @memberof ei.EggIncFirstContactRequest
         * @instance
         */
        EggIncFirstContactRequest.prototype.username = "";

        /**
         * EggIncFirstContactRequest clientVersion.
         * @member {number} clientVersion
         * @memberof ei.EggIncFirstContactRequest
         * @instance
         */
        EggIncFirstContactRequest.prototype.clientVersion = 0;

        /**
         * EggIncFirstContactRequest platform.
         * @member {aux.Platform} platform
         * @memberof ei.EggIncFirstContactRequest
         * @instance
         */
        EggIncFirstContactRequest.prototype.platform = 1;

        /**
         * Creates a new EggIncFirstContactRequest instance using the specified properties.
         * @function create
         * @memberof ei.EggIncFirstContactRequest
         * @static
         * @param {ei.IEggIncFirstContactRequest=} [properties] Properties to set
         * @returns {ei.EggIncFirstContactRequest} EggIncFirstContactRequest instance
         */
        EggIncFirstContactRequest.create = function create(properties) {
            return new EggIncFirstContactRequest(properties);
        };

        /**
         * Encodes the specified EggIncFirstContactRequest message. Does not implicitly {@link ei.EggIncFirstContactRequest.verify|verify} messages.
         * @function encode
         * @memberof ei.EggIncFirstContactRequest
         * @static
         * @param {ei.IEggIncFirstContactRequest} message EggIncFirstContactRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EggIncFirstContactRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userId != null && Object.hasOwnProperty.call(message, "userId"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);
            if (message.clientVersion != null && Object.hasOwnProperty.call(message, "clientVersion"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.clientVersion);
            if (message.platform != null && Object.hasOwnProperty.call(message, "platform"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.platform);
            if (message.eiUserId != null && Object.hasOwnProperty.call(message, "eiUserId"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.eiUserId);
            if (message.deviceId != null && Object.hasOwnProperty.call(message, "deviceId"))
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.deviceId);
            if (message.username != null && Object.hasOwnProperty.call(message, "username"))
                writer.uint32(/* id 6, wireType 2 =*/50).string(message.username);
            if (message.gameServicesId != null && Object.hasOwnProperty.call(message, "gameServicesId"))
                writer.uint32(/* id 7, wireType 2 =*/58).string(message.gameServicesId);
            if (message.rinfo != null && Object.hasOwnProperty.call(message, "rinfo"))
                $root.ei.BasicRequestInfo.encode(message.rinfo, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified EggIncFirstContactRequest message, length delimited. Does not implicitly {@link ei.EggIncFirstContactRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ei.EggIncFirstContactRequest
         * @static
         * @param {ei.IEggIncFirstContactRequest} message EggIncFirstContactRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EggIncFirstContactRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an EggIncFirstContactRequest message from the specified reader or buffer.
         * @function decode
         * @memberof ei.EggIncFirstContactRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ei.EggIncFirstContactRequest} EggIncFirstContactRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EggIncFirstContactRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ei.EggIncFirstContactRequest();
            while (reader.pos < end) {
                let tag = reader.uint32();
                switch (tag >>> 3) {
                case 8:
                    message.rinfo = $root.ei.BasicRequestInfo.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.eiUserId = reader.string();
                    break;
                case 1:
                    message.userId = reader.string();
                    break;
                case 7:
                    message.gameServicesId = reader.string();
                    break;
                case 5:
                    message.deviceId = reader.string();
                    break;
                case 6:
                    message.username = reader.string();
                    break;
                case 2:
                    message.clientVersion = reader.uint32();
                    break;
                case 3:
                    message.platform = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an EggIncFirstContactRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ei.EggIncFirstContactRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ei.EggIncFirstContactRequest} EggIncFirstContactRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EggIncFirstContactRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an EggIncFirstContactRequest message.
         * @function verify
         * @memberof ei.EggIncFirstContactRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        EggIncFirstContactRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.rinfo != null && message.hasOwnProperty("rinfo")) {
                let error = $root.ei.BasicRequestInfo.verify(message.rinfo);
                if (error)
                    return "rinfo." + error;
            }
            if (message.eiUserId != null && message.hasOwnProperty("eiUserId"))
                if (!$util.isString(message.eiUserId))
                    return "eiUserId: string expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isString(message.userId))
                    return "userId: string expected";
            if (message.gameServicesId != null && message.hasOwnProperty("gameServicesId"))
                if (!$util.isString(message.gameServicesId))
                    return "gameServicesId: string expected";
            if (message.deviceId != null && message.hasOwnProperty("deviceId"))
                if (!$util.isString(message.deviceId))
                    return "deviceId: string expected";
            if (message.username != null && message.hasOwnProperty("username"))
                if (!$util.isString(message.username))
                    return "username: string expected";
            if (message.clientVersion != null && message.hasOwnProperty("clientVersion"))
                if (!$util.isInteger(message.clientVersion))
                    return "clientVersion: integer expected";
            if (message.platform != null && message.hasOwnProperty("platform"))
                switch (message.platform) {
                default:
                    return "platform: enum value expected";
                case 1:
                case 2:
                    break;
                }
            return null;
        };

        /**
         * Creates an EggIncFirstContactRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ei.EggIncFirstContactRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ei.EggIncFirstContactRequest} EggIncFirstContactRequest
         */
        EggIncFirstContactRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.ei.EggIncFirstContactRequest)
                return object;
            let message = new $root.ei.EggIncFirstContactRequest();
            if (object.rinfo != null) {
                if (typeof object.rinfo !== "object")
                    throw TypeError(".ei.EggIncFirstContactRequest.rinfo: object expected");
                message.rinfo = $root.ei.BasicRequestInfo.fromObject(object.rinfo);
            }
            if (object.eiUserId != null)
                message.eiUserId = String(object.eiUserId);
            if (object.userId != null)
                message.userId = String(object.userId);
            if (object.gameServicesId != null)
                message.gameServicesId = String(object.gameServicesId);
            if (object.deviceId != null)
                message.deviceId = String(object.deviceId);
            if (object.username != null)
                message.username = String(object.username);
            if (object.clientVersion != null)
                message.clientVersion = object.clientVersion >>> 0;
            switch (object.platform) {
            case "IOS":
            case 1:
                message.platform = 1;
                break;
            case "DROID":
            case 2:
                message.platform = 2;
                break;
            }
            return message;
        };

        /**
         * Creates a plain object from an EggIncFirstContactRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ei.EggIncFirstContactRequest
         * @static
         * @param {ei.EggIncFirstContactRequest} message EggIncFirstContactRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        EggIncFirstContactRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.defaults) {
                object.userId = "";
                object.clientVersion = 0;
                object.platform = options.enums === String ? "IOS" : 1;
                object.eiUserId = "";
                object.deviceId = "";
                object.username = "";
                object.gameServicesId = "";
                object.rinfo = null;
            }
            if (message.userId != null && message.hasOwnProperty("userId"))
                object.userId = message.userId;
            if (message.clientVersion != null && message.hasOwnProperty("clientVersion"))
                object.clientVersion = message.clientVersion;
            if (message.platform != null && message.hasOwnProperty("platform"))
                object.platform = options.enums === String ? $root.aux.Platform[message.platform] : message.platform;
            if (message.eiUserId != null && message.hasOwnProperty("eiUserId"))
                object.eiUserId = message.eiUserId;
            if (message.deviceId != null && message.hasOwnProperty("deviceId"))
                object.deviceId = message.deviceId;
            if (message.username != null && message.hasOwnProperty("username"))
                object.username = message.username;
            if (message.gameServicesId != null && message.hasOwnProperty("gameServicesId"))
                object.gameServicesId = message.gameServicesId;
            if (message.rinfo != null && message.hasOwnProperty("rinfo"))
                object.rinfo = $root.ei.BasicRequestInfo.toObject(message.rinfo, options);
            return object;
        };

        /**
         * Converts this EggIncFirstContactRequest to JSON.
         * @function toJSON
         * @memberof ei.EggIncFirstContactRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        EggIncFirstContactRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return EggIncFirstContactRequest;
    })();

    ei.EggIncFirstContactResponse = (function() {

        /**
         * Properties of an EggIncFirstContactResponse.
         * @memberof ei
         * @interface IEggIncFirstContactResponse
         * @property {string|null} [eiUserId] EggIncFirstContactResponse eiUserId
         * @property {Array.<string>|null} [idsTransferred] EggIncFirstContactResponse idsTransferred
         * @property {number|null} [errorCode] EggIncFirstContactResponse errorCode
         * @property {string|null} [errorMessage] EggIncFirstContactResponse errorMessage
         * @property {ei.IBackup|null} [backup] EggIncFirstContactResponse backup
         */

        /**
         * Constructs a new EggIncFirstContactResponse.
         * @memberof ei
         * @classdesc Represents an EggIncFirstContactResponse.
         * @implements IEggIncFirstContactResponse
         * @constructor
         * @param {ei.IEggIncFirstContactResponse=} [properties] Properties to set
         */
        function EggIncFirstContactResponse(properties) {
            this.idsTransferred = [];
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * EggIncFirstContactResponse eiUserId.
         * @member {string} eiUserId
         * @memberof ei.EggIncFirstContactResponse
         * @instance
         */
        EggIncFirstContactResponse.prototype.eiUserId = "";

        /**
         * EggIncFirstContactResponse idsTransferred.
         * @member {Array.<string>} idsTransferred
         * @memberof ei.EggIncFirstContactResponse
         * @instance
         */
        EggIncFirstContactResponse.prototype.idsTransferred = $util.emptyArray;

        /**
         * EggIncFirstContactResponse errorCode.
         * @member {number} errorCode
         * @memberof ei.EggIncFirstContactResponse
         * @instance
         */
        EggIncFirstContactResponse.prototype.errorCode = 0;

        /**
         * EggIncFirstContactResponse errorMessage.
         * @member {string} errorMessage
         * @memberof ei.EggIncFirstContactResponse
         * @instance
         */
        EggIncFirstContactResponse.prototype.errorMessage = "";

        /**
         * EggIncFirstContactResponse backup.
         * @member {ei.IBackup|null|undefined} backup
         * @memberof ei.EggIncFirstContactResponse
         * @instance
         */
        EggIncFirstContactResponse.prototype.backup = null;

        /**
         * Creates a new EggIncFirstContactResponse instance using the specified properties.
         * @function create
         * @memberof ei.EggIncFirstContactResponse
         * @static
         * @param {ei.IEggIncFirstContactResponse=} [properties] Properties to set
         * @returns {ei.EggIncFirstContactResponse} EggIncFirstContactResponse instance
         */
        EggIncFirstContactResponse.create = function create(properties) {
            return new EggIncFirstContactResponse(properties);
        };

        /**
         * Encodes the specified EggIncFirstContactResponse message. Does not implicitly {@link ei.EggIncFirstContactResponse.verify|verify} messages.
         * @function encode
         * @memberof ei.EggIncFirstContactResponse
         * @static
         * @param {ei.IEggIncFirstContactResponse} message EggIncFirstContactResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EggIncFirstContactResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.backup != null && Object.hasOwnProperty.call(message, "backup"))
                $root.ei.Backup.encode(message.backup, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.eiUserId != null && Object.hasOwnProperty.call(message, "eiUserId"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.eiUserId);
            if (message.idsTransferred != null && message.idsTransferred.length)
                for (let i = 0; i < message.idsTransferred.length; ++i)
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.idsTransferred[i]);
            if (message.errorCode != null && Object.hasOwnProperty.call(message, "errorCode"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.errorCode);
            if (message.errorMessage != null && Object.hasOwnProperty.call(message, "errorMessage"))
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.errorMessage);
            return writer;
        };

        /**
         * Encodes the specified EggIncFirstContactResponse message, length delimited. Does not implicitly {@link ei.EggIncFirstContactResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ei.EggIncFirstContactResponse
         * @static
         * @param {ei.IEggIncFirstContactResponse} message EggIncFirstContactResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EggIncFirstContactResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an EggIncFirstContactResponse message from the specified reader or buffer.
         * @function decode
         * @memberof ei.EggIncFirstContactResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ei.EggIncFirstContactResponse} EggIncFirstContactResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EggIncFirstContactResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ei.EggIncFirstContactResponse();
            while (reader.pos < end) {
                let tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.eiUserId = reader.string();
                    break;
                case 3:
                    if (!(message.idsTransferred && message.idsTransferred.length))
                        message.idsTransferred = [];
                    message.idsTransferred.push(reader.string());
                    break;
                case 4:
                    message.errorCode = reader.uint32();
                    break;
                case 5:
                    message.errorMessage = reader.string();
                    break;
                case 1:
                    message.backup = $root.ei.Backup.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an EggIncFirstContactResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ei.EggIncFirstContactResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ei.EggIncFirstContactResponse} EggIncFirstContactResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EggIncFirstContactResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an EggIncFirstContactResponse message.
         * @function verify
         * @memberof ei.EggIncFirstContactResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        EggIncFirstContactResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.eiUserId != null && message.hasOwnProperty("eiUserId"))
                if (!$util.isString(message.eiUserId))
                    return "eiUserId: string expected";
            if (message.idsTransferred != null && message.hasOwnProperty("idsTransferred")) {
                if (!Array.isArray(message.idsTransferred))
                    return "idsTransferred: array expected";
                for (let i = 0; i < message.idsTransferred.length; ++i)
                    if (!$util.isString(message.idsTransferred[i]))
                        return "idsTransferred: string[] expected";
            }
            if (message.errorCode != null && message.hasOwnProperty("errorCode"))
                if (!$util.isInteger(message.errorCode))
                    return "errorCode: integer expected";
            if (message.errorMessage != null && message.hasOwnProperty("errorMessage"))
                if (!$util.isString(message.errorMessage))
                    return "errorMessage: string expected";
            if (message.backup != null && message.hasOwnProperty("backup")) {
                let error = $root.ei.Backup.verify(message.backup);
                if (error)
                    return "backup." + error;
            }
            return null;
        };

        /**
         * Creates an EggIncFirstContactResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ei.EggIncFirstContactResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ei.EggIncFirstContactResponse} EggIncFirstContactResponse
         */
        EggIncFirstContactResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.ei.EggIncFirstContactResponse)
                return object;
            let message = new $root.ei.EggIncFirstContactResponse();
            if (object.eiUserId != null)
                message.eiUserId = String(object.eiUserId);
            if (object.idsTransferred) {
                if (!Array.isArray(object.idsTransferred))
                    throw TypeError(".ei.EggIncFirstContactResponse.idsTransferred: array expected");
                message.idsTransferred = [];
                for (let i = 0; i < object.idsTransferred.length; ++i)
                    message.idsTransferred[i] = String(object.idsTransferred[i]);
            }
            if (object.errorCode != null)
                message.errorCode = object.errorCode >>> 0;
            if (object.errorMessage != null)
                message.errorMessage = String(object.errorMessage);
            if (object.backup != null) {
                if (typeof object.backup !== "object")
                    throw TypeError(".ei.EggIncFirstContactResponse.backup: object expected");
                message.backup = $root.ei.Backup.fromObject(object.backup);
            }
            return message;
        };

        /**
         * Creates a plain object from an EggIncFirstContactResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ei.EggIncFirstContactResponse
         * @static
         * @param {ei.EggIncFirstContactResponse} message EggIncFirstContactResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        EggIncFirstContactResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.arrays || options.defaults)
                object.idsTransferred = [];
            if (options.defaults) {
                object.backup = null;
                object.eiUserId = "";
                object.errorCode = 0;
                object.errorMessage = "";
            }
            if (message.backup != null && message.hasOwnProperty("backup"))
                object.backup = $root.ei.Backup.toObject(message.backup, options);
            if (message.eiUserId != null && message.hasOwnProperty("eiUserId"))
                object.eiUserId = message.eiUserId;
            if (message.idsTransferred && message.idsTransferred.length) {
                object.idsTransferred = [];
                for (let j = 0; j < message.idsTransferred.length; ++j)
                    object.idsTransferred[j] = message.idsTransferred[j];
            }
            if (message.errorCode != null && message.hasOwnProperty("errorCode"))
                object.errorCode = message.errorCode;
            if (message.errorMessage != null && message.hasOwnProperty("errorMessage"))
                object.errorMessage = message.errorMessage;
            return object;
        };

        /**
         * Converts this EggIncFirstContactResponse to JSON.
         * @function toJSON
         * @memberof ei.EggIncFirstContactResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        EggIncFirstContactResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * ErrorCodes enum.
         * @name ei.EggIncFirstContactResponse.ErrorCodes
         * @enum {number}
         * @property {number} NO_ERROR=0 NO_ERROR value
         * @property {number} EXISTING_USER_W_GAMER_ID=1 EXISTING_USER_W_GAMER_ID value
         * @property {number} USER_NOT_FOUND=2 USER_NOT_FOUND value
         * @property {number} BACKUP_CONFLICT=3 BACKUP_CONFLICT value
         */
        EggIncFirstContactResponse.ErrorCodes = (function() {
            const valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "NO_ERROR"] = 0;
            values[valuesById[1] = "EXISTING_USER_W_GAMER_ID"] = 1;
            values[valuesById[2] = "USER_NOT_FOUND"] = 2;
            values[valuesById[3] = "BACKUP_CONFLICT"] = 3;
            return values;
        })();

        return EggIncFirstContactResponse;
    })();

    ei.EggIncAdConfig = (function() {

        /**
         * Properties of an EggIncAdConfig.
         * @memberof ei
         * @interface IEggIncAdConfig
         * @property {Array.<aux.AdNetwork>|null} [networkPriority] EggIncAdConfig networkPriority
         */

        /**
         * Constructs a new EggIncAdConfig.
         * @memberof ei
         * @classdesc Represents an EggIncAdConfig.
         * @implements IEggIncAdConfig
         * @constructor
         * @param {ei.IEggIncAdConfig=} [properties] Properties to set
         */
        function EggIncAdConfig(properties) {
            this.networkPriority = [];
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * EggIncAdConfig networkPriority.
         * @member {Array.<aux.AdNetwork>} networkPriority
         * @memberof ei.EggIncAdConfig
         * @instance
         */
        EggIncAdConfig.prototype.networkPriority = $util.emptyArray;

        /**
         * Creates a new EggIncAdConfig instance using the specified properties.
         * @function create
         * @memberof ei.EggIncAdConfig
         * @static
         * @param {ei.IEggIncAdConfig=} [properties] Properties to set
         * @returns {ei.EggIncAdConfig} EggIncAdConfig instance
         */
        EggIncAdConfig.create = function create(properties) {
            return new EggIncAdConfig(properties);
        };

        /**
         * Encodes the specified EggIncAdConfig message. Does not implicitly {@link ei.EggIncAdConfig.verify|verify} messages.
         * @function encode
         * @memberof ei.EggIncAdConfig
         * @static
         * @param {ei.IEggIncAdConfig} message EggIncAdConfig message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EggIncAdConfig.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.networkPriority != null && message.networkPriority.length)
                for (let i = 0; i < message.networkPriority.length; ++i)
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.networkPriority[i]);
            return writer;
        };

        /**
         * Encodes the specified EggIncAdConfig message, length delimited. Does not implicitly {@link ei.EggIncAdConfig.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ei.EggIncAdConfig
         * @static
         * @param {ei.IEggIncAdConfig} message EggIncAdConfig message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EggIncAdConfig.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an EggIncAdConfig message from the specified reader or buffer.
         * @function decode
         * @memberof ei.EggIncAdConfig
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ei.EggIncAdConfig} EggIncAdConfig
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EggIncAdConfig.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ei.EggIncAdConfig();
            while (reader.pos < end) {
                let tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.networkPriority && message.networkPriority.length))
                        message.networkPriority = [];
                    if ((tag & 7) === 2) {
                        let end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.networkPriority.push(reader.int32());
                    } else
                        message.networkPriority.push(reader.int32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an EggIncAdConfig message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ei.EggIncAdConfig
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ei.EggIncAdConfig} EggIncAdConfig
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EggIncAdConfig.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an EggIncAdConfig message.
         * @function verify
         * @memberof ei.EggIncAdConfig
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        EggIncAdConfig.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.networkPriority != null && message.hasOwnProperty("networkPriority")) {
                if (!Array.isArray(message.networkPriority))
                    return "networkPriority: array expected";
                for (let i = 0; i < message.networkPriority.length; ++i)
                    switch (message.networkPriority[i]) {
                    default:
                        return "networkPriority: enum value[] expected";
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                        break;
                    }
            }
            return null;
        };

        /**
         * Creates an EggIncAdConfig message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ei.EggIncAdConfig
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ei.EggIncAdConfig} EggIncAdConfig
         */
        EggIncAdConfig.fromObject = function fromObject(object) {
            if (object instanceof $root.ei.EggIncAdConfig)
                return object;
            let message = new $root.ei.EggIncAdConfig();
            if (object.networkPriority) {
                if (!Array.isArray(object.networkPriority))
                    throw TypeError(".ei.EggIncAdConfig.networkPriority: array expected");
                message.networkPriority = [];
                for (let i = 0; i < object.networkPriority.length; ++i)
                    switch (object.networkPriority[i]) {
                    default:
                    case "VUNGLE":
                    case 0:
                        message.networkPriority[i] = 0;
                        break;
                    case "CHARTBOOST":
                    case 1:
                        message.networkPriority[i] = 1;
                        break;
                    case "AD_COLONY":
                    case 2:
                        message.networkPriority[i] = 2;
                        break;
                    case "HYPER_MX":
                    case 3:
                        message.networkPriority[i] = 3;
                        break;
                    case "UNITY":
                    case 4:
                        message.networkPriority[i] = 4;
                        break;
                    case "FACEBOOK":
                    case 5:
                        message.networkPriority[i] = 5;
                        break;
                    case "APPLOVIN":
                    case 6:
                        message.networkPriority[i] = 6;
                        break;
                    }
            }
            return message;
        };

        /**
         * Creates a plain object from an EggIncAdConfig message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ei.EggIncAdConfig
         * @static
         * @param {ei.EggIncAdConfig} message EggIncAdConfig
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        EggIncAdConfig.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.arrays || options.defaults)
                object.networkPriority = [];
            if (message.networkPriority && message.networkPriority.length) {
                object.networkPriority = [];
                for (let j = 0; j < message.networkPriority.length; ++j)
                    object.networkPriority[j] = options.enums === String ? $root.aux.AdNetwork[message.networkPriority[j]] : message.networkPriority[j];
            }
            return object;
        };

        /**
         * Converts this EggIncAdConfig to JSON.
         * @function toJSON
         * @memberof ei.EggIncAdConfig
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        EggIncAdConfig.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return EggIncAdConfig;
    })();

    ei.DailyGiftInfo = (function() {

        /**
         * Properties of a DailyGiftInfo.
         * @memberof ei
         * @interface IDailyGiftInfo
         * @property {number|null} [currentDay] DailyGiftInfo currentDay
         * @property {number|null} [secondsToNextDay] DailyGiftInfo secondsToNextDay
         */

        /**
         * Constructs a new DailyGiftInfo.
         * @memberof ei
         * @classdesc Represents a DailyGiftInfo.
         * @implements IDailyGiftInfo
         * @constructor
         * @param {ei.IDailyGiftInfo=} [properties] Properties to set
         */
        function DailyGiftInfo(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * DailyGiftInfo currentDay.
         * @member {number} currentDay
         * @memberof ei.DailyGiftInfo
         * @instance
         */
        DailyGiftInfo.prototype.currentDay = 0;

        /**
         * DailyGiftInfo secondsToNextDay.
         * @member {number} secondsToNextDay
         * @memberof ei.DailyGiftInfo
         * @instance
         */
        DailyGiftInfo.prototype.secondsToNextDay = 0;

        /**
         * Creates a new DailyGiftInfo instance using the specified properties.
         * @function create
         * @memberof ei.DailyGiftInfo
         * @static
         * @param {ei.IDailyGiftInfo=} [properties] Properties to set
         * @returns {ei.DailyGiftInfo} DailyGiftInfo instance
         */
        DailyGiftInfo.create = function create(properties) {
            return new DailyGiftInfo(properties);
        };

        /**
         * Encodes the specified DailyGiftInfo message. Does not implicitly {@link ei.DailyGiftInfo.verify|verify} messages.
         * @function encode
         * @memberof ei.DailyGiftInfo
         * @static
         * @param {ei.IDailyGiftInfo} message DailyGiftInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        DailyGiftInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.currentDay != null && Object.hasOwnProperty.call(message, "currentDay"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.currentDay);
            if (message.secondsToNextDay != null && Object.hasOwnProperty.call(message, "secondsToNextDay"))
                writer.uint32(/* id 2, wireType 1 =*/17).double(message.secondsToNextDay);
            return writer;
        };

        /**
         * Encodes the specified DailyGiftInfo message, length delimited. Does not implicitly {@link ei.DailyGiftInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ei.DailyGiftInfo
         * @static
         * @param {ei.IDailyGiftInfo} message DailyGiftInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        DailyGiftInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a DailyGiftInfo message from the specified reader or buffer.
         * @function decode
         * @memberof ei.DailyGiftInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ei.DailyGiftInfo} DailyGiftInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        DailyGiftInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ei.DailyGiftInfo();
            while (reader.pos < end) {
                let tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.currentDay = reader.uint32();
                    break;
                case 2:
                    message.secondsToNextDay = reader.double();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a DailyGiftInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ei.DailyGiftInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ei.DailyGiftInfo} DailyGiftInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        DailyGiftInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a DailyGiftInfo message.
         * @function verify
         * @memberof ei.DailyGiftInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        DailyGiftInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.currentDay != null && message.hasOwnProperty("currentDay"))
                if (!$util.isInteger(message.currentDay))
                    return "currentDay: integer expected";
            if (message.secondsToNextDay != null && message.hasOwnProperty("secondsToNextDay"))
                if (typeof message.secondsToNextDay !== "number")
                    return "secondsToNextDay: number expected";
            return null;
        };

        /**
         * Creates a DailyGiftInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ei.DailyGiftInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ei.DailyGiftInfo} DailyGiftInfo
         */
        DailyGiftInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.ei.DailyGiftInfo)
                return object;
            let message = new $root.ei.DailyGiftInfo();
            if (object.currentDay != null)
                message.currentDay = object.currentDay >>> 0;
            if (object.secondsToNextDay != null)
                message.secondsToNextDay = Number(object.secondsToNextDay);
            return message;
        };

        /**
         * Creates a plain object from a DailyGiftInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ei.DailyGiftInfo
         * @static
         * @param {ei.DailyGiftInfo} message DailyGiftInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        DailyGiftInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.defaults) {
                object.currentDay = 0;
                object.secondsToNextDay = 0;
            }
            if (message.currentDay != null && message.hasOwnProperty("currentDay"))
                object.currentDay = message.currentDay;
            if (message.secondsToNextDay != null && message.hasOwnProperty("secondsToNextDay"))
                object.secondsToNextDay = options.json && !isFinite(message.secondsToNextDay) ? String(message.secondsToNextDay) : message.secondsToNextDay;
            return object;
        };

        /**
         * Converts this DailyGiftInfo to JSON.
         * @function toJSON
         * @memberof ei.DailyGiftInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        DailyGiftInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return DailyGiftInfo;
    })();

    ei.SalesInfoRequest = (function() {

        /**
         * Properties of a SalesInfoRequest.
         * @memberof ei
         * @interface ISalesInfoRequest
         * @property {string|null} [userId] SalesInfoRequest userId
         * @property {boolean|null} [piggyFull] SalesInfoRequest piggyFull
         * @property {boolean|null} [piggyFoundFull] SalesInfoRequest piggyFoundFull
         * @property {number|null} [secondsFullRealtime] SalesInfoRequest secondsFullRealtime
         * @property {number|null} [secondsFullGametime] SalesInfoRequest secondsFullGametime
         * @property {number|null} [lostIncrements] SalesInfoRequest lostIncrements
         * @property {number|null} [currentClientVersion] SalesInfoRequest currentClientVersion
         */

        /**
         * Constructs a new SalesInfoRequest.
         * @memberof ei
         * @classdesc Represents a SalesInfoRequest.
         * @implements ISalesInfoRequest
         * @constructor
         * @param {ei.ISalesInfoRequest=} [properties] Properties to set
         */
        function SalesInfoRequest(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * SalesInfoRequest userId.
         * @member {string} userId
         * @memberof ei.SalesInfoRequest
         * @instance
         */
        SalesInfoRequest.prototype.userId = "";

        /**
         * SalesInfoRequest piggyFull.
         * @member {boolean} piggyFull
         * @memberof ei.SalesInfoRequest
         * @instance
         */
        SalesInfoRequest.prototype.piggyFull = false;

        /**
         * SalesInfoRequest piggyFoundFull.
         * @member {boolean} piggyFoundFull
         * @memberof ei.SalesInfoRequest
         * @instance
         */
        SalesInfoRequest.prototype.piggyFoundFull = false;

        /**
         * SalesInfoRequest secondsFullRealtime.
         * @member {number} secondsFullRealtime
         * @memberof ei.SalesInfoRequest
         * @instance
         */
        SalesInfoRequest.prototype.secondsFullRealtime = 0;

        /**
         * SalesInfoRequest secondsFullGametime.
         * @member {number} secondsFullGametime
         * @memberof ei.SalesInfoRequest
         * @instance
         */
        SalesInfoRequest.prototype.secondsFullGametime = 0;

        /**
         * SalesInfoRequest lostIncrements.
         * @member {number} lostIncrements
         * @memberof ei.SalesInfoRequest
         * @instance
         */
        SalesInfoRequest.prototype.lostIncrements = 0;

        /**
         * SalesInfoRequest currentClientVersion.
         * @member {number} currentClientVersion
         * @memberof ei.SalesInfoRequest
         * @instance
         */
        SalesInfoRequest.prototype.currentClientVersion = 0;

        /**
         * Creates a new SalesInfoRequest instance using the specified properties.
         * @function create
         * @memberof ei.SalesInfoRequest
         * @static
         * @param {ei.ISalesInfoRequest=} [properties] Properties to set
         * @returns {ei.SalesInfoRequest} SalesInfoRequest instance
         */
        SalesInfoRequest.create = function create(properties) {
            return new SalesInfoRequest(properties);
        };

        /**
         * Encodes the specified SalesInfoRequest message. Does not implicitly {@link ei.SalesInfoRequest.verify|verify} messages.
         * @function encode
         * @memberof ei.SalesInfoRequest
         * @static
         * @param {ei.ISalesInfoRequest} message SalesInfoRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SalesInfoRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userId != null && Object.hasOwnProperty.call(message, "userId"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);
            if (message.piggyFull != null && Object.hasOwnProperty.call(message, "piggyFull"))
                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.piggyFull);
            if (message.piggyFoundFull != null && Object.hasOwnProperty.call(message, "piggyFoundFull"))
                writer.uint32(/* id 3, wireType 0 =*/24).bool(message.piggyFoundFull);
            if (message.secondsFullRealtime != null && Object.hasOwnProperty.call(message, "secondsFullRealtime"))
                writer.uint32(/* id 4, wireType 1 =*/33).double(message.secondsFullRealtime);
            if (message.secondsFullGametime != null && Object.hasOwnProperty.call(message, "secondsFullGametime"))
                writer.uint32(/* id 5, wireType 1 =*/41).double(message.secondsFullGametime);
            if (message.lostIncrements != null && Object.hasOwnProperty.call(message, "lostIncrements"))
                writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.lostIncrements);
            if (message.currentClientVersion != null && Object.hasOwnProperty.call(message, "currentClientVersion"))
                writer.uint32(/* id 10, wireType 0 =*/80).uint32(message.currentClientVersion);
            return writer;
        };

        /**
         * Encodes the specified SalesInfoRequest message, length delimited. Does not implicitly {@link ei.SalesInfoRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ei.SalesInfoRequest
         * @static
         * @param {ei.ISalesInfoRequest} message SalesInfoRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SalesInfoRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a SalesInfoRequest message from the specified reader or buffer.
         * @function decode
         * @memberof ei.SalesInfoRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ei.SalesInfoRequest} SalesInfoRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SalesInfoRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ei.SalesInfoRequest();
            while (reader.pos < end) {
                let tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.userId = reader.string();
                    break;
                case 2:
                    message.piggyFull = reader.bool();
                    break;
                case 3:
                    message.piggyFoundFull = reader.bool();
                    break;
                case 4:
                    message.secondsFullRealtime = reader.double();
                    break;
                case 5:
                    message.secondsFullGametime = reader.double();
                    break;
                case 7:
                    message.lostIncrements = reader.uint32();
                    break;
                case 10:
                    message.currentClientVersion = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a SalesInfoRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ei.SalesInfoRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ei.SalesInfoRequest} SalesInfoRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SalesInfoRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a SalesInfoRequest message.
         * @function verify
         * @memberof ei.SalesInfoRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        SalesInfoRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isString(message.userId))
                    return "userId: string expected";
            if (message.piggyFull != null && message.hasOwnProperty("piggyFull"))
                if (typeof message.piggyFull !== "boolean")
                    return "piggyFull: boolean expected";
            if (message.piggyFoundFull != null && message.hasOwnProperty("piggyFoundFull"))
                if (typeof message.piggyFoundFull !== "boolean")
                    return "piggyFoundFull: boolean expected";
            if (message.secondsFullRealtime != null && message.hasOwnProperty("secondsFullRealtime"))
                if (typeof message.secondsFullRealtime !== "number")
                    return "secondsFullRealtime: number expected";
            if (message.secondsFullGametime != null && message.hasOwnProperty("secondsFullGametime"))
                if (typeof message.secondsFullGametime !== "number")
                    return "secondsFullGametime: number expected";
            if (message.lostIncrements != null && message.hasOwnProperty("lostIncrements"))
                if (!$util.isInteger(message.lostIncrements))
                    return "lostIncrements: integer expected";
            if (message.currentClientVersion != null && message.hasOwnProperty("currentClientVersion"))
                if (!$util.isInteger(message.currentClientVersion))
                    return "currentClientVersion: integer expected";
            return null;
        };

        /**
         * Creates a SalesInfoRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ei.SalesInfoRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ei.SalesInfoRequest} SalesInfoRequest
         */
        SalesInfoRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.ei.SalesInfoRequest)
                return object;
            let message = new $root.ei.SalesInfoRequest();
            if (object.userId != null)
                message.userId = String(object.userId);
            if (object.piggyFull != null)
                message.piggyFull = Boolean(object.piggyFull);
            if (object.piggyFoundFull != null)
                message.piggyFoundFull = Boolean(object.piggyFoundFull);
            if (object.secondsFullRealtime != null)
                message.secondsFullRealtime = Number(object.secondsFullRealtime);
            if (object.secondsFullGametime != null)
                message.secondsFullGametime = Number(object.secondsFullGametime);
            if (object.lostIncrements != null)
                message.lostIncrements = object.lostIncrements >>> 0;
            if (object.currentClientVersion != null)
                message.currentClientVersion = object.currentClientVersion >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a SalesInfoRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ei.SalesInfoRequest
         * @static
         * @param {ei.SalesInfoRequest} message SalesInfoRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        SalesInfoRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.defaults) {
                object.userId = "";
                object.piggyFull = false;
                object.piggyFoundFull = false;
                object.secondsFullRealtime = 0;
                object.secondsFullGametime = 0;
                object.lostIncrements = 0;
                object.currentClientVersion = 0;
            }
            if (message.userId != null && message.hasOwnProperty("userId"))
                object.userId = message.userId;
            if (message.piggyFull != null && message.hasOwnProperty("piggyFull"))
                object.piggyFull = message.piggyFull;
            if (message.piggyFoundFull != null && message.hasOwnProperty("piggyFoundFull"))
                object.piggyFoundFull = message.piggyFoundFull;
            if (message.secondsFullRealtime != null && message.hasOwnProperty("secondsFullRealtime"))
                object.secondsFullRealtime = options.json && !isFinite(message.secondsFullRealtime) ? String(message.secondsFullRealtime) : message.secondsFullRealtime;
            if (message.secondsFullGametime != null && message.hasOwnProperty("secondsFullGametime"))
                object.secondsFullGametime = options.json && !isFinite(message.secondsFullGametime) ? String(message.secondsFullGametime) : message.secondsFullGametime;
            if (message.lostIncrements != null && message.hasOwnProperty("lostIncrements"))
                object.lostIncrements = message.lostIncrements;
            if (message.currentClientVersion != null && message.hasOwnProperty("currentClientVersion"))
                object.currentClientVersion = message.currentClientVersion;
            return object;
        };

        /**
         * Converts this SalesInfoRequest to JSON.
         * @function toJSON
         * @memberof ei.SalesInfoRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        SalesInfoRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return SalesInfoRequest;
    })();

    ei.IAPSaleEntry = (function() {

        /**
         * Properties of a IAPSaleEntry.
         * @memberof ei
         * @interface IIAPSaleEntry
         * @property {string|null} [productId] IAPSaleEntry productId
         * @property {number|null} [secondsRemaining] IAPSaleEntry secondsRemaining
         * @property {string|null} [discountString] IAPSaleEntry discountString
         * @property {string|null} [saleId] IAPSaleEntry saleId
         */

        /**
         * Constructs a new IAPSaleEntry.
         * @memberof ei
         * @classdesc Represents a IAPSaleEntry.
         * @implements IIAPSaleEntry
         * @constructor
         * @param {ei.IIAPSaleEntry=} [properties] Properties to set
         */
        function IAPSaleEntry(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * IAPSaleEntry productId.
         * @member {string} productId
         * @memberof ei.IAPSaleEntry
         * @instance
         */
        IAPSaleEntry.prototype.productId = "";

        /**
         * IAPSaleEntry secondsRemaining.
         * @member {number} secondsRemaining
         * @memberof ei.IAPSaleEntry
         * @instance
         */
        IAPSaleEntry.prototype.secondsRemaining = 0;

        /**
         * IAPSaleEntry discountString.
         * @member {string} discountString
         * @memberof ei.IAPSaleEntry
         * @instance
         */
        IAPSaleEntry.prototype.discountString = "";

        /**
         * IAPSaleEntry saleId.
         * @member {string} saleId
         * @memberof ei.IAPSaleEntry
         * @instance
         */
        IAPSaleEntry.prototype.saleId = "";

        /**
         * Creates a new IAPSaleEntry instance using the specified properties.
         * @function create
         * @memberof ei.IAPSaleEntry
         * @static
         * @param {ei.IIAPSaleEntry=} [properties] Properties to set
         * @returns {ei.IAPSaleEntry} IAPSaleEntry instance
         */
        IAPSaleEntry.create = function create(properties) {
            return new IAPSaleEntry(properties);
        };

        /**
         * Encodes the specified IAPSaleEntry message. Does not implicitly {@link ei.IAPSaleEntry.verify|verify} messages.
         * @function encode
         * @memberof ei.IAPSaleEntry
         * @static
         * @param {ei.IIAPSaleEntry} message IAPSaleEntry message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        IAPSaleEntry.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.productId != null && Object.hasOwnProperty.call(message, "productId"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.productId);
            if (message.secondsRemaining != null && Object.hasOwnProperty.call(message, "secondsRemaining"))
                writer.uint32(/* id 2, wireType 1 =*/17).double(message.secondsRemaining);
            if (message.discountString != null && Object.hasOwnProperty.call(message, "discountString"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.discountString);
            if (message.saleId != null && Object.hasOwnProperty.call(message, "saleId"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.saleId);
            return writer;
        };

        /**
         * Encodes the specified IAPSaleEntry message, length delimited. Does not implicitly {@link ei.IAPSaleEntry.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ei.IAPSaleEntry
         * @static
         * @param {ei.IIAPSaleEntry} message IAPSaleEntry message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        IAPSaleEntry.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a IAPSaleEntry message from the specified reader or buffer.
         * @function decode
         * @memberof ei.IAPSaleEntry
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ei.IAPSaleEntry} IAPSaleEntry
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        IAPSaleEntry.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ei.IAPSaleEntry();
            while (reader.pos < end) {
                let tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.productId = reader.string();
                    break;
                case 2:
                    message.secondsRemaining = reader.double();
                    break;
                case 3:
                    message.discountString = reader.string();
                    break;
                case 4:
                    message.saleId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a IAPSaleEntry message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ei.IAPSaleEntry
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ei.IAPSaleEntry} IAPSaleEntry
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        IAPSaleEntry.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a IAPSaleEntry message.
         * @function verify
         * @memberof ei.IAPSaleEntry
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        IAPSaleEntry.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.productId != null && message.hasOwnProperty("productId"))
                if (!$util.isString(message.productId))
                    return "productId: string expected";
            if (message.secondsRemaining != null && message.hasOwnProperty("secondsRemaining"))
                if (typeof message.secondsRemaining !== "number")
                    return "secondsRemaining: number expected";
            if (message.discountString != null && message.hasOwnProperty("discountString"))
                if (!$util.isString(message.discountString))
                    return "discountString: string expected";
            if (message.saleId != null && message.hasOwnProperty("saleId"))
                if (!$util.isString(message.saleId))
                    return "saleId: string expected";
            return null;
        };

        /**
         * Creates a IAPSaleEntry message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ei.IAPSaleEntry
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ei.IAPSaleEntry} IAPSaleEntry
         */
        IAPSaleEntry.fromObject = function fromObject(object) {
            if (object instanceof $root.ei.IAPSaleEntry)
                return object;
            let message = new $root.ei.IAPSaleEntry();
            if (object.productId != null)
                message.productId = String(object.productId);
            if (object.secondsRemaining != null)
                message.secondsRemaining = Number(object.secondsRemaining);
            if (object.discountString != null)
                message.discountString = String(object.discountString);
            if (object.saleId != null)
                message.saleId = String(object.saleId);
            return message;
        };

        /**
         * Creates a plain object from a IAPSaleEntry message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ei.IAPSaleEntry
         * @static
         * @param {ei.IAPSaleEntry} message IAPSaleEntry
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        IAPSaleEntry.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.defaults) {
                object.productId = "";
                object.secondsRemaining = 0;
                object.discountString = "";
                object.saleId = "";
            }
            if (message.productId != null && message.hasOwnProperty("productId"))
                object.productId = message.productId;
            if (message.secondsRemaining != null && message.hasOwnProperty("secondsRemaining"))
                object.secondsRemaining = options.json && !isFinite(message.secondsRemaining) ? String(message.secondsRemaining) : message.secondsRemaining;
            if (message.discountString != null && message.hasOwnProperty("discountString"))
                object.discountString = message.discountString;
            if (message.saleId != null && message.hasOwnProperty("saleId"))
                object.saleId = message.saleId;
            return object;
        };

        /**
         * Converts this IAPSaleEntry to JSON.
         * @function toJSON
         * @memberof ei.IAPSaleEntry
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        IAPSaleEntry.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return IAPSaleEntry;
    })();

    ei.SalesInfo = (function() {

        /**
         * Properties of a SalesInfo.
         * @memberof ei
         * @interface ISalesInfo
         * @property {Array.<ei.IIAPSaleEntry>|null} [sales] SalesInfo sales
         */

        /**
         * Constructs a new SalesInfo.
         * @memberof ei
         * @classdesc Represents a SalesInfo.
         * @implements ISalesInfo
         * @constructor
         * @param {ei.ISalesInfo=} [properties] Properties to set
         */
        function SalesInfo(properties) {
            this.sales = [];
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * SalesInfo sales.
         * @member {Array.<ei.IIAPSaleEntry>} sales
         * @memberof ei.SalesInfo
         * @instance
         */
        SalesInfo.prototype.sales = $util.emptyArray;

        /**
         * Creates a new SalesInfo instance using the specified properties.
         * @function create
         * @memberof ei.SalesInfo
         * @static
         * @param {ei.ISalesInfo=} [properties] Properties to set
         * @returns {ei.SalesInfo} SalesInfo instance
         */
        SalesInfo.create = function create(properties) {
            return new SalesInfo(properties);
        };

        /**
         * Encodes the specified SalesInfo message. Does not implicitly {@link ei.SalesInfo.verify|verify} messages.
         * @function encode
         * @memberof ei.SalesInfo
         * @static
         * @param {ei.ISalesInfo} message SalesInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SalesInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.sales != null && message.sales.length)
                for (let i = 0; i < message.sales.length; ++i)
                    $root.ei.IAPSaleEntry.encode(message.sales[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified SalesInfo message, length delimited. Does not implicitly {@link ei.SalesInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ei.SalesInfo
         * @static
         * @param {ei.ISalesInfo} message SalesInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SalesInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a SalesInfo message from the specified reader or buffer.
         * @function decode
         * @memberof ei.SalesInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ei.SalesInfo} SalesInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SalesInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ei.SalesInfo();
            while (reader.pos < end) {
                let tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.sales && message.sales.length))
                        message.sales = [];
                    message.sales.push($root.ei.IAPSaleEntry.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a SalesInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ei.SalesInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ei.SalesInfo} SalesInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SalesInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a SalesInfo message.
         * @function verify
         * @memberof ei.SalesInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        SalesInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.sales != null && message.hasOwnProperty("sales")) {
                if (!Array.isArray(message.sales))
                    return "sales: array expected";
                for (let i = 0; i < message.sales.length; ++i) {
                    let error = $root.ei.IAPSaleEntry.verify(message.sales[i]);
                    if (error)
                        return "sales." + error;
                }
            }
            return null;
        };

        /**
         * Creates a SalesInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ei.SalesInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ei.SalesInfo} SalesInfo
         */
        SalesInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.ei.SalesInfo)
                return object;
            let message = new $root.ei.SalesInfo();
            if (object.sales) {
                if (!Array.isArray(object.sales))
                    throw TypeError(".ei.SalesInfo.sales: array expected");
                message.sales = [];
                for (let i = 0; i < object.sales.length; ++i) {
                    if (typeof object.sales[i] !== "object")
                        throw TypeError(".ei.SalesInfo.sales: object expected");
                    message.sales[i] = $root.ei.IAPSaleEntry.fromObject(object.sales[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a SalesInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ei.SalesInfo
         * @static
         * @param {ei.SalesInfo} message SalesInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        SalesInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.arrays || options.defaults)
                object.sales = [];
            if (message.sales && message.sales.length) {
                object.sales = [];
                for (let j = 0; j < message.sales.length; ++j)
                    object.sales[j] = $root.ei.IAPSaleEntry.toObject(message.sales[j], options);
            }
            return object;
        };

        /**
         * Converts this SalesInfo to JSON.
         * @function toJSON
         * @memberof ei.SalesInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        SalesInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return SalesInfo;
    })();

    ei.EggIncEvent = (function() {

        /**
         * Properties of an EggIncEvent.
         * @memberof ei
         * @interface IEggIncEvent
         * @property {string|null} [identifier] EggIncEvent identifier
         * @property {number|null} [secondsRemaining] EggIncEvent secondsRemaining
         * @property {string|null} [type] EggIncEvent type
         * @property {number|null} [multiplier] EggIncEvent multiplier
         * @property {string|null} [subtitle] EggIncEvent subtitle
         */

        /**
         * Constructs a new EggIncEvent.
         * @memberof ei
         * @classdesc Represents an EggIncEvent.
         * @implements IEggIncEvent
         * @constructor
         * @param {ei.IEggIncEvent=} [properties] Properties to set
         */
        function EggIncEvent(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * EggIncEvent identifier.
         * @member {string} identifier
         * @memberof ei.EggIncEvent
         * @instance
         */
        EggIncEvent.prototype.identifier = "";

        /**
         * EggIncEvent secondsRemaining.
         * @member {number} secondsRemaining
         * @memberof ei.EggIncEvent
         * @instance
         */
        EggIncEvent.prototype.secondsRemaining = 0;

        /**
         * EggIncEvent type.
         * @member {string} type
         * @memberof ei.EggIncEvent
         * @instance
         */
        EggIncEvent.prototype.type = "";

        /**
         * EggIncEvent multiplier.
         * @member {number} multiplier
         * @memberof ei.EggIncEvent
         * @instance
         */
        EggIncEvent.prototype.multiplier = 0;

        /**
         * EggIncEvent subtitle.
         * @member {string} subtitle
         * @memberof ei.EggIncEvent
         * @instance
         */
        EggIncEvent.prototype.subtitle = "";

        /**
         * Creates a new EggIncEvent instance using the specified properties.
         * @function create
         * @memberof ei.EggIncEvent
         * @static
         * @param {ei.IEggIncEvent=} [properties] Properties to set
         * @returns {ei.EggIncEvent} EggIncEvent instance
         */
        EggIncEvent.create = function create(properties) {
            return new EggIncEvent(properties);
        };

        /**
         * Encodes the specified EggIncEvent message. Does not implicitly {@link ei.EggIncEvent.verify|verify} messages.
         * @function encode
         * @memberof ei.EggIncEvent
         * @static
         * @param {ei.IEggIncEvent} message EggIncEvent message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EggIncEvent.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.identifier != null && Object.hasOwnProperty.call(message, "identifier"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.identifier);
            if (message.secondsRemaining != null && Object.hasOwnProperty.call(message, "secondsRemaining"))
                writer.uint32(/* id 2, wireType 1 =*/17).double(message.secondsRemaining);
            if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.type);
            if (message.multiplier != null && Object.hasOwnProperty.call(message, "multiplier"))
                writer.uint32(/* id 4, wireType 1 =*/33).double(message.multiplier);
            if (message.subtitle != null && Object.hasOwnProperty.call(message, "subtitle"))
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.subtitle);
            return writer;
        };

        /**
         * Encodes the specified EggIncEvent message, length delimited. Does not implicitly {@link ei.EggIncEvent.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ei.EggIncEvent
         * @static
         * @param {ei.IEggIncEvent} message EggIncEvent message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EggIncEvent.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an EggIncEvent message from the specified reader or buffer.
         * @function decode
         * @memberof ei.EggIncEvent
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ei.EggIncEvent} EggIncEvent
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EggIncEvent.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ei.EggIncEvent();
            while (reader.pos < end) {
                let tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.identifier = reader.string();
                    break;
                case 2:
                    message.secondsRemaining = reader.double();
                    break;
                case 3:
                    message.type = reader.string();
                    break;
                case 4:
                    message.multiplier = reader.double();
                    break;
                case 5:
                    message.subtitle = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an EggIncEvent message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ei.EggIncEvent
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ei.EggIncEvent} EggIncEvent
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EggIncEvent.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an EggIncEvent message.
         * @function verify
         * @memberof ei.EggIncEvent
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        EggIncEvent.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.identifier != null && message.hasOwnProperty("identifier"))
                if (!$util.isString(message.identifier))
                    return "identifier: string expected";
            if (message.secondsRemaining != null && message.hasOwnProperty("secondsRemaining"))
                if (typeof message.secondsRemaining !== "number")
                    return "secondsRemaining: number expected";
            if (message.type != null && message.hasOwnProperty("type"))
                if (!$util.isString(message.type))
                    return "type: string expected";
            if (message.multiplier != null && message.hasOwnProperty("multiplier"))
                if (typeof message.multiplier !== "number")
                    return "multiplier: number expected";
            if (message.subtitle != null && message.hasOwnProperty("subtitle"))
                if (!$util.isString(message.subtitle))
                    return "subtitle: string expected";
            return null;
        };

        /**
         * Creates an EggIncEvent message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ei.EggIncEvent
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ei.EggIncEvent} EggIncEvent
         */
        EggIncEvent.fromObject = function fromObject(object) {
            if (object instanceof $root.ei.EggIncEvent)
                return object;
            let message = new $root.ei.EggIncEvent();
            if (object.identifier != null)
                message.identifier = String(object.identifier);
            if (object.secondsRemaining != null)
                message.secondsRemaining = Number(object.secondsRemaining);
            if (object.type != null)
                message.type = String(object.type);
            if (object.multiplier != null)
                message.multiplier = Number(object.multiplier);
            if (object.subtitle != null)
                message.subtitle = String(object.subtitle);
            return message;
        };

        /**
         * Creates a plain object from an EggIncEvent message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ei.EggIncEvent
         * @static
         * @param {ei.EggIncEvent} message EggIncEvent
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        EggIncEvent.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.defaults) {
                object.identifier = "";
                object.secondsRemaining = 0;
                object.type = "";
                object.multiplier = 0;
                object.subtitle = "";
            }
            if (message.identifier != null && message.hasOwnProperty("identifier"))
                object.identifier = message.identifier;
            if (message.secondsRemaining != null && message.hasOwnProperty("secondsRemaining"))
                object.secondsRemaining = options.json && !isFinite(message.secondsRemaining) ? String(message.secondsRemaining) : message.secondsRemaining;
            if (message.type != null && message.hasOwnProperty("type"))
                object.type = message.type;
            if (message.multiplier != null && message.hasOwnProperty("multiplier"))
                object.multiplier = options.json && !isFinite(message.multiplier) ? String(message.multiplier) : message.multiplier;
            if (message.subtitle != null && message.hasOwnProperty("subtitle"))
                object.subtitle = message.subtitle;
            return object;
        };

        /**
         * Converts this EggIncEvent to JSON.
         * @function toJSON
         * @memberof ei.EggIncEvent
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        EggIncEvent.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return EggIncEvent;
    })();

    ei.EggIncCurrentEvents = (function() {

        /**
         * Properties of an EggIncCurrentEvents.
         * @memberof ei
         * @interface IEggIncCurrentEvents
         * @property {Array.<ei.IEggIncEvent>|null} [events] EggIncCurrentEvents events
         */

        /**
         * Constructs a new EggIncCurrentEvents.
         * @memberof ei
         * @classdesc Represents an EggIncCurrentEvents.
         * @implements IEggIncCurrentEvents
         * @constructor
         * @param {ei.IEggIncCurrentEvents=} [properties] Properties to set
         */
        function EggIncCurrentEvents(properties) {
            this.events = [];
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * EggIncCurrentEvents events.
         * @member {Array.<ei.IEggIncEvent>} events
         * @memberof ei.EggIncCurrentEvents
         * @instance
         */
        EggIncCurrentEvents.prototype.events = $util.emptyArray;

        /**
         * Creates a new EggIncCurrentEvents instance using the specified properties.
         * @function create
         * @memberof ei.EggIncCurrentEvents
         * @static
         * @param {ei.IEggIncCurrentEvents=} [properties] Properties to set
         * @returns {ei.EggIncCurrentEvents} EggIncCurrentEvents instance
         */
        EggIncCurrentEvents.create = function create(properties) {
            return new EggIncCurrentEvents(properties);
        };

        /**
         * Encodes the specified EggIncCurrentEvents message. Does not implicitly {@link ei.EggIncCurrentEvents.verify|verify} messages.
         * @function encode
         * @memberof ei.EggIncCurrentEvents
         * @static
         * @param {ei.IEggIncCurrentEvents} message EggIncCurrentEvents message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EggIncCurrentEvents.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.events != null && message.events.length)
                for (let i = 0; i < message.events.length; ++i)
                    $root.ei.EggIncEvent.encode(message.events[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified EggIncCurrentEvents message, length delimited. Does not implicitly {@link ei.EggIncCurrentEvents.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ei.EggIncCurrentEvents
         * @static
         * @param {ei.IEggIncCurrentEvents} message EggIncCurrentEvents message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EggIncCurrentEvents.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an EggIncCurrentEvents message from the specified reader or buffer.
         * @function decode
         * @memberof ei.EggIncCurrentEvents
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ei.EggIncCurrentEvents} EggIncCurrentEvents
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EggIncCurrentEvents.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ei.EggIncCurrentEvents();
            while (reader.pos < end) {
                let tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.events && message.events.length))
                        message.events = [];
                    message.events.push($root.ei.EggIncEvent.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an EggIncCurrentEvents message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ei.EggIncCurrentEvents
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ei.EggIncCurrentEvents} EggIncCurrentEvents
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EggIncCurrentEvents.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an EggIncCurrentEvents message.
         * @function verify
         * @memberof ei.EggIncCurrentEvents
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        EggIncCurrentEvents.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.events != null && message.hasOwnProperty("events")) {
                if (!Array.isArray(message.events))
                    return "events: array expected";
                for (let i = 0; i < message.events.length; ++i) {
                    let error = $root.ei.EggIncEvent.verify(message.events[i]);
                    if (error)
                        return "events." + error;
                }
            }
            return null;
        };

        /**
         * Creates an EggIncCurrentEvents message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ei.EggIncCurrentEvents
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ei.EggIncCurrentEvents} EggIncCurrentEvents
         */
        EggIncCurrentEvents.fromObject = function fromObject(object) {
            if (object instanceof $root.ei.EggIncCurrentEvents)
                return object;
            let message = new $root.ei.EggIncCurrentEvents();
            if (object.events) {
                if (!Array.isArray(object.events))
                    throw TypeError(".ei.EggIncCurrentEvents.events: array expected");
                message.events = [];
                for (let i = 0; i < object.events.length; ++i) {
                    if (typeof object.events[i] !== "object")
                        throw TypeError(".ei.EggIncCurrentEvents.events: object expected");
                    message.events[i] = $root.ei.EggIncEvent.fromObject(object.events[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from an EggIncCurrentEvents message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ei.EggIncCurrentEvents
         * @static
         * @param {ei.EggIncCurrentEvents} message EggIncCurrentEvents
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        EggIncCurrentEvents.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.arrays || options.defaults)
                object.events = [];
            if (message.events && message.events.length) {
                object.events = [];
                for (let j = 0; j < message.events.length; ++j)
                    object.events[j] = $root.ei.EggIncEvent.toObject(message.events[j], options);
            }
            return object;
        };

        /**
         * Converts this EggIncCurrentEvents to JSON.
         * @function toJSON
         * @memberof ei.EggIncCurrentEvents
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        EggIncCurrentEvents.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return EggIncCurrentEvents;
    })();

    ei.DeviceInfo = (function() {

        /**
         * Properties of a DeviceInfo.
         * @memberof ei
         * @interface IDeviceInfo
         * @property {string|null} [deviceId] DeviceInfo deviceId
         * @property {string|null} [advertisingId] DeviceInfo advertisingId
         * @property {string|null} [platform] DeviceInfo platform
         * @property {string|null} [formFactor] DeviceInfo formFactor
         * @property {string|null} [deviceName] DeviceInfo deviceName
         * @property {string|null} [platformVersion] DeviceInfo platformVersion
         * @property {string|null} [localeCountry] DeviceInfo localeCountry
         * @property {string|null} [localeLanguage] DeviceInfo localeLanguage
         * @property {string|null} [gpuVendor] DeviceInfo gpuVendor
         * @property {string|null} [gpuModel] DeviceInfo gpuModel
         * @property {string|null} [deviceBucket] DeviceInfo deviceBucket
         * @property {number|null} [screenWidth] DeviceInfo screenWidth
         * @property {number|null} [screenHeight] DeviceInfo screenHeight
         */

        /**
         * Constructs a new DeviceInfo.
         * @memberof ei
         * @classdesc Represents a DeviceInfo.
         * @implements IDeviceInfo
         * @constructor
         * @param {ei.IDeviceInfo=} [properties] Properties to set
         */
        function DeviceInfo(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * DeviceInfo deviceId.
         * @member {string} deviceId
         * @memberof ei.DeviceInfo
         * @instance
         */
        DeviceInfo.prototype.deviceId = "";

        /**
         * DeviceInfo advertisingId.
         * @member {string} advertisingId
         * @memberof ei.DeviceInfo
         * @instance
         */
        DeviceInfo.prototype.advertisingId = "";

        /**
         * DeviceInfo platform.
         * @member {string} platform
         * @memberof ei.DeviceInfo
         * @instance
         */
        DeviceInfo.prototype.platform = "";

        /**
         * DeviceInfo formFactor.
         * @member {string} formFactor
         * @memberof ei.DeviceInfo
         * @instance
         */
        DeviceInfo.prototype.formFactor = "";

        /**
         * DeviceInfo deviceName.
         * @member {string} deviceName
         * @memberof ei.DeviceInfo
         * @instance
         */
        DeviceInfo.prototype.deviceName = "";

        /**
         * DeviceInfo platformVersion.
         * @member {string} platformVersion
         * @memberof ei.DeviceInfo
         * @instance
         */
        DeviceInfo.prototype.platformVersion = "";

        /**
         * DeviceInfo localeCountry.
         * @member {string} localeCountry
         * @memberof ei.DeviceInfo
         * @instance
         */
        DeviceInfo.prototype.localeCountry = "";

        /**
         * DeviceInfo localeLanguage.
         * @member {string} localeLanguage
         * @memberof ei.DeviceInfo
         * @instance
         */
        DeviceInfo.prototype.localeLanguage = "";

        /**
         * DeviceInfo gpuVendor.
         * @member {string} gpuVendor
         * @memberof ei.DeviceInfo
         * @instance
         */
        DeviceInfo.prototype.gpuVendor = "";

        /**
         * DeviceInfo gpuModel.
         * @member {string} gpuModel
         * @memberof ei.DeviceInfo
         * @instance
         */
        DeviceInfo.prototype.gpuModel = "";

        /**
         * DeviceInfo deviceBucket.
         * @member {string} deviceBucket
         * @memberof ei.DeviceInfo
         * @instance
         */
        DeviceInfo.prototype.deviceBucket = "";

        /**
         * DeviceInfo screenWidth.
         * @member {number} screenWidth
         * @memberof ei.DeviceInfo
         * @instance
         */
        DeviceInfo.prototype.screenWidth = 0;

        /**
         * DeviceInfo screenHeight.
         * @member {number} screenHeight
         * @memberof ei.DeviceInfo
         * @instance
         */
        DeviceInfo.prototype.screenHeight = 0;

        /**
         * Creates a new DeviceInfo instance using the specified properties.
         * @function create
         * @memberof ei.DeviceInfo
         * @static
         * @param {ei.IDeviceInfo=} [properties] Properties to set
         * @returns {ei.DeviceInfo} DeviceInfo instance
         */
        DeviceInfo.create = function create(properties) {
            return new DeviceInfo(properties);
        };

        /**
         * Encodes the specified DeviceInfo message. Does not implicitly {@link ei.DeviceInfo.verify|verify} messages.
         * @function encode
         * @memberof ei.DeviceInfo
         * @static
         * @param {ei.IDeviceInfo} message DeviceInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        DeviceInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.deviceId != null && Object.hasOwnProperty.call(message, "deviceId"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.deviceId);
            if (message.platform != null && Object.hasOwnProperty.call(message, "platform"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.platform);
            if (message.formFactor != null && Object.hasOwnProperty.call(message, "formFactor"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.formFactor);
            if (message.deviceName != null && Object.hasOwnProperty.call(message, "deviceName"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.deviceName);
            if (message.platformVersion != null && Object.hasOwnProperty.call(message, "platformVersion"))
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.platformVersion);
            if (message.localeCountry != null && Object.hasOwnProperty.call(message, "localeCountry"))
                writer.uint32(/* id 6, wireType 2 =*/50).string(message.localeCountry);
            if (message.localeLanguage != null && Object.hasOwnProperty.call(message, "localeLanguage"))
                writer.uint32(/* id 7, wireType 2 =*/58).string(message.localeLanguage);
            if (message.gpuVendor != null && Object.hasOwnProperty.call(message, "gpuVendor"))
                writer.uint32(/* id 8, wireType 2 =*/66).string(message.gpuVendor);
            if (message.gpuModel != null && Object.hasOwnProperty.call(message, "gpuModel"))
                writer.uint32(/* id 9, wireType 2 =*/74).string(message.gpuModel);
            if (message.deviceBucket != null && Object.hasOwnProperty.call(message, "deviceBucket"))
                writer.uint32(/* id 10, wireType 2 =*/82).string(message.deviceBucket);
            if (message.screenWidth != null && Object.hasOwnProperty.call(message, "screenWidth"))
                writer.uint32(/* id 11, wireType 0 =*/88).uint32(message.screenWidth);
            if (message.screenHeight != null && Object.hasOwnProperty.call(message, "screenHeight"))
                writer.uint32(/* id 12, wireType 0 =*/96).uint32(message.screenHeight);
            if (message.advertisingId != null && Object.hasOwnProperty.call(message, "advertisingId"))
                writer.uint32(/* id 13, wireType 2 =*/106).string(message.advertisingId);
            return writer;
        };

        /**
         * Encodes the specified DeviceInfo message, length delimited. Does not implicitly {@link ei.DeviceInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ei.DeviceInfo
         * @static
         * @param {ei.IDeviceInfo} message DeviceInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        DeviceInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a DeviceInfo message from the specified reader or buffer.
         * @function decode
         * @memberof ei.DeviceInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ei.DeviceInfo} DeviceInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        DeviceInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ei.DeviceInfo();
            while (reader.pos < end) {
                let tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.deviceId = reader.string();
                    break;
                case 13:
                    message.advertisingId = reader.string();
                    break;
                case 2:
                    message.platform = reader.string();
                    break;
                case 3:
                    message.formFactor = reader.string();
                    break;
                case 4:
                    message.deviceName = reader.string();
                    break;
                case 5:
                    message.platformVersion = reader.string();
                    break;
                case 6:
                    message.localeCountry = reader.string();
                    break;
                case 7:
                    message.localeLanguage = reader.string();
                    break;
                case 8:
                    message.gpuVendor = reader.string();
                    break;
                case 9:
                    message.gpuModel = reader.string();
                    break;
                case 10:
                    message.deviceBucket = reader.string();
                    break;
                case 11:
                    message.screenWidth = reader.uint32();
                    break;
                case 12:
                    message.screenHeight = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a DeviceInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ei.DeviceInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ei.DeviceInfo} DeviceInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        DeviceInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a DeviceInfo message.
         * @function verify
         * @memberof ei.DeviceInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        DeviceInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.deviceId != null && message.hasOwnProperty("deviceId"))
                if (!$util.isString(message.deviceId))
                    return "deviceId: string expected";
            if (message.advertisingId != null && message.hasOwnProperty("advertisingId"))
                if (!$util.isString(message.advertisingId))
                    return "advertisingId: string expected";
            if (message.platform != null && message.hasOwnProperty("platform"))
                if (!$util.isString(message.platform))
                    return "platform: string expected";
            if (message.formFactor != null && message.hasOwnProperty("formFactor"))
                if (!$util.isString(message.formFactor))
                    return "formFactor: string expected";
            if (message.deviceName != null && message.hasOwnProperty("deviceName"))
                if (!$util.isString(message.deviceName))
                    return "deviceName: string expected";
            if (message.platformVersion != null && message.hasOwnProperty("platformVersion"))
                if (!$util.isString(message.platformVersion))
                    return "platformVersion: string expected";
            if (message.localeCountry != null && message.hasOwnProperty("localeCountry"))
                if (!$util.isString(message.localeCountry))
                    return "localeCountry: string expected";
            if (message.localeLanguage != null && message.hasOwnProperty("localeLanguage"))
                if (!$util.isString(message.localeLanguage))
                    return "localeLanguage: string expected";
            if (message.gpuVendor != null && message.hasOwnProperty("gpuVendor"))
                if (!$util.isString(message.gpuVendor))
                    return "gpuVendor: string expected";
            if (message.gpuModel != null && message.hasOwnProperty("gpuModel"))
                if (!$util.isString(message.gpuModel))
                    return "gpuModel: string expected";
            if (message.deviceBucket != null && message.hasOwnProperty("deviceBucket"))
                if (!$util.isString(message.deviceBucket))
                    return "deviceBucket: string expected";
            if (message.screenWidth != null && message.hasOwnProperty("screenWidth"))
                if (!$util.isInteger(message.screenWidth))
                    return "screenWidth: integer expected";
            if (message.screenHeight != null && message.hasOwnProperty("screenHeight"))
                if (!$util.isInteger(message.screenHeight))
                    return "screenHeight: integer expected";
            return null;
        };

        /**
         * Creates a DeviceInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ei.DeviceInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ei.DeviceInfo} DeviceInfo
         */
        DeviceInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.ei.DeviceInfo)
                return object;
            let message = new $root.ei.DeviceInfo();
            if (object.deviceId != null)
                message.deviceId = String(object.deviceId);
            if (object.advertisingId != null)
                message.advertisingId = String(object.advertisingId);
            if (object.platform != null)
                message.platform = String(object.platform);
            if (object.formFactor != null)
                message.formFactor = String(object.formFactor);
            if (object.deviceName != null)
                message.deviceName = String(object.deviceName);
            if (object.platformVersion != null)
                message.platformVersion = String(object.platformVersion);
            if (object.localeCountry != null)
                message.localeCountry = String(object.localeCountry);
            if (object.localeLanguage != null)
                message.localeLanguage = String(object.localeLanguage);
            if (object.gpuVendor != null)
                message.gpuVendor = String(object.gpuVendor);
            if (object.gpuModel != null)
                message.gpuModel = String(object.gpuModel);
            if (object.deviceBucket != null)
                message.deviceBucket = String(object.deviceBucket);
            if (object.screenWidth != null)
                message.screenWidth = object.screenWidth >>> 0;
            if (object.screenHeight != null)
                message.screenHeight = object.screenHeight >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a DeviceInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ei.DeviceInfo
         * @static
         * @param {ei.DeviceInfo} message DeviceInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        DeviceInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.defaults) {
                object.deviceId = "";
                object.platform = "";
                object.formFactor = "";
                object.deviceName = "";
                object.platformVersion = "";
                object.localeCountry = "";
                object.localeLanguage = "";
                object.gpuVendor = "";
                object.gpuModel = "";
                object.deviceBucket = "";
                object.screenWidth = 0;
                object.screenHeight = 0;
                object.advertisingId = "";
            }
            if (message.deviceId != null && message.hasOwnProperty("deviceId"))
                object.deviceId = message.deviceId;
            if (message.platform != null && message.hasOwnProperty("platform"))
                object.platform = message.platform;
            if (message.formFactor != null && message.hasOwnProperty("formFactor"))
                object.formFactor = message.formFactor;
            if (message.deviceName != null && message.hasOwnProperty("deviceName"))
                object.deviceName = message.deviceName;
            if (message.platformVersion != null && message.hasOwnProperty("platformVersion"))
                object.platformVersion = message.platformVersion;
            if (message.localeCountry != null && message.hasOwnProperty("localeCountry"))
                object.localeCountry = message.localeCountry;
            if (message.localeLanguage != null && message.hasOwnProperty("localeLanguage"))
                object.localeLanguage = message.localeLanguage;
            if (message.gpuVendor != null && message.hasOwnProperty("gpuVendor"))
                object.gpuVendor = message.gpuVendor;
            if (message.gpuModel != null && message.hasOwnProperty("gpuModel"))
                object.gpuModel = message.gpuModel;
            if (message.deviceBucket != null && message.hasOwnProperty("deviceBucket"))
                object.deviceBucket = message.deviceBucket;
            if (message.screenWidth != null && message.hasOwnProperty("screenWidth"))
                object.screenWidth = message.screenWidth;
            if (message.screenHeight != null && message.hasOwnProperty("screenHeight"))
                object.screenHeight = message.screenHeight;
            if (message.advertisingId != null && message.hasOwnProperty("advertisingId"))
                object.advertisingId = message.advertisingId;
            return object;
        };

        /**
         * Converts this DeviceInfo to JSON.
         * @function toJSON
         * @memberof ei.DeviceInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        DeviceInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return DeviceInfo;
    })();

    ei.AppInfo = (function() {

        /**
         * Properties of an AppInfo.
         * @memberof ei
         * @interface IAppInfo
         * @property {string|null} [versionStr] AppInfo versionStr
         * @property {number|null} [sessions] AppInfo sessions
         * @property {number|null} [numPrestiges] AppInfo numPrestiges
         * @property {number|Long|null} [soulEggs] AppInfo soulEggs
         * @property {number|null} [currentEgg] AppInfo currentEgg
         * @property {number|Long|null} [goldEarned] AppInfo goldEarned
         * @property {number|Long|null} [goldSpent] AppInfo goldSpent
         * @property {number|null} [currentMission] AppInfo currentMission
         * @property {number|null} [piggySize] AppInfo piggySize
         * @property {number|Long|null} [numPiggyBreaks] AppInfo numPiggyBreaks
         * @property {number|Long|null} [verifiedPiggyBreaks] AppInfo verifiedPiggyBreaks
         * @property {number|Long|null} [iapPacksPurchased] AppInfo iapPacksPurchased
         * @property {number|null} [permitLevel] AppInfo permitLevel
         * @property {number|Long|null} [videoDoublerUses] AppInfo videoDoublerUses
         * @property {number|Long|null} [droneTakedowns] AppInfo droneTakedowns
         * @property {number|Long|null} [droneTakedownsElite] AppInfo droneTakedownsElite
         * @property {boolean|null} [trophiesUnlocked] AppInfo trophiesUnlocked
         * @property {number|null} [eggLevel] AppInfo eggLevel
         * @property {number|null} [struggleFactor] AppInfo struggleFactor
         * @property {boolean|null} [piggyFull] AppInfo piggyFull
         * @property {boolean|null} [piggyFoundFull] AppInfo piggyFoundFull
         * @property {number|null} [timePiggyFullRealtime] AppInfo timePiggyFullRealtime
         * @property {number|null} [timePiggyFullGametime] AppInfo timePiggyFullGametime
         * @property {number|Long|null} [lostPiggyIncrements] AppInfo lostPiggyIncrements
         * @property {string|null} [saleId] AppInfo saleId
         * @property {number|Long|null} [unlimitedChickensUses] AppInfo unlimitedChickensUses
         * @property {number|Long|null} [refillUses] AppInfo refillUses
         * @property {number|Long|null} [shortWarpUses] AppInfo shortWarpUses
         * @property {number|Long|null} [longWarpUses] AppInfo longWarpUses
         */

        /**
         * Constructs a new AppInfo.
         * @memberof ei
         * @classdesc Represents an AppInfo.
         * @implements IAppInfo
         * @constructor
         * @param {ei.IAppInfo=} [properties] Properties to set
         */
        function AppInfo(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * AppInfo versionStr.
         * @member {string} versionStr
         * @memberof ei.AppInfo
         * @instance
         */
        AppInfo.prototype.versionStr = "";

        /**
         * AppInfo sessions.
         * @member {number} sessions
         * @memberof ei.AppInfo
         * @instance
         */
        AppInfo.prototype.sessions = 0;

        /**
         * AppInfo numPrestiges.
         * @member {number} numPrestiges
         * @memberof ei.AppInfo
         * @instance
         */
        AppInfo.prototype.numPrestiges = 0;

        /**
         * AppInfo soulEggs.
         * @member {number|Long} soulEggs
         * @memberof ei.AppInfo
         * @instance
         */
        AppInfo.prototype.soulEggs = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * AppInfo currentEgg.
         * @member {number} currentEgg
         * @memberof ei.AppInfo
         * @instance
         */
        AppInfo.prototype.currentEgg = 0;

        /**
         * AppInfo goldEarned.
         * @member {number|Long} goldEarned
         * @memberof ei.AppInfo
         * @instance
         */
        AppInfo.prototype.goldEarned = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * AppInfo goldSpent.
         * @member {number|Long} goldSpent
         * @memberof ei.AppInfo
         * @instance
         */
        AppInfo.prototype.goldSpent = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * AppInfo currentMission.
         * @member {number} currentMission
         * @memberof ei.AppInfo
         * @instance
         */
        AppInfo.prototype.currentMission = 0;

        /**
         * AppInfo piggySize.
         * @member {number} piggySize
         * @memberof ei.AppInfo
         * @instance
         */
        AppInfo.prototype.piggySize = 0;

        /**
         * AppInfo numPiggyBreaks.
         * @member {number|Long} numPiggyBreaks
         * @memberof ei.AppInfo
         * @instance
         */
        AppInfo.prototype.numPiggyBreaks = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * AppInfo verifiedPiggyBreaks.
         * @member {number|Long} verifiedPiggyBreaks
         * @memberof ei.AppInfo
         * @instance
         */
        AppInfo.prototype.verifiedPiggyBreaks = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * AppInfo iapPacksPurchased.
         * @member {number|Long} iapPacksPurchased
         * @memberof ei.AppInfo
         * @instance
         */
        AppInfo.prototype.iapPacksPurchased = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * AppInfo permitLevel.
         * @member {number} permitLevel
         * @memberof ei.AppInfo
         * @instance
         */
        AppInfo.prototype.permitLevel = 0;

        /**
         * AppInfo videoDoublerUses.
         * @member {number|Long} videoDoublerUses
         * @memberof ei.AppInfo
         * @instance
         */
        AppInfo.prototype.videoDoublerUses = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * AppInfo droneTakedowns.
         * @member {number|Long} droneTakedowns
         * @memberof ei.AppInfo
         * @instance
         */
        AppInfo.prototype.droneTakedowns = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * AppInfo droneTakedownsElite.
         * @member {number|Long} droneTakedownsElite
         * @memberof ei.AppInfo
         * @instance
         */
        AppInfo.prototype.droneTakedownsElite = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * AppInfo trophiesUnlocked.
         * @member {boolean} trophiesUnlocked
         * @memberof ei.AppInfo
         * @instance
         */
        AppInfo.prototype.trophiesUnlocked = false;

        /**
         * AppInfo eggLevel.
         * @member {number} eggLevel
         * @memberof ei.AppInfo
         * @instance
         */
        AppInfo.prototype.eggLevel = 0;

        /**
         * AppInfo struggleFactor.
         * @member {number} struggleFactor
         * @memberof ei.AppInfo
         * @instance
         */
        AppInfo.prototype.struggleFactor = 0;

        /**
         * AppInfo piggyFull.
         * @member {boolean} piggyFull
         * @memberof ei.AppInfo
         * @instance
         */
        AppInfo.prototype.piggyFull = false;

        /**
         * AppInfo piggyFoundFull.
         * @member {boolean} piggyFoundFull
         * @memberof ei.AppInfo
         * @instance
         */
        AppInfo.prototype.piggyFoundFull = false;

        /**
         * AppInfo timePiggyFullRealtime.
         * @member {number} timePiggyFullRealtime
         * @memberof ei.AppInfo
         * @instance
         */
        AppInfo.prototype.timePiggyFullRealtime = 0;

        /**
         * AppInfo timePiggyFullGametime.
         * @member {number} timePiggyFullGametime
         * @memberof ei.AppInfo
         * @instance
         */
        AppInfo.prototype.timePiggyFullGametime = 0;

        /**
         * AppInfo lostPiggyIncrements.
         * @member {number|Long} lostPiggyIncrements
         * @memberof ei.AppInfo
         * @instance
         */
        AppInfo.prototype.lostPiggyIncrements = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * AppInfo saleId.
         * @member {string} saleId
         * @memberof ei.AppInfo
         * @instance
         */
        AppInfo.prototype.saleId = "";

        /**
         * AppInfo unlimitedChickensUses.
         * @member {number|Long} unlimitedChickensUses
         * @memberof ei.AppInfo
         * @instance
         */
        AppInfo.prototype.unlimitedChickensUses = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * AppInfo refillUses.
         * @member {number|Long} refillUses
         * @memberof ei.AppInfo
         * @instance
         */
        AppInfo.prototype.refillUses = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * AppInfo shortWarpUses.
         * @member {number|Long} shortWarpUses
         * @memberof ei.AppInfo
         * @instance
         */
        AppInfo.prototype.shortWarpUses = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * AppInfo longWarpUses.
         * @member {number|Long} longWarpUses
         * @memberof ei.AppInfo
         * @instance
         */
        AppInfo.prototype.longWarpUses = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new AppInfo instance using the specified properties.
         * @function create
         * @memberof ei.AppInfo
         * @static
         * @param {ei.IAppInfo=} [properties] Properties to set
         * @returns {ei.AppInfo} AppInfo instance
         */
        AppInfo.create = function create(properties) {
            return new AppInfo(properties);
        };

        /**
         * Encodes the specified AppInfo message. Does not implicitly {@link ei.AppInfo.verify|verify} messages.
         * @function encode
         * @memberof ei.AppInfo
         * @static
         * @param {ei.IAppInfo} message AppInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        AppInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.versionStr != null && Object.hasOwnProperty.call(message, "versionStr"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.versionStr);
            if (message.sessions != null && Object.hasOwnProperty.call(message, "sessions"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.sessions);
            if (message.numPrestiges != null && Object.hasOwnProperty.call(message, "numPrestiges"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.numPrestiges);
            if (message.soulEggs != null && Object.hasOwnProperty.call(message, "soulEggs"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.soulEggs);
            if (message.currentEgg != null && Object.hasOwnProperty.call(message, "currentEgg"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.currentEgg);
            if (message.goldEarned != null && Object.hasOwnProperty.call(message, "goldEarned"))
                writer.uint32(/* id 6, wireType 0 =*/48).uint64(message.goldEarned);
            if (message.goldSpent != null && Object.hasOwnProperty.call(message, "goldSpent"))
                writer.uint32(/* id 7, wireType 0 =*/56).uint64(message.goldSpent);
            if (message.currentMission != null && Object.hasOwnProperty.call(message, "currentMission"))
                writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.currentMission);
            if (message.piggySize != null && Object.hasOwnProperty.call(message, "piggySize"))
                writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.piggySize);
            if (message.numPiggyBreaks != null && Object.hasOwnProperty.call(message, "numPiggyBreaks"))
                writer.uint32(/* id 10, wireType 0 =*/80).uint64(message.numPiggyBreaks);
            if (message.iapPacksPurchased != null && Object.hasOwnProperty.call(message, "iapPacksPurchased"))
                writer.uint32(/* id 11, wireType 0 =*/88).uint64(message.iapPacksPurchased);
            if (message.permitLevel != null && Object.hasOwnProperty.call(message, "permitLevel"))
                writer.uint32(/* id 12, wireType 0 =*/96).uint32(message.permitLevel);
            if (message.unlimitedChickensUses != null && Object.hasOwnProperty.call(message, "unlimitedChickensUses"))
                writer.uint32(/* id 13, wireType 0 =*/104).uint64(message.unlimitedChickensUses);
            if (message.refillUses != null && Object.hasOwnProperty.call(message, "refillUses"))
                writer.uint32(/* id 14, wireType 0 =*/112).uint64(message.refillUses);
            if (message.videoDoublerUses != null && Object.hasOwnProperty.call(message, "videoDoublerUses"))
                writer.uint32(/* id 15, wireType 0 =*/120).uint64(message.videoDoublerUses);
            if (message.shortWarpUses != null && Object.hasOwnProperty.call(message, "shortWarpUses"))
                writer.uint32(/* id 16, wireType 0 =*/128).uint64(message.shortWarpUses);
            if (message.longWarpUses != null && Object.hasOwnProperty.call(message, "longWarpUses"))
                writer.uint32(/* id 17, wireType 0 =*/136).uint64(message.longWarpUses);
            if (message.droneTakedowns != null && Object.hasOwnProperty.call(message, "droneTakedowns"))
                writer.uint32(/* id 18, wireType 0 =*/144).uint64(message.droneTakedowns);
            if (message.droneTakedownsElite != null && Object.hasOwnProperty.call(message, "droneTakedownsElite"))
                writer.uint32(/* id 19, wireType 0 =*/152).uint64(message.droneTakedownsElite);
            if (message.trophiesUnlocked != null && Object.hasOwnProperty.call(message, "trophiesUnlocked"))
                writer.uint32(/* id 20, wireType 0 =*/160).bool(message.trophiesUnlocked);
            if (message.eggLevel != null && Object.hasOwnProperty.call(message, "eggLevel"))
                writer.uint32(/* id 21, wireType 5 =*/173).float(message.eggLevel);
            if (message.struggleFactor != null && Object.hasOwnProperty.call(message, "struggleFactor"))
                writer.uint32(/* id 22, wireType 5 =*/181).float(message.struggleFactor);
            if (message.piggyFull != null && Object.hasOwnProperty.call(message, "piggyFull"))
                writer.uint32(/* id 23, wireType 0 =*/184).bool(message.piggyFull);
            if (message.piggyFoundFull != null && Object.hasOwnProperty.call(message, "piggyFoundFull"))
                writer.uint32(/* id 24, wireType 0 =*/192).bool(message.piggyFoundFull);
            if (message.timePiggyFullRealtime != null && Object.hasOwnProperty.call(message, "timePiggyFullRealtime"))
                writer.uint32(/* id 25, wireType 1 =*/201).double(message.timePiggyFullRealtime);
            if (message.timePiggyFullGametime != null && Object.hasOwnProperty.call(message, "timePiggyFullGametime"))
                writer.uint32(/* id 26, wireType 1 =*/209).double(message.timePiggyFullGametime);
            if (message.lostPiggyIncrements != null && Object.hasOwnProperty.call(message, "lostPiggyIncrements"))
                writer.uint32(/* id 27, wireType 0 =*/216).uint64(message.lostPiggyIncrements);
            if (message.saleId != null && Object.hasOwnProperty.call(message, "saleId"))
                writer.uint32(/* id 28, wireType 2 =*/226).string(message.saleId);
            if (message.verifiedPiggyBreaks != null && Object.hasOwnProperty.call(message, "verifiedPiggyBreaks"))
                writer.uint32(/* id 29, wireType 0 =*/232).uint64(message.verifiedPiggyBreaks);
            return writer;
        };

        /**
         * Encodes the specified AppInfo message, length delimited. Does not implicitly {@link ei.AppInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ei.AppInfo
         * @static
         * @param {ei.IAppInfo} message AppInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        AppInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an AppInfo message from the specified reader or buffer.
         * @function decode
         * @memberof ei.AppInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ei.AppInfo} AppInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        AppInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ei.AppInfo();
            while (reader.pos < end) {
                let tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.versionStr = reader.string();
                    break;
                case 2:
                    message.sessions = reader.uint32();
                    break;
                case 3:
                    message.numPrestiges = reader.uint32();
                    break;
                case 4:
                    message.soulEggs = reader.uint64();
                    break;
                case 5:
                    message.currentEgg = reader.uint32();
                    break;
                case 6:
                    message.goldEarned = reader.uint64();
                    break;
                case 7:
                    message.goldSpent = reader.uint64();
                    break;
                case 8:
                    message.currentMission = reader.uint32();
                    break;
                case 9:
                    message.piggySize = reader.uint32();
                    break;
                case 10:
                    message.numPiggyBreaks = reader.uint64();
                    break;
                case 29:
                    message.verifiedPiggyBreaks = reader.uint64();
                    break;
                case 11:
                    message.iapPacksPurchased = reader.uint64();
                    break;
                case 12:
                    message.permitLevel = reader.uint32();
                    break;
                case 15:
                    message.videoDoublerUses = reader.uint64();
                    break;
                case 18:
                    message.droneTakedowns = reader.uint64();
                    break;
                case 19:
                    message.droneTakedownsElite = reader.uint64();
                    break;
                case 20:
                    message.trophiesUnlocked = reader.bool();
                    break;
                case 21:
                    message.eggLevel = reader.float();
                    break;
                case 22:
                    message.struggleFactor = reader.float();
                    break;
                case 23:
                    message.piggyFull = reader.bool();
                    break;
                case 24:
                    message.piggyFoundFull = reader.bool();
                    break;
                case 25:
                    message.timePiggyFullRealtime = reader.double();
                    break;
                case 26:
                    message.timePiggyFullGametime = reader.double();
                    break;
                case 27:
                    message.lostPiggyIncrements = reader.uint64();
                    break;
                case 28:
                    message.saleId = reader.string();
                    break;
                case 13:
                    message.unlimitedChickensUses = reader.uint64();
                    break;
                case 14:
                    message.refillUses = reader.uint64();
                    break;
                case 16:
                    message.shortWarpUses = reader.uint64();
                    break;
                case 17:
                    message.longWarpUses = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an AppInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ei.AppInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ei.AppInfo} AppInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        AppInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an AppInfo message.
         * @function verify
         * @memberof ei.AppInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        AppInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.versionStr != null && message.hasOwnProperty("versionStr"))
                if (!$util.isString(message.versionStr))
                    return "versionStr: string expected";
            if (message.sessions != null && message.hasOwnProperty("sessions"))
                if (!$util.isInteger(message.sessions))
                    return "sessions: integer expected";
            if (message.numPrestiges != null && message.hasOwnProperty("numPrestiges"))
                if (!$util.isInteger(message.numPrestiges))
                    return "numPrestiges: integer expected";
            if (message.soulEggs != null && message.hasOwnProperty("soulEggs"))
                if (!$util.isInteger(message.soulEggs) && !(message.soulEggs && $util.isInteger(message.soulEggs.low) && $util.isInteger(message.soulEggs.high)))
                    return "soulEggs: integer|Long expected";
            if (message.currentEgg != null && message.hasOwnProperty("currentEgg"))
                if (!$util.isInteger(message.currentEgg))
                    return "currentEgg: integer expected";
            if (message.goldEarned != null && message.hasOwnProperty("goldEarned"))
                if (!$util.isInteger(message.goldEarned) && !(message.goldEarned && $util.isInteger(message.goldEarned.low) && $util.isInteger(message.goldEarned.high)))
                    return "goldEarned: integer|Long expected";
            if (message.goldSpent != null && message.hasOwnProperty("goldSpent"))
                if (!$util.isInteger(message.goldSpent) && !(message.goldSpent && $util.isInteger(message.goldSpent.low) && $util.isInteger(message.goldSpent.high)))
                    return "goldSpent: integer|Long expected";
            if (message.currentMission != null && message.hasOwnProperty("currentMission"))
                if (!$util.isInteger(message.currentMission))
                    return "currentMission: integer expected";
            if (message.piggySize != null && message.hasOwnProperty("piggySize"))
                if (!$util.isInteger(message.piggySize))
                    return "piggySize: integer expected";
            if (message.numPiggyBreaks != null && message.hasOwnProperty("numPiggyBreaks"))
                if (!$util.isInteger(message.numPiggyBreaks) && !(message.numPiggyBreaks && $util.isInteger(message.numPiggyBreaks.low) && $util.isInteger(message.numPiggyBreaks.high)))
                    return "numPiggyBreaks: integer|Long expected";
            if (message.verifiedPiggyBreaks != null && message.hasOwnProperty("verifiedPiggyBreaks"))
                if (!$util.isInteger(message.verifiedPiggyBreaks) && !(message.verifiedPiggyBreaks && $util.isInteger(message.verifiedPiggyBreaks.low) && $util.isInteger(message.verifiedPiggyBreaks.high)))
                    return "verifiedPiggyBreaks: integer|Long expected";
            if (message.iapPacksPurchased != null && message.hasOwnProperty("iapPacksPurchased"))
                if (!$util.isInteger(message.iapPacksPurchased) && !(message.iapPacksPurchased && $util.isInteger(message.iapPacksPurchased.low) && $util.isInteger(message.iapPacksPurchased.high)))
                    return "iapPacksPurchased: integer|Long expected";
            if (message.permitLevel != null && message.hasOwnProperty("permitLevel"))
                if (!$util.isInteger(message.permitLevel))
                    return "permitLevel: integer expected";
            if (message.videoDoublerUses != null && message.hasOwnProperty("videoDoublerUses"))
                if (!$util.isInteger(message.videoDoublerUses) && !(message.videoDoublerUses && $util.isInteger(message.videoDoublerUses.low) && $util.isInteger(message.videoDoublerUses.high)))
                    return "videoDoublerUses: integer|Long expected";
            if (message.droneTakedowns != null && message.hasOwnProperty("droneTakedowns"))
                if (!$util.isInteger(message.droneTakedowns) && !(message.droneTakedowns && $util.isInteger(message.droneTakedowns.low) && $util.isInteger(message.droneTakedowns.high)))
                    return "droneTakedowns: integer|Long expected";
            if (message.droneTakedownsElite != null && message.hasOwnProperty("droneTakedownsElite"))
                if (!$util.isInteger(message.droneTakedownsElite) && !(message.droneTakedownsElite && $util.isInteger(message.droneTakedownsElite.low) && $util.isInteger(message.droneTakedownsElite.high)))
                    return "droneTakedownsElite: integer|Long expected";
            if (message.trophiesUnlocked != null && message.hasOwnProperty("trophiesUnlocked"))
                if (typeof message.trophiesUnlocked !== "boolean")
                    return "trophiesUnlocked: boolean expected";
            if (message.eggLevel != null && message.hasOwnProperty("eggLevel"))
                if (typeof message.eggLevel !== "number")
                    return "eggLevel: number expected";
            if (message.struggleFactor != null && message.hasOwnProperty("struggleFactor"))
                if (typeof message.struggleFactor !== "number")
                    return "struggleFactor: number expected";
            if (message.piggyFull != null && message.hasOwnProperty("piggyFull"))
                if (typeof message.piggyFull !== "boolean")
                    return "piggyFull: boolean expected";
            if (message.piggyFoundFull != null && message.hasOwnProperty("piggyFoundFull"))
                if (typeof message.piggyFoundFull !== "boolean")
                    return "piggyFoundFull: boolean expected";
            if (message.timePiggyFullRealtime != null && message.hasOwnProperty("timePiggyFullRealtime"))
                if (typeof message.timePiggyFullRealtime !== "number")
                    return "timePiggyFullRealtime: number expected";
            if (message.timePiggyFullGametime != null && message.hasOwnProperty("timePiggyFullGametime"))
                if (typeof message.timePiggyFullGametime !== "number")
                    return "timePiggyFullGametime: number expected";
            if (message.lostPiggyIncrements != null && message.hasOwnProperty("lostPiggyIncrements"))
                if (!$util.isInteger(message.lostPiggyIncrements) && !(message.lostPiggyIncrements && $util.isInteger(message.lostPiggyIncrements.low) && $util.isInteger(message.lostPiggyIncrements.high)))
                    return "lostPiggyIncrements: integer|Long expected";
            if (message.saleId != null && message.hasOwnProperty("saleId"))
                if (!$util.isString(message.saleId))
                    return "saleId: string expected";
            if (message.unlimitedChickensUses != null && message.hasOwnProperty("unlimitedChickensUses"))
                if (!$util.isInteger(message.unlimitedChickensUses) && !(message.unlimitedChickensUses && $util.isInteger(message.unlimitedChickensUses.low) && $util.isInteger(message.unlimitedChickensUses.high)))
                    return "unlimitedChickensUses: integer|Long expected";
            if (message.refillUses != null && message.hasOwnProperty("refillUses"))
                if (!$util.isInteger(message.refillUses) && !(message.refillUses && $util.isInteger(message.refillUses.low) && $util.isInteger(message.refillUses.high)))
                    return "refillUses: integer|Long expected";
            if (message.shortWarpUses != null && message.hasOwnProperty("shortWarpUses"))
                if (!$util.isInteger(message.shortWarpUses) && !(message.shortWarpUses && $util.isInteger(message.shortWarpUses.low) && $util.isInteger(message.shortWarpUses.high)))
                    return "shortWarpUses: integer|Long expected";
            if (message.longWarpUses != null && message.hasOwnProperty("longWarpUses"))
                if (!$util.isInteger(message.longWarpUses) && !(message.longWarpUses && $util.isInteger(message.longWarpUses.low) && $util.isInteger(message.longWarpUses.high)))
                    return "longWarpUses: integer|Long expected";
            return null;
        };

        /**
         * Creates an AppInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ei.AppInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ei.AppInfo} AppInfo
         */
        AppInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.ei.AppInfo)
                return object;
            let message = new $root.ei.AppInfo();
            if (object.versionStr != null)
                message.versionStr = String(object.versionStr);
            if (object.sessions != null)
                message.sessions = object.sessions >>> 0;
            if (object.numPrestiges != null)
                message.numPrestiges = object.numPrestiges >>> 0;
            if (object.soulEggs != null)
                if ($util.Long)
                    (message.soulEggs = $util.Long.fromValue(object.soulEggs)).unsigned = true;
                else if (typeof object.soulEggs === "string")
                    message.soulEggs = parseInt(object.soulEggs, 10);
                else if (typeof object.soulEggs === "number")
                    message.soulEggs = object.soulEggs;
                else if (typeof object.soulEggs === "object")
                    message.soulEggs = new $util.LongBits(object.soulEggs.low >>> 0, object.soulEggs.high >>> 0).toNumber(true);
            if (object.currentEgg != null)
                message.currentEgg = object.currentEgg >>> 0;
            if (object.goldEarned != null)
                if ($util.Long)
                    (message.goldEarned = $util.Long.fromValue(object.goldEarned)).unsigned = true;
                else if (typeof object.goldEarned === "string")
                    message.goldEarned = parseInt(object.goldEarned, 10);
                else if (typeof object.goldEarned === "number")
                    message.goldEarned = object.goldEarned;
                else if (typeof object.goldEarned === "object")
                    message.goldEarned = new $util.LongBits(object.goldEarned.low >>> 0, object.goldEarned.high >>> 0).toNumber(true);
            if (object.goldSpent != null)
                if ($util.Long)
                    (message.goldSpent = $util.Long.fromValue(object.goldSpent)).unsigned = true;
                else if (typeof object.goldSpent === "string")
                    message.goldSpent = parseInt(object.goldSpent, 10);
                else if (typeof object.goldSpent === "number")
                    message.goldSpent = object.goldSpent;
                else if (typeof object.goldSpent === "object")
                    message.goldSpent = new $util.LongBits(object.goldSpent.low >>> 0, object.goldSpent.high >>> 0).toNumber(true);
            if (object.currentMission != null)
                message.currentMission = object.currentMission >>> 0;
            if (object.piggySize != null)
                message.piggySize = object.piggySize >>> 0;
            if (object.numPiggyBreaks != null)
                if ($util.Long)
                    (message.numPiggyBreaks = $util.Long.fromValue(object.numPiggyBreaks)).unsigned = true;
                else if (typeof object.numPiggyBreaks === "string")
                    message.numPiggyBreaks = parseInt(object.numPiggyBreaks, 10);
                else if (typeof object.numPiggyBreaks === "number")
                    message.numPiggyBreaks = object.numPiggyBreaks;
                else if (typeof object.numPiggyBreaks === "object")
                    message.numPiggyBreaks = new $util.LongBits(object.numPiggyBreaks.low >>> 0, object.numPiggyBreaks.high >>> 0).toNumber(true);
            if (object.verifiedPiggyBreaks != null)
                if ($util.Long)
                    (message.verifiedPiggyBreaks = $util.Long.fromValue(object.verifiedPiggyBreaks)).unsigned = true;
                else if (typeof object.verifiedPiggyBreaks === "string")
                    message.verifiedPiggyBreaks = parseInt(object.verifiedPiggyBreaks, 10);
                else if (typeof object.verifiedPiggyBreaks === "number")
                    message.verifiedPiggyBreaks = object.verifiedPiggyBreaks;
                else if (typeof object.verifiedPiggyBreaks === "object")
                    message.verifiedPiggyBreaks = new $util.LongBits(object.verifiedPiggyBreaks.low >>> 0, object.verifiedPiggyBreaks.high >>> 0).toNumber(true);
            if (object.iapPacksPurchased != null)
                if ($util.Long)
                    (message.iapPacksPurchased = $util.Long.fromValue(object.iapPacksPurchased)).unsigned = true;
                else if (typeof object.iapPacksPurchased === "string")
                    message.iapPacksPurchased = parseInt(object.iapPacksPurchased, 10);
                else if (typeof object.iapPacksPurchased === "number")
                    message.iapPacksPurchased = object.iapPacksPurchased;
                else if (typeof object.iapPacksPurchased === "object")
                    message.iapPacksPurchased = new $util.LongBits(object.iapPacksPurchased.low >>> 0, object.iapPacksPurchased.high >>> 0).toNumber(true);
            if (object.permitLevel != null)
                message.permitLevel = object.permitLevel >>> 0;
            if (object.videoDoublerUses != null)
                if ($util.Long)
                    (message.videoDoublerUses = $util.Long.fromValue(object.videoDoublerUses)).unsigned = true;
                else if (typeof object.videoDoublerUses === "string")
                    message.videoDoublerUses = parseInt(object.videoDoublerUses, 10);
                else if (typeof object.videoDoublerUses === "number")
                    message.videoDoublerUses = object.videoDoublerUses;
                else if (typeof object.videoDoublerUses === "object")
                    message.videoDoublerUses = new $util.LongBits(object.videoDoublerUses.low >>> 0, object.videoDoublerUses.high >>> 0).toNumber(true);
            if (object.droneTakedowns != null)
                if ($util.Long)
                    (message.droneTakedowns = $util.Long.fromValue(object.droneTakedowns)).unsigned = true;
                else if (typeof object.droneTakedowns === "string")
                    message.droneTakedowns = parseInt(object.droneTakedowns, 10);
                else if (typeof object.droneTakedowns === "number")
                    message.droneTakedowns = object.droneTakedowns;
                else if (typeof object.droneTakedowns === "object")
                    message.droneTakedowns = new $util.LongBits(object.droneTakedowns.low >>> 0, object.droneTakedowns.high >>> 0).toNumber(true);
            if (object.droneTakedownsElite != null)
                if ($util.Long)
                    (message.droneTakedownsElite = $util.Long.fromValue(object.droneTakedownsElite)).unsigned = true;
                else if (typeof object.droneTakedownsElite === "string")
                    message.droneTakedownsElite = parseInt(object.droneTakedownsElite, 10);
                else if (typeof object.droneTakedownsElite === "number")
                    message.droneTakedownsElite = object.droneTakedownsElite;
                else if (typeof object.droneTakedownsElite === "object")
                    message.droneTakedownsElite = new $util.LongBits(object.droneTakedownsElite.low >>> 0, object.droneTakedownsElite.high >>> 0).toNumber(true);
            if (object.trophiesUnlocked != null)
                message.trophiesUnlocked = Boolean(object.trophiesUnlocked);
            if (object.eggLevel != null)
                message.eggLevel = Number(object.eggLevel);
            if (object.struggleFactor != null)
                message.struggleFactor = Number(object.struggleFactor);
            if (object.piggyFull != null)
                message.piggyFull = Boolean(object.piggyFull);
            if (object.piggyFoundFull != null)
                message.piggyFoundFull = Boolean(object.piggyFoundFull);
            if (object.timePiggyFullRealtime != null)
                message.timePiggyFullRealtime = Number(object.timePiggyFullRealtime);
            if (object.timePiggyFullGametime != null)
                message.timePiggyFullGametime = Number(object.timePiggyFullGametime);
            if (object.lostPiggyIncrements != null)
                if ($util.Long)
                    (message.lostPiggyIncrements = $util.Long.fromValue(object.lostPiggyIncrements)).unsigned = true;
                else if (typeof object.lostPiggyIncrements === "string")
                    message.lostPiggyIncrements = parseInt(object.lostPiggyIncrements, 10);
                else if (typeof object.lostPiggyIncrements === "number")
                    message.lostPiggyIncrements = object.lostPiggyIncrements;
                else if (typeof object.lostPiggyIncrements === "object")
                    message.lostPiggyIncrements = new $util.LongBits(object.lostPiggyIncrements.low >>> 0, object.lostPiggyIncrements.high >>> 0).toNumber(true);
            if (object.saleId != null)
                message.saleId = String(object.saleId);
            if (object.unlimitedChickensUses != null)
                if ($util.Long)
                    (message.unlimitedChickensUses = $util.Long.fromValue(object.unlimitedChickensUses)).unsigned = true;
                else if (typeof object.unlimitedChickensUses === "string")
                    message.unlimitedChickensUses = parseInt(object.unlimitedChickensUses, 10);
                else if (typeof object.unlimitedChickensUses === "number")
                    message.unlimitedChickensUses = object.unlimitedChickensUses;
                else if (typeof object.unlimitedChickensUses === "object")
                    message.unlimitedChickensUses = new $util.LongBits(object.unlimitedChickensUses.low >>> 0, object.unlimitedChickensUses.high >>> 0).toNumber(true);
            if (object.refillUses != null)
                if ($util.Long)
                    (message.refillUses = $util.Long.fromValue(object.refillUses)).unsigned = true;
                else if (typeof object.refillUses === "string")
                    message.refillUses = parseInt(object.refillUses, 10);
                else if (typeof object.refillUses === "number")
                    message.refillUses = object.refillUses;
                else if (typeof object.refillUses === "object")
                    message.refillUses = new $util.LongBits(object.refillUses.low >>> 0, object.refillUses.high >>> 0).toNumber(true);
            if (object.shortWarpUses != null)
                if ($util.Long)
                    (message.shortWarpUses = $util.Long.fromValue(object.shortWarpUses)).unsigned = true;
                else if (typeof object.shortWarpUses === "string")
                    message.shortWarpUses = parseInt(object.shortWarpUses, 10);
                else if (typeof object.shortWarpUses === "number")
                    message.shortWarpUses = object.shortWarpUses;
                else if (typeof object.shortWarpUses === "object")
                    message.shortWarpUses = new $util.LongBits(object.shortWarpUses.low >>> 0, object.shortWarpUses.high >>> 0).toNumber(true);
            if (object.longWarpUses != null)
                if ($util.Long)
                    (message.longWarpUses = $util.Long.fromValue(object.longWarpUses)).unsigned = true;
                else if (typeof object.longWarpUses === "string")
                    message.longWarpUses = parseInt(object.longWarpUses, 10);
                else if (typeof object.longWarpUses === "number")
                    message.longWarpUses = object.longWarpUses;
                else if (typeof object.longWarpUses === "object")
                    message.longWarpUses = new $util.LongBits(object.longWarpUses.low >>> 0, object.longWarpUses.high >>> 0).toNumber(true);
            return message;
        };

        /**
         * Creates a plain object from an AppInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ei.AppInfo
         * @static
         * @param {ei.AppInfo} message AppInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        AppInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.defaults) {
                object.versionStr = "";
                object.sessions = 0;
                object.numPrestiges = 0;
                if ($util.Long) {
                    let long = new $util.Long(0, 0, true);
                    object.soulEggs = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.soulEggs = options.longs === String ? "0" : 0;
                object.currentEgg = 0;
                if ($util.Long) {
                    let long = new $util.Long(0, 0, true);
                    object.goldEarned = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.goldEarned = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    let long = new $util.Long(0, 0, true);
                    object.goldSpent = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.goldSpent = options.longs === String ? "0" : 0;
                object.currentMission = 0;
                object.piggySize = 0;
                if ($util.Long) {
                    let long = new $util.Long(0, 0, true);
                    object.numPiggyBreaks = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.numPiggyBreaks = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    let long = new $util.Long(0, 0, true);
                    object.iapPacksPurchased = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.iapPacksPurchased = options.longs === String ? "0" : 0;
                object.permitLevel = 0;
                if ($util.Long) {
                    let long = new $util.Long(0, 0, true);
                    object.unlimitedChickensUses = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.unlimitedChickensUses = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    let long = new $util.Long(0, 0, true);
                    object.refillUses = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.refillUses = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    let long = new $util.Long(0, 0, true);
                    object.videoDoublerUses = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.videoDoublerUses = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    let long = new $util.Long(0, 0, true);
                    object.shortWarpUses = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.shortWarpUses = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    let long = new $util.Long(0, 0, true);
                    object.longWarpUses = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.longWarpUses = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    let long = new $util.Long(0, 0, true);
                    object.droneTakedowns = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.droneTakedowns = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    let long = new $util.Long(0, 0, true);
                    object.droneTakedownsElite = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.droneTakedownsElite = options.longs === String ? "0" : 0;
                object.trophiesUnlocked = false;
                object.eggLevel = 0;
                object.struggleFactor = 0;
                object.piggyFull = false;
                object.piggyFoundFull = false;
                object.timePiggyFullRealtime = 0;
                object.timePiggyFullGametime = 0;
                if ($util.Long) {
                    let long = new $util.Long(0, 0, true);
                    object.lostPiggyIncrements = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.lostPiggyIncrements = options.longs === String ? "0" : 0;
                object.saleId = "";
                if ($util.Long) {
                    let long = new $util.Long(0, 0, true);
                    object.verifiedPiggyBreaks = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.verifiedPiggyBreaks = options.longs === String ? "0" : 0;
            }
            if (message.versionStr != null && message.hasOwnProperty("versionStr"))
                object.versionStr = message.versionStr;
            if (message.sessions != null && message.hasOwnProperty("sessions"))
                object.sessions = message.sessions;
            if (message.numPrestiges != null && message.hasOwnProperty("numPrestiges"))
                object.numPrestiges = message.numPrestiges;
            if (message.soulEggs != null && message.hasOwnProperty("soulEggs"))
                if (typeof message.soulEggs === "number")
                    object.soulEggs = options.longs === String ? String(message.soulEggs) : message.soulEggs;
                else
                    object.soulEggs = options.longs === String ? $util.Long.prototype.toString.call(message.soulEggs) : options.longs === Number ? new $util.LongBits(message.soulEggs.low >>> 0, message.soulEggs.high >>> 0).toNumber(true) : message.soulEggs;
            if (message.currentEgg != null && message.hasOwnProperty("currentEgg"))
                object.currentEgg = message.currentEgg;
            if (message.goldEarned != null && message.hasOwnProperty("goldEarned"))
                if (typeof message.goldEarned === "number")
                    object.goldEarned = options.longs === String ? String(message.goldEarned) : message.goldEarned;
                else
                    object.goldEarned = options.longs === String ? $util.Long.prototype.toString.call(message.goldEarned) : options.longs === Number ? new $util.LongBits(message.goldEarned.low >>> 0, message.goldEarned.high >>> 0).toNumber(true) : message.goldEarned;
            if (message.goldSpent != null && message.hasOwnProperty("goldSpent"))
                if (typeof message.goldSpent === "number")
                    object.goldSpent = options.longs === String ? String(message.goldSpent) : message.goldSpent;
                else
                    object.goldSpent = options.longs === String ? $util.Long.prototype.toString.call(message.goldSpent) : options.longs === Number ? new $util.LongBits(message.goldSpent.low >>> 0, message.goldSpent.high >>> 0).toNumber(true) : message.goldSpent;
            if (message.currentMission != null && message.hasOwnProperty("currentMission"))
                object.currentMission = message.currentMission;
            if (message.piggySize != null && message.hasOwnProperty("piggySize"))
                object.piggySize = message.piggySize;
            if (message.numPiggyBreaks != null && message.hasOwnProperty("numPiggyBreaks"))
                if (typeof message.numPiggyBreaks === "number")
                    object.numPiggyBreaks = options.longs === String ? String(message.numPiggyBreaks) : message.numPiggyBreaks;
                else
                    object.numPiggyBreaks = options.longs === String ? $util.Long.prototype.toString.call(message.numPiggyBreaks) : options.longs === Number ? new $util.LongBits(message.numPiggyBreaks.low >>> 0, message.numPiggyBreaks.high >>> 0).toNumber(true) : message.numPiggyBreaks;
            if (message.iapPacksPurchased != null && message.hasOwnProperty("iapPacksPurchased"))
                if (typeof message.iapPacksPurchased === "number")
                    object.iapPacksPurchased = options.longs === String ? String(message.iapPacksPurchased) : message.iapPacksPurchased;
                else
                    object.iapPacksPurchased = options.longs === String ? $util.Long.prototype.toString.call(message.iapPacksPurchased) : options.longs === Number ? new $util.LongBits(message.iapPacksPurchased.low >>> 0, message.iapPacksPurchased.high >>> 0).toNumber(true) : message.iapPacksPurchased;
            if (message.permitLevel != null && message.hasOwnProperty("permitLevel"))
                object.permitLevel = message.permitLevel;
            if (message.unlimitedChickensUses != null && message.hasOwnProperty("unlimitedChickensUses"))
                if (typeof message.unlimitedChickensUses === "number")
                    object.unlimitedChickensUses = options.longs === String ? String(message.unlimitedChickensUses) : message.unlimitedChickensUses;
                else
                    object.unlimitedChickensUses = options.longs === String ? $util.Long.prototype.toString.call(message.unlimitedChickensUses) : options.longs === Number ? new $util.LongBits(message.unlimitedChickensUses.low >>> 0, message.unlimitedChickensUses.high >>> 0).toNumber(true) : message.unlimitedChickensUses;
            if (message.refillUses != null && message.hasOwnProperty("refillUses"))
                if (typeof message.refillUses === "number")
                    object.refillUses = options.longs === String ? String(message.refillUses) : message.refillUses;
                else
                    object.refillUses = options.longs === String ? $util.Long.prototype.toString.call(message.refillUses) : options.longs === Number ? new $util.LongBits(message.refillUses.low >>> 0, message.refillUses.high >>> 0).toNumber(true) : message.refillUses;
            if (message.videoDoublerUses != null && message.hasOwnProperty("videoDoublerUses"))
                if (typeof message.videoDoublerUses === "number")
                    object.videoDoublerUses = options.longs === String ? String(message.videoDoublerUses) : message.videoDoublerUses;
                else
                    object.videoDoublerUses = options.longs === String ? $util.Long.prototype.toString.call(message.videoDoublerUses) : options.longs === Number ? new $util.LongBits(message.videoDoublerUses.low >>> 0, message.videoDoublerUses.high >>> 0).toNumber(true) : message.videoDoublerUses;
            if (message.shortWarpUses != null && message.hasOwnProperty("shortWarpUses"))
                if (typeof message.shortWarpUses === "number")
                    object.shortWarpUses = options.longs === String ? String(message.shortWarpUses) : message.shortWarpUses;
                else
                    object.shortWarpUses = options.longs === String ? $util.Long.prototype.toString.call(message.shortWarpUses) : options.longs === Number ? new $util.LongBits(message.shortWarpUses.low >>> 0, message.shortWarpUses.high >>> 0).toNumber(true) : message.shortWarpUses;
            if (message.longWarpUses != null && message.hasOwnProperty("longWarpUses"))
                if (typeof message.longWarpUses === "number")
                    object.longWarpUses = options.longs === String ? String(message.longWarpUses) : message.longWarpUses;
                else
                    object.longWarpUses = options.longs === String ? $util.Long.prototype.toString.call(message.longWarpUses) : options.longs === Number ? new $util.LongBits(message.longWarpUses.low >>> 0, message.longWarpUses.high >>> 0).toNumber(true) : message.longWarpUses;
            if (message.droneTakedowns != null && message.hasOwnProperty("droneTakedowns"))
                if (typeof message.droneTakedowns === "number")
                    object.droneTakedowns = options.longs === String ? String(message.droneTakedowns) : message.droneTakedowns;
                else
                    object.droneTakedowns = options.longs === String ? $util.Long.prototype.toString.call(message.droneTakedowns) : options.longs === Number ? new $util.LongBits(message.droneTakedowns.low >>> 0, message.droneTakedowns.high >>> 0).toNumber(true) : message.droneTakedowns;
            if (message.droneTakedownsElite != null && message.hasOwnProperty("droneTakedownsElite"))
                if (typeof message.droneTakedownsElite === "number")
                    object.droneTakedownsElite = options.longs === String ? String(message.droneTakedownsElite) : message.droneTakedownsElite;
                else
                    object.droneTakedownsElite = options.longs === String ? $util.Long.prototype.toString.call(message.droneTakedownsElite) : options.longs === Number ? new $util.LongBits(message.droneTakedownsElite.low >>> 0, message.droneTakedownsElite.high >>> 0).toNumber(true) : message.droneTakedownsElite;
            if (message.trophiesUnlocked != null && message.hasOwnProperty("trophiesUnlocked"))
                object.trophiesUnlocked = message.trophiesUnlocked;
            if (message.eggLevel != null && message.hasOwnProperty("eggLevel"))
                object.eggLevel = options.json && !isFinite(message.eggLevel) ? String(message.eggLevel) : message.eggLevel;
            if (message.struggleFactor != null && message.hasOwnProperty("struggleFactor"))
                object.struggleFactor = options.json && !isFinite(message.struggleFactor) ? String(message.struggleFactor) : message.struggleFactor;
            if (message.piggyFull != null && message.hasOwnProperty("piggyFull"))
                object.piggyFull = message.piggyFull;
            if (message.piggyFoundFull != null && message.hasOwnProperty("piggyFoundFull"))
                object.piggyFoundFull = message.piggyFoundFull;
            if (message.timePiggyFullRealtime != null && message.hasOwnProperty("timePiggyFullRealtime"))
                object.timePiggyFullRealtime = options.json && !isFinite(message.timePiggyFullRealtime) ? String(message.timePiggyFullRealtime) : message.timePiggyFullRealtime;
            if (message.timePiggyFullGametime != null && message.hasOwnProperty("timePiggyFullGametime"))
                object.timePiggyFullGametime = options.json && !isFinite(message.timePiggyFullGametime) ? String(message.timePiggyFullGametime) : message.timePiggyFullGametime;
            if (message.lostPiggyIncrements != null && message.hasOwnProperty("lostPiggyIncrements"))
                if (typeof message.lostPiggyIncrements === "number")
                    object.lostPiggyIncrements = options.longs === String ? String(message.lostPiggyIncrements) : message.lostPiggyIncrements;
                else
                    object.lostPiggyIncrements = options.longs === String ? $util.Long.prototype.toString.call(message.lostPiggyIncrements) : options.longs === Number ? new $util.LongBits(message.lostPiggyIncrements.low >>> 0, message.lostPiggyIncrements.high >>> 0).toNumber(true) : message.lostPiggyIncrements;
            if (message.saleId != null && message.hasOwnProperty("saleId"))
                object.saleId = message.saleId;
            if (message.verifiedPiggyBreaks != null && message.hasOwnProperty("verifiedPiggyBreaks"))
                if (typeof message.verifiedPiggyBreaks === "number")
                    object.verifiedPiggyBreaks = options.longs === String ? String(message.verifiedPiggyBreaks) : message.verifiedPiggyBreaks;
                else
                    object.verifiedPiggyBreaks = options.longs === String ? $util.Long.prototype.toString.call(message.verifiedPiggyBreaks) : options.longs === Number ? new $util.LongBits(message.verifiedPiggyBreaks.low >>> 0, message.verifiedPiggyBreaks.high >>> 0).toNumber(true) : message.verifiedPiggyBreaks;
            return object;
        };

        /**
         * Converts this AppInfo to JSON.
         * @function toJSON
         * @memberof ei.AppInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        AppInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return AppInfo;
    })();

    ei.ActionKeyValuePair = (function() {

        /**
         * Properties of an ActionKeyValuePair.
         * @memberof ei
         * @interface IActionKeyValuePair
         * @property {string} key ActionKeyValuePair key
         * @property {string} value ActionKeyValuePair value
         */

        /**
         * Constructs a new ActionKeyValuePair.
         * @memberof ei
         * @classdesc Represents an ActionKeyValuePair.
         * @implements IActionKeyValuePair
         * @constructor
         * @param {ei.IActionKeyValuePair=} [properties] Properties to set
         */
        function ActionKeyValuePair(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ActionKeyValuePair key.
         * @member {string} key
         * @memberof ei.ActionKeyValuePair
         * @instance
         */
        ActionKeyValuePair.prototype.key = "";

        /**
         * ActionKeyValuePair value.
         * @member {string} value
         * @memberof ei.ActionKeyValuePair
         * @instance
         */
        ActionKeyValuePair.prototype.value = "";

        /**
         * Creates a new ActionKeyValuePair instance using the specified properties.
         * @function create
         * @memberof ei.ActionKeyValuePair
         * @static
         * @param {ei.IActionKeyValuePair=} [properties] Properties to set
         * @returns {ei.ActionKeyValuePair} ActionKeyValuePair instance
         */
        ActionKeyValuePair.create = function create(properties) {
            return new ActionKeyValuePair(properties);
        };

        /**
         * Encodes the specified ActionKeyValuePair message. Does not implicitly {@link ei.ActionKeyValuePair.verify|verify} messages.
         * @function encode
         * @memberof ei.ActionKeyValuePair
         * @static
         * @param {ei.IActionKeyValuePair} message ActionKeyValuePair message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ActionKeyValuePair.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.key);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.value);
            return writer;
        };

        /**
         * Encodes the specified ActionKeyValuePair message, length delimited. Does not implicitly {@link ei.ActionKeyValuePair.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ei.ActionKeyValuePair
         * @static
         * @param {ei.IActionKeyValuePair} message ActionKeyValuePair message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ActionKeyValuePair.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an ActionKeyValuePair message from the specified reader or buffer.
         * @function decode
         * @memberof ei.ActionKeyValuePair
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ei.ActionKeyValuePair} ActionKeyValuePair
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ActionKeyValuePair.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ei.ActionKeyValuePair();
            while (reader.pos < end) {
                let tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.key = reader.string();
                    break;
                case 2:
                    message.value = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("key"))
                throw $util.ProtocolError("missing required 'key'", { instance: message });
            if (!message.hasOwnProperty("value"))
                throw $util.ProtocolError("missing required 'value'", { instance: message });
            return message;
        };

        /**
         * Decodes an ActionKeyValuePair message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ei.ActionKeyValuePair
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ei.ActionKeyValuePair} ActionKeyValuePair
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ActionKeyValuePair.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an ActionKeyValuePair message.
         * @function verify
         * @memberof ei.ActionKeyValuePair
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ActionKeyValuePair.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isString(message.key))
                return "key: string expected";
            if (!$util.isString(message.value))
                return "value: string expected";
            return null;
        };

        /**
         * Creates an ActionKeyValuePair message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ei.ActionKeyValuePair
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ei.ActionKeyValuePair} ActionKeyValuePair
         */
        ActionKeyValuePair.fromObject = function fromObject(object) {
            if (object instanceof $root.ei.ActionKeyValuePair)
                return object;
            let message = new $root.ei.ActionKeyValuePair();
            if (object.key != null)
                message.key = String(object.key);
            if (object.value != null)
                message.value = String(object.value);
            return message;
        };

        /**
         * Creates a plain object from an ActionKeyValuePair message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ei.ActionKeyValuePair
         * @static
         * @param {ei.ActionKeyValuePair} message ActionKeyValuePair
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ActionKeyValuePair.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.defaults) {
                object.key = "";
                object.value = "";
            }
            if (message.key != null && message.hasOwnProperty("key"))
                object.key = message.key;
            if (message.value != null && message.hasOwnProperty("value"))
                object.value = message.value;
            return object;
        };

        /**
         * Converts this ActionKeyValuePair to JSON.
         * @function toJSON
         * @memberof ei.ActionKeyValuePair
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ActionKeyValuePair.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ActionKeyValuePair;
    })();

    ei.GenericAction = (function() {

        /**
         * Properties of a GenericAction.
         * @memberof ei
         * @interface IGenericAction
         * @property {string|null} [userId] GenericAction userId
         * @property {string|null} [advertisingId] GenericAction advertisingId
         * @property {number|null} [approxTime_DEP] GenericAction approxTime_DEP
         * @property {number|null} [approxTime] GenericAction approxTime
         * @property {string|null} [actionName] GenericAction actionName
         * @property {Array.<ei.IActionKeyValuePair>|null} [data] GenericAction data
         * @property {ei.IAppInfo|null} [app] GenericAction app
         * @property {ei.IDeviceInfo|null} [device] GenericAction device
         */

        /**
         * Constructs a new GenericAction.
         * @memberof ei
         * @classdesc Represents a GenericAction.
         * @implements IGenericAction
         * @constructor
         * @param {ei.IGenericAction=} [properties] Properties to set
         */
        function GenericAction(properties) {
            this.data = [];
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GenericAction userId.
         * @member {string} userId
         * @memberof ei.GenericAction
         * @instance
         */
        GenericAction.prototype.userId = "";

        /**
         * GenericAction advertisingId.
         * @member {string} advertisingId
         * @memberof ei.GenericAction
         * @instance
         */
        GenericAction.prototype.advertisingId = "";

        /**
         * GenericAction approxTime_DEP.
         * @member {number} approxTime_DEP
         * @memberof ei.GenericAction
         * @instance
         */
        GenericAction.prototype.approxTime_DEP = 0;

        /**
         * GenericAction approxTime.
         * @member {number} approxTime
         * @memberof ei.GenericAction
         * @instance
         */
        GenericAction.prototype.approxTime = 0;

        /**
         * GenericAction actionName.
         * @member {string} actionName
         * @memberof ei.GenericAction
         * @instance
         */
        GenericAction.prototype.actionName = "";

        /**
         * GenericAction data.
         * @member {Array.<ei.IActionKeyValuePair>} data
         * @memberof ei.GenericAction
         * @instance
         */
        GenericAction.prototype.data = $util.emptyArray;

        /**
         * GenericAction app.
         * @member {ei.IAppInfo|null|undefined} app
         * @memberof ei.GenericAction
         * @instance
         */
        GenericAction.prototype.app = null;

        /**
         * GenericAction device.
         * @member {ei.IDeviceInfo|null|undefined} device
         * @memberof ei.GenericAction
         * @instance
         */
        GenericAction.prototype.device = null;

        /**
         * Creates a new GenericAction instance using the specified properties.
         * @function create
         * @memberof ei.GenericAction
         * @static
         * @param {ei.IGenericAction=} [properties] Properties to set
         * @returns {ei.GenericAction} GenericAction instance
         */
        GenericAction.create = function create(properties) {
            return new GenericAction(properties);
        };

        /**
         * Encodes the specified GenericAction message. Does not implicitly {@link ei.GenericAction.verify|verify} messages.
         * @function encode
         * @memberof ei.GenericAction
         * @static
         * @param {ei.IGenericAction} message GenericAction message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GenericAction.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userId != null && Object.hasOwnProperty.call(message, "userId"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);
            if (message.approxTime_DEP != null && Object.hasOwnProperty.call(message, "approxTime_DEP"))
                writer.uint32(/* id 2, wireType 5 =*/21).float(message.approxTime_DEP);
            if (message.actionName != null && Object.hasOwnProperty.call(message, "actionName"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.actionName);
            if (message.data != null && message.data.length)
                for (let i = 0; i < message.data.length; ++i)
                    $root.ei.ActionKeyValuePair.encode(message.data[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            if (message.app != null && Object.hasOwnProperty.call(message, "app"))
                $root.ei.AppInfo.encode(message.app, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
            if (message.device != null && Object.hasOwnProperty.call(message, "device"))
                $root.ei.DeviceInfo.encode(message.device, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
            if (message.advertisingId != null && Object.hasOwnProperty.call(message, "advertisingId"))
                writer.uint32(/* id 7, wireType 2 =*/58).string(message.advertisingId);
            if (message.approxTime != null && Object.hasOwnProperty.call(message, "approxTime"))
                writer.uint32(/* id 8, wireType 1 =*/65).double(message.approxTime);
            return writer;
        };

        /**
         * Encodes the specified GenericAction message, length delimited. Does not implicitly {@link ei.GenericAction.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ei.GenericAction
         * @static
         * @param {ei.IGenericAction} message GenericAction message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GenericAction.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GenericAction message from the specified reader or buffer.
         * @function decode
         * @memberof ei.GenericAction
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ei.GenericAction} GenericAction
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GenericAction.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ei.GenericAction();
            while (reader.pos < end) {
                let tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.userId = reader.string();
                    break;
                case 7:
                    message.advertisingId = reader.string();
                    break;
                case 2:
                    message.approxTime_DEP = reader.float();
                    break;
                case 8:
                    message.approxTime = reader.double();
                    break;
                case 3:
                    message.actionName = reader.string();
                    break;
                case 4:
                    if (!(message.data && message.data.length))
                        message.data = [];
                    message.data.push($root.ei.ActionKeyValuePair.decode(reader, reader.uint32()));
                    break;
                case 5:
                    message.app = $root.ei.AppInfo.decode(reader, reader.uint32());
                    break;
                case 6:
                    message.device = $root.ei.DeviceInfo.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GenericAction message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ei.GenericAction
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ei.GenericAction} GenericAction
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GenericAction.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GenericAction message.
         * @function verify
         * @memberof ei.GenericAction
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GenericAction.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isString(message.userId))
                    return "userId: string expected";
            if (message.advertisingId != null && message.hasOwnProperty("advertisingId"))
                if (!$util.isString(message.advertisingId))
                    return "advertisingId: string expected";
            if (message.approxTime_DEP != null && message.hasOwnProperty("approxTime_DEP"))
                if (typeof message.approxTime_DEP !== "number")
                    return "approxTime_DEP: number expected";
            if (message.approxTime != null && message.hasOwnProperty("approxTime"))
                if (typeof message.approxTime !== "number")
                    return "approxTime: number expected";
            if (message.actionName != null && message.hasOwnProperty("actionName"))
                if (!$util.isString(message.actionName))
                    return "actionName: string expected";
            if (message.data != null && message.hasOwnProperty("data")) {
                if (!Array.isArray(message.data))
                    return "data: array expected";
                for (let i = 0; i < message.data.length; ++i) {
                    let error = $root.ei.ActionKeyValuePair.verify(message.data[i]);
                    if (error)
                        return "data." + error;
                }
            }
            if (message.app != null && message.hasOwnProperty("app")) {
                let error = $root.ei.AppInfo.verify(message.app);
                if (error)
                    return "app." + error;
            }
            if (message.device != null && message.hasOwnProperty("device")) {
                let error = $root.ei.DeviceInfo.verify(message.device);
                if (error)
                    return "device." + error;
            }
            return null;
        };

        /**
         * Creates a GenericAction message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ei.GenericAction
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ei.GenericAction} GenericAction
         */
        GenericAction.fromObject = function fromObject(object) {
            if (object instanceof $root.ei.GenericAction)
                return object;
            let message = new $root.ei.GenericAction();
            if (object.userId != null)
                message.userId = String(object.userId);
            if (object.advertisingId != null)
                message.advertisingId = String(object.advertisingId);
            if (object.approxTime_DEP != null)
                message.approxTime_DEP = Number(object.approxTime_DEP);
            if (object.approxTime != null)
                message.approxTime = Number(object.approxTime);
            if (object.actionName != null)
                message.actionName = String(object.actionName);
            if (object.data) {
                if (!Array.isArray(object.data))
                    throw TypeError(".ei.GenericAction.data: array expected");
                message.data = [];
                for (let i = 0; i < object.data.length; ++i) {
                    if (typeof object.data[i] !== "object")
                        throw TypeError(".ei.GenericAction.data: object expected");
                    message.data[i] = $root.ei.ActionKeyValuePair.fromObject(object.data[i]);
                }
            }
            if (object.app != null) {
                if (typeof object.app !== "object")
                    throw TypeError(".ei.GenericAction.app: object expected");
                message.app = $root.ei.AppInfo.fromObject(object.app);
            }
            if (object.device != null) {
                if (typeof object.device !== "object")
                    throw TypeError(".ei.GenericAction.device: object expected");
                message.device = $root.ei.DeviceInfo.fromObject(object.device);
            }
            return message;
        };

        /**
         * Creates a plain object from a GenericAction message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ei.GenericAction
         * @static
         * @param {ei.GenericAction} message GenericAction
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GenericAction.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.arrays || options.defaults)
                object.data = [];
            if (options.defaults) {
                object.userId = "";
                object.approxTime_DEP = 0;
                object.actionName = "";
                object.app = null;
                object.device = null;
                object.advertisingId = "";
                object.approxTime = 0;
            }
            if (message.userId != null && message.hasOwnProperty("userId"))
                object.userId = message.userId;
            if (message.approxTime_DEP != null && message.hasOwnProperty("approxTime_DEP"))
                object.approxTime_DEP = options.json && !isFinite(message.approxTime_DEP) ? String(message.approxTime_DEP) : message.approxTime_DEP;
            if (message.actionName != null && message.hasOwnProperty("actionName"))
                object.actionName = message.actionName;
            if (message.data && message.data.length) {
                object.data = [];
                for (let j = 0; j < message.data.length; ++j)
                    object.data[j] = $root.ei.ActionKeyValuePair.toObject(message.data[j], options);
            }
            if (message.app != null && message.hasOwnProperty("app"))
                object.app = $root.ei.AppInfo.toObject(message.app, options);
            if (message.device != null && message.hasOwnProperty("device"))
                object.device = $root.ei.DeviceInfo.toObject(message.device, options);
            if (message.advertisingId != null && message.hasOwnProperty("advertisingId"))
                object.advertisingId = message.advertisingId;
            if (message.approxTime != null && message.hasOwnProperty("approxTime"))
                object.approxTime = options.json && !isFinite(message.approxTime) ? String(message.approxTime) : message.approxTime;
            return object;
        };

        /**
         * Converts this GenericAction to JSON.
         * @function toJSON
         * @memberof ei.GenericAction
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GenericAction.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GenericAction;
    })();

    ei.VerifyPurchaseRequest = (function() {

        /**
         * Properties of a VerifyPurchaseRequest.
         * @memberof ei
         * @interface IVerifyPurchaseRequest
         * @property {ei.IBasicRequestInfo|null} [rinfo] VerifyPurchaseRequest rinfo
         * @property {string|null} [sku] VerifyPurchaseRequest sku
         * @property {string|null} [transactionId] VerifyPurchaseRequest transactionId
         * @property {string|null} [receipt] VerifyPurchaseRequest receipt
         * @property {string|null} [platform] VerifyPurchaseRequest platform
         * @property {ei.IGenericAction|null} [log] VerifyPurchaseRequest log
         */

        /**
         * Constructs a new VerifyPurchaseRequest.
         * @memberof ei
         * @classdesc Represents a VerifyPurchaseRequest.
         * @implements IVerifyPurchaseRequest
         * @constructor
         * @param {ei.IVerifyPurchaseRequest=} [properties] Properties to set
         */
        function VerifyPurchaseRequest(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * VerifyPurchaseRequest rinfo.
         * @member {ei.IBasicRequestInfo|null|undefined} rinfo
         * @memberof ei.VerifyPurchaseRequest
         * @instance
         */
        VerifyPurchaseRequest.prototype.rinfo = null;

        /**
         * VerifyPurchaseRequest sku.
         * @member {string} sku
         * @memberof ei.VerifyPurchaseRequest
         * @instance
         */
        VerifyPurchaseRequest.prototype.sku = "";

        /**
         * VerifyPurchaseRequest transactionId.
         * @member {string} transactionId
         * @memberof ei.VerifyPurchaseRequest
         * @instance
         */
        VerifyPurchaseRequest.prototype.transactionId = "";

        /**
         * VerifyPurchaseRequest receipt.
         * @member {string} receipt
         * @memberof ei.VerifyPurchaseRequest
         * @instance
         */
        VerifyPurchaseRequest.prototype.receipt = "";

        /**
         * VerifyPurchaseRequest platform.
         * @member {string} platform
         * @memberof ei.VerifyPurchaseRequest
         * @instance
         */
        VerifyPurchaseRequest.prototype.platform = "";

        /**
         * VerifyPurchaseRequest log.
         * @member {ei.IGenericAction|null|undefined} log
         * @memberof ei.VerifyPurchaseRequest
         * @instance
         */
        VerifyPurchaseRequest.prototype.log = null;

        /**
         * Creates a new VerifyPurchaseRequest instance using the specified properties.
         * @function create
         * @memberof ei.VerifyPurchaseRequest
         * @static
         * @param {ei.IVerifyPurchaseRequest=} [properties] Properties to set
         * @returns {ei.VerifyPurchaseRequest} VerifyPurchaseRequest instance
         */
        VerifyPurchaseRequest.create = function create(properties) {
            return new VerifyPurchaseRequest(properties);
        };

        /**
         * Encodes the specified VerifyPurchaseRequest message. Does not implicitly {@link ei.VerifyPurchaseRequest.verify|verify} messages.
         * @function encode
         * @memberof ei.VerifyPurchaseRequest
         * @static
         * @param {ei.IVerifyPurchaseRequest} message VerifyPurchaseRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        VerifyPurchaseRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.sku != null && Object.hasOwnProperty.call(message, "sku"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.sku);
            if (message.transactionId != null && Object.hasOwnProperty.call(message, "transactionId"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.transactionId);
            if (message.receipt != null && Object.hasOwnProperty.call(message, "receipt"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.receipt);
            if (message.platform != null && Object.hasOwnProperty.call(message, "platform"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.platform);
            if (message.log != null && Object.hasOwnProperty.call(message, "log"))
                $root.ei.GenericAction.encode(message.log, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
            if (message.rinfo != null && Object.hasOwnProperty.call(message, "rinfo"))
                $root.ei.BasicRequestInfo.encode(message.rinfo, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified VerifyPurchaseRequest message, length delimited. Does not implicitly {@link ei.VerifyPurchaseRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ei.VerifyPurchaseRequest
         * @static
         * @param {ei.IVerifyPurchaseRequest} message VerifyPurchaseRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        VerifyPurchaseRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a VerifyPurchaseRequest message from the specified reader or buffer.
         * @function decode
         * @memberof ei.VerifyPurchaseRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ei.VerifyPurchaseRequest} VerifyPurchaseRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        VerifyPurchaseRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ei.VerifyPurchaseRequest();
            while (reader.pos < end) {
                let tag = reader.uint32();
                switch (tag >>> 3) {
                case 6:
                    message.rinfo = $root.ei.BasicRequestInfo.decode(reader, reader.uint32());
                    break;
                case 1:
                    message.sku = reader.string();
                    break;
                case 2:
                    message.transactionId = reader.string();
                    break;
                case 3:
                    message.receipt = reader.string();
                    break;
                case 4:
                    message.platform = reader.string();
                    break;
                case 5:
                    message.log = $root.ei.GenericAction.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a VerifyPurchaseRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ei.VerifyPurchaseRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ei.VerifyPurchaseRequest} VerifyPurchaseRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        VerifyPurchaseRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a VerifyPurchaseRequest message.
         * @function verify
         * @memberof ei.VerifyPurchaseRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        VerifyPurchaseRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.rinfo != null && message.hasOwnProperty("rinfo")) {
                let error = $root.ei.BasicRequestInfo.verify(message.rinfo);
                if (error)
                    return "rinfo." + error;
            }
            if (message.sku != null && message.hasOwnProperty("sku"))
                if (!$util.isString(message.sku))
                    return "sku: string expected";
            if (message.transactionId != null && message.hasOwnProperty("transactionId"))
                if (!$util.isString(message.transactionId))
                    return "transactionId: string expected";
            if (message.receipt != null && message.hasOwnProperty("receipt"))
                if (!$util.isString(message.receipt))
                    return "receipt: string expected";
            if (message.platform != null && message.hasOwnProperty("platform"))
                if (!$util.isString(message.platform))
                    return "platform: string expected";
            if (message.log != null && message.hasOwnProperty("log")) {
                let error = $root.ei.GenericAction.verify(message.log);
                if (error)
                    return "log." + error;
            }
            return null;
        };

        /**
         * Creates a VerifyPurchaseRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ei.VerifyPurchaseRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ei.VerifyPurchaseRequest} VerifyPurchaseRequest
         */
        VerifyPurchaseRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.ei.VerifyPurchaseRequest)
                return object;
            let message = new $root.ei.VerifyPurchaseRequest();
            if (object.rinfo != null) {
                if (typeof object.rinfo !== "object")
                    throw TypeError(".ei.VerifyPurchaseRequest.rinfo: object expected");
                message.rinfo = $root.ei.BasicRequestInfo.fromObject(object.rinfo);
            }
            if (object.sku != null)
                message.sku = String(object.sku);
            if (object.transactionId != null)
                message.transactionId = String(object.transactionId);
            if (object.receipt != null)
                message.receipt = String(object.receipt);
            if (object.platform != null)
                message.platform = String(object.platform);
            if (object.log != null) {
                if (typeof object.log !== "object")
                    throw TypeError(".ei.VerifyPurchaseRequest.log: object expected");
                message.log = $root.ei.GenericAction.fromObject(object.log);
            }
            return message;
        };

        /**
         * Creates a plain object from a VerifyPurchaseRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ei.VerifyPurchaseRequest
         * @static
         * @param {ei.VerifyPurchaseRequest} message VerifyPurchaseRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        VerifyPurchaseRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.defaults) {
                object.sku = "";
                object.transactionId = "";
                object.receipt = "";
                object.platform = "";
                object.log = null;
                object.rinfo = null;
            }
            if (message.sku != null && message.hasOwnProperty("sku"))
                object.sku = message.sku;
            if (message.transactionId != null && message.hasOwnProperty("transactionId"))
                object.transactionId = message.transactionId;
            if (message.receipt != null && message.hasOwnProperty("receipt"))
                object.receipt = message.receipt;
            if (message.platform != null && message.hasOwnProperty("platform"))
                object.platform = message.platform;
            if (message.log != null && message.hasOwnProperty("log"))
                object.log = $root.ei.GenericAction.toObject(message.log, options);
            if (message.rinfo != null && message.hasOwnProperty("rinfo"))
                object.rinfo = $root.ei.BasicRequestInfo.toObject(message.rinfo, options);
            return object;
        };

        /**
         * Converts this VerifyPurchaseRequest to JSON.
         * @function toJSON
         * @memberof ei.VerifyPurchaseRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        VerifyPurchaseRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return VerifyPurchaseRequest;
    })();

    ei.VerifyPurchaseResponse = (function() {

        /**
         * Properties of a VerifyPurchaseResponse.
         * @memberof ei
         * @interface IVerifyPurchaseResponse
         * @property {boolean|null} [verified] VerifyPurchaseResponse verified
         * @property {string|null} [message] VerifyPurchaseResponse message
         */

        /**
         * Constructs a new VerifyPurchaseResponse.
         * @memberof ei
         * @classdesc Represents a VerifyPurchaseResponse.
         * @implements IVerifyPurchaseResponse
         * @constructor
         * @param {ei.IVerifyPurchaseResponse=} [properties] Properties to set
         */
        function VerifyPurchaseResponse(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * VerifyPurchaseResponse verified.
         * @member {boolean} verified
         * @memberof ei.VerifyPurchaseResponse
         * @instance
         */
        VerifyPurchaseResponse.prototype.verified = false;

        /**
         * VerifyPurchaseResponse message.
         * @member {string} message
         * @memberof ei.VerifyPurchaseResponse
         * @instance
         */
        VerifyPurchaseResponse.prototype.message = "";

        /**
         * Creates a new VerifyPurchaseResponse instance using the specified properties.
         * @function create
         * @memberof ei.VerifyPurchaseResponse
         * @static
         * @param {ei.IVerifyPurchaseResponse=} [properties] Properties to set
         * @returns {ei.VerifyPurchaseResponse} VerifyPurchaseResponse instance
         */
        VerifyPurchaseResponse.create = function create(properties) {
            return new VerifyPurchaseResponse(properties);
        };

        /**
         * Encodes the specified VerifyPurchaseResponse message. Does not implicitly {@link ei.VerifyPurchaseResponse.verify|verify} messages.
         * @function encode
         * @memberof ei.VerifyPurchaseResponse
         * @static
         * @param {ei.IVerifyPurchaseResponse} message VerifyPurchaseResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        VerifyPurchaseResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.verified != null && Object.hasOwnProperty.call(message, "verified"))
                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.verified);
            if (message.message != null && Object.hasOwnProperty.call(message, "message"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.message);
            return writer;
        };

        /**
         * Encodes the specified VerifyPurchaseResponse message, length delimited. Does not implicitly {@link ei.VerifyPurchaseResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ei.VerifyPurchaseResponse
         * @static
         * @param {ei.IVerifyPurchaseResponse} message VerifyPurchaseResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        VerifyPurchaseResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a VerifyPurchaseResponse message from the specified reader or buffer.
         * @function decode
         * @memberof ei.VerifyPurchaseResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ei.VerifyPurchaseResponse} VerifyPurchaseResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        VerifyPurchaseResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ei.VerifyPurchaseResponse();
            while (reader.pos < end) {
                let tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.verified = reader.bool();
                    break;
                case 2:
                    message.message = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a VerifyPurchaseResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ei.VerifyPurchaseResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ei.VerifyPurchaseResponse} VerifyPurchaseResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        VerifyPurchaseResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a VerifyPurchaseResponse message.
         * @function verify
         * @memberof ei.VerifyPurchaseResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        VerifyPurchaseResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.verified != null && message.hasOwnProperty("verified"))
                if (typeof message.verified !== "boolean")
                    return "verified: boolean expected";
            if (message.message != null && message.hasOwnProperty("message"))
                if (!$util.isString(message.message))
                    return "message: string expected";
            return null;
        };

        /**
         * Creates a VerifyPurchaseResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ei.VerifyPurchaseResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ei.VerifyPurchaseResponse} VerifyPurchaseResponse
         */
        VerifyPurchaseResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.ei.VerifyPurchaseResponse)
                return object;
            let message = new $root.ei.VerifyPurchaseResponse();
            if (object.verified != null)
                message.verified = Boolean(object.verified);
            if (object.message != null)
                message.message = String(object.message);
            return message;
        };

        /**
         * Creates a plain object from a VerifyPurchaseResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ei.VerifyPurchaseResponse
         * @static
         * @param {ei.VerifyPurchaseResponse} message VerifyPurchaseResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        VerifyPurchaseResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.defaults) {
                object.verified = false;
                object.message = "";
            }
            if (message.verified != null && message.hasOwnProperty("verified"))
                object.verified = message.verified;
            if (message.message != null && message.hasOwnProperty("message"))
                object.message = message.message;
            return object;
        };

        /**
         * Converts this VerifyPurchaseResponse to JSON.
         * @function toJSON
         * @memberof ei.VerifyPurchaseResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        VerifyPurchaseResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return VerifyPurchaseResponse;
    })();

    ei.Reward = (function() {

        /**
         * Properties of a Reward.
         * @memberof ei
         * @interface IReward
         * @property {ei.RewardType|null} [rewardType] Reward rewardType
         * @property {string|null} [rewardSubType] Reward rewardSubType
         * @property {number|null} [rewardAmount] Reward rewardAmount
         */

        /**
         * Constructs a new Reward.
         * @memberof ei
         * @classdesc Represents a Reward.
         * @implements IReward
         * @constructor
         * @param {ei.IReward=} [properties] Properties to set
         */
        function Reward(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Reward rewardType.
         * @member {ei.RewardType} rewardType
         * @memberof ei.Reward
         * @instance
         */
        Reward.prototype.rewardType = 1;

        /**
         * Reward rewardSubType.
         * @member {string} rewardSubType
         * @memberof ei.Reward
         * @instance
         */
        Reward.prototype.rewardSubType = "";

        /**
         * Reward rewardAmount.
         * @member {number} rewardAmount
         * @memberof ei.Reward
         * @instance
         */
        Reward.prototype.rewardAmount = 0;

        /**
         * Creates a new Reward instance using the specified properties.
         * @function create
         * @memberof ei.Reward
         * @static
         * @param {ei.IReward=} [properties] Properties to set
         * @returns {ei.Reward} Reward instance
         */
        Reward.create = function create(properties) {
            return new Reward(properties);
        };

        /**
         * Encodes the specified Reward message. Does not implicitly {@link ei.Reward.verify|verify} messages.
         * @function encode
         * @memberof ei.Reward
         * @static
         * @param {ei.IReward} message Reward message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Reward.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.rewardType != null && Object.hasOwnProperty.call(message, "rewardType"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.rewardType);
            if (message.rewardSubType != null && Object.hasOwnProperty.call(message, "rewardSubType"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.rewardSubType);
            if (message.rewardAmount != null && Object.hasOwnProperty.call(message, "rewardAmount"))
                writer.uint32(/* id 3, wireType 1 =*/25).double(message.rewardAmount);
            return writer;
        };

        /**
         * Encodes the specified Reward message, length delimited. Does not implicitly {@link ei.Reward.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ei.Reward
         * @static
         * @param {ei.IReward} message Reward message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Reward.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a Reward message from the specified reader or buffer.
         * @function decode
         * @memberof ei.Reward
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ei.Reward} Reward
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Reward.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ei.Reward();
            while (reader.pos < end) {
                let tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.rewardType = reader.int32();
                    break;
                case 2:
                    message.rewardSubType = reader.string();
                    break;
                case 3:
                    message.rewardAmount = reader.double();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a Reward message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ei.Reward
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ei.Reward} Reward
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Reward.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a Reward message.
         * @function verify
         * @memberof ei.Reward
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Reward.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.rewardType != null && message.hasOwnProperty("rewardType"))
                switch (message.rewardType) {
                default:
                    return "rewardType: enum value expected";
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                case 100:
                    break;
                }
            if (message.rewardSubType != null && message.hasOwnProperty("rewardSubType"))
                if (!$util.isString(message.rewardSubType))
                    return "rewardSubType: string expected";
            if (message.rewardAmount != null && message.hasOwnProperty("rewardAmount"))
                if (typeof message.rewardAmount !== "number")
                    return "rewardAmount: number expected";
            return null;
        };

        /**
         * Creates a Reward message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ei.Reward
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ei.Reward} Reward
         */
        Reward.fromObject = function fromObject(object) {
            if (object instanceof $root.ei.Reward)
                return object;
            let message = new $root.ei.Reward();
            switch (object.rewardType) {
            case "CASH":
            case 1:
                message.rewardType = 1;
                break;
            case "GOLD":
            case 2:
                message.rewardType = 2;
                break;
            case "SOUL_EGGS":
            case 3:
                message.rewardType = 3;
                break;
            case "EGGS_OF_PROPHECY":
            case 4:
                message.rewardType = 4;
                break;
            case "EPIC_RESEARCH_ITEM":
            case 5:
                message.rewardType = 5;
                break;
            case "PIGGY_FILL":
            case 6:
                message.rewardType = 6;
                break;
            case "PIGGY_MULTIPLIER":
            case 7:
                message.rewardType = 7;
                break;
            case "PIGGY_LEVEL_BUMP":
            case 8:
                message.rewardType = 8;
                break;
            case "BOOST":
            case 9:
                message.rewardType = 9;
                break;
            case "BOOST_TOKEN":
            case 10:
                message.rewardType = 10;
                break;
            case "UNKNOWN_REWARD":
            case 100:
                message.rewardType = 100;
                break;
            }
            if (object.rewardSubType != null)
                message.rewardSubType = String(object.rewardSubType);
            if (object.rewardAmount != null)
                message.rewardAmount = Number(object.rewardAmount);
            return message;
        };

        /**
         * Creates a plain object from a Reward message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ei.Reward
         * @static
         * @param {ei.Reward} message Reward
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        Reward.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.defaults) {
                object.rewardType = options.enums === String ? "CASH" : 1;
                object.rewardSubType = "";
                object.rewardAmount = 0;
            }
            if (message.rewardType != null && message.hasOwnProperty("rewardType"))
                object.rewardType = options.enums === String ? $root.ei.RewardType[message.rewardType] : message.rewardType;
            if (message.rewardSubType != null && message.hasOwnProperty("rewardSubType"))
                object.rewardSubType = message.rewardSubType;
            if (message.rewardAmount != null && message.hasOwnProperty("rewardAmount"))
                object.rewardAmount = options.json && !isFinite(message.rewardAmount) ? String(message.rewardAmount) : message.rewardAmount;
            return object;
        };

        /**
         * Converts this Reward to JSON.
         * @function toJSON
         * @memberof ei.Reward
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        Reward.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return Reward;
    })();

    ei.Contract = (function() {

        /**
         * Properties of a Contract.
         * @memberof ei
         * @interface IContract
         * @property {string|null} [identifier] Contract identifier
         * @property {string|null} [name] Contract name
         * @property {string|null} [description] Contract description
         * @property {ei.Egg|null} [egg] Contract egg
         * @property {Array.<ei.Contract.IGoal>|null} [goals] Contract goals
         * @property {Array.<ei.Contract.IGoalSet>|null} [goalSets] Contract goalSets
         * @property {boolean|null} [coopAllowed] Contract coopAllowed
         * @property {number|null} [maxCoopSize] Contract maxCoopSize
         * @property {number|null} [maxBoosts] Contract maxBoosts
         * @property {number|null} [minutesPerToken] Contract minutesPerToken
         * @property {number|null} [expirationTime] Contract expirationTime
         * @property {number|null} [lengthSeconds] Contract lengthSeconds
         * @property {number|null} [maxSoulEggs] Contract maxSoulEggs
         * @property {number|null} [minClientVersion] Contract minClientVersion
         * @property {boolean|null} [debug] Contract debug
         */

        /**
         * Constructs a new Contract.
         * @memberof ei
         * @classdesc Represents a Contract.
         * @implements IContract
         * @constructor
         * @param {ei.IContract=} [properties] Properties to set
         */
        function Contract(properties) {
            this.goals = [];
            this.goalSets = [];
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Contract identifier.
         * @member {string} identifier
         * @memberof ei.Contract
         * @instance
         */
        Contract.prototype.identifier = "";

        /**
         * Contract name.
         * @member {string} name
         * @memberof ei.Contract
         * @instance
         */
        Contract.prototype.name = "";

        /**
         * Contract description.
         * @member {string} description
         * @memberof ei.Contract
         * @instance
         */
        Contract.prototype.description = "";

        /**
         * Contract egg.
         * @member {ei.Egg} egg
         * @memberof ei.Contract
         * @instance
         */
        Contract.prototype.egg = 1;

        /**
         * Contract goals.
         * @member {Array.<ei.Contract.IGoal>} goals
         * @memberof ei.Contract
         * @instance
         */
        Contract.prototype.goals = $util.emptyArray;

        /**
         * Contract goalSets.
         * @member {Array.<ei.Contract.IGoalSet>} goalSets
         * @memberof ei.Contract
         * @instance
         */
        Contract.prototype.goalSets = $util.emptyArray;

        /**
         * Contract coopAllowed.
         * @member {boolean} coopAllowed
         * @memberof ei.Contract
         * @instance
         */
        Contract.prototype.coopAllowed = false;

        /**
         * Contract maxCoopSize.
         * @member {number} maxCoopSize
         * @memberof ei.Contract
         * @instance
         */
        Contract.prototype.maxCoopSize = 0;

        /**
         * Contract maxBoosts.
         * @member {number} maxBoosts
         * @memberof ei.Contract
         * @instance
         */
        Contract.prototype.maxBoosts = 0;

        /**
         * Contract minutesPerToken.
         * @member {number} minutesPerToken
         * @memberof ei.Contract
         * @instance
         */
        Contract.prototype.minutesPerToken = 60;

        /**
         * Contract expirationTime.
         * @member {number} expirationTime
         * @memberof ei.Contract
         * @instance
         */
        Contract.prototype.expirationTime = 0;

        /**
         * Contract lengthSeconds.
         * @member {number} lengthSeconds
         * @memberof ei.Contract
         * @instance
         */
        Contract.prototype.lengthSeconds = 0;

        /**
         * Contract maxSoulEggs.
         * @member {number} maxSoulEggs
         * @memberof ei.Contract
         * @instance
         */
        Contract.prototype.maxSoulEggs = 0;

        /**
         * Contract minClientVersion.
         * @member {number} minClientVersion
         * @memberof ei.Contract
         * @instance
         */
        Contract.prototype.minClientVersion = 0;

        /**
         * Contract debug.
         * @member {boolean} debug
         * @memberof ei.Contract
         * @instance
         */
        Contract.prototype.debug = false;

        /**
         * Creates a new Contract instance using the specified properties.
         * @function create
         * @memberof ei.Contract
         * @static
         * @param {ei.IContract=} [properties] Properties to set
         * @returns {ei.Contract} Contract instance
         */
        Contract.create = function create(properties) {
            return new Contract(properties);
        };

        /**
         * Encodes the specified Contract message. Does not implicitly {@link ei.Contract.verify|verify} messages.
         * @function encode
         * @memberof ei.Contract
         * @static
         * @param {ei.IContract} message Contract message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Contract.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.identifier != null && Object.hasOwnProperty.call(message, "identifier"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.identifier);
            if (message.egg != null && Object.hasOwnProperty.call(message, "egg"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.egg);
            if (message.goals != null && message.goals.length)
                for (let i = 0; i < message.goals.length; ++i)
                    $root.ei.Contract.Goal.encode(message.goals[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.coopAllowed != null && Object.hasOwnProperty.call(message, "coopAllowed"))
                writer.uint32(/* id 4, wireType 0 =*/32).bool(message.coopAllowed);
            if (message.maxCoopSize != null && Object.hasOwnProperty.call(message, "maxCoopSize"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.maxCoopSize);
            if (message.expirationTime != null && Object.hasOwnProperty.call(message, "expirationTime"))
                writer.uint32(/* id 6, wireType 1 =*/49).double(message.expirationTime);
            if (message.lengthSeconds != null && Object.hasOwnProperty.call(message, "lengthSeconds"))
                writer.uint32(/* id 7, wireType 1 =*/57).double(message.lengthSeconds);
            if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                writer.uint32(/* id 9, wireType 2 =*/74).string(message.name);
            if (message.description != null && Object.hasOwnProperty.call(message, "description"))
                writer.uint32(/* id 10, wireType 2 =*/82).string(message.description);
            if (message.debug != null && Object.hasOwnProperty.call(message, "debug"))
                writer.uint32(/* id 11, wireType 0 =*/88).bool(message.debug);
            if (message.maxBoosts != null && Object.hasOwnProperty.call(message, "maxBoosts"))
                writer.uint32(/* id 12, wireType 0 =*/96).uint32(message.maxBoosts);
            if (message.maxSoulEggs != null && Object.hasOwnProperty.call(message, "maxSoulEggs"))
                writer.uint32(/* id 13, wireType 1 =*/105).double(message.maxSoulEggs);
            if (message.minClientVersion != null && Object.hasOwnProperty.call(message, "minClientVersion"))
                writer.uint32(/* id 14, wireType 0 =*/112).uint32(message.minClientVersion);
            if (message.minutesPerToken != null && Object.hasOwnProperty.call(message, "minutesPerToken"))
                writer.uint32(/* id 15, wireType 1 =*/121).double(message.minutesPerToken);
            if (message.goalSets != null && message.goalSets.length)
                for (let i = 0; i < message.goalSets.length; ++i)
                    $root.ei.Contract.GoalSet.encode(message.goalSets[i], writer.uint32(/* id 16, wireType 2 =*/130).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified Contract message, length delimited. Does not implicitly {@link ei.Contract.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ei.Contract
         * @static
         * @param {ei.IContract} message Contract message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Contract.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a Contract message from the specified reader or buffer.
         * @function decode
         * @memberof ei.Contract
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ei.Contract} Contract
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Contract.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ei.Contract();
            while (reader.pos < end) {
                let tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.identifier = reader.string();
                    break;
                case 9:
                    message.name = reader.string();
                    break;
                case 10:
                    message.description = reader.string();
                    break;
                case 2:
                    message.egg = reader.int32();
                    break;
                case 3:
                    if (!(message.goals && message.goals.length))
                        message.goals = [];
                    message.goals.push($root.ei.Contract.Goal.decode(reader, reader.uint32()));
                    break;
                case 16:
                    if (!(message.goalSets && message.goalSets.length))
                        message.goalSets = [];
                    message.goalSets.push($root.ei.Contract.GoalSet.decode(reader, reader.uint32()));
                    break;
                case 4:
                    message.coopAllowed = reader.bool();
                    break;
                case 5:
                    message.maxCoopSize = reader.uint32();
                    break;
                case 12:
                    message.maxBoosts = reader.uint32();
                    break;
                case 15:
                    message.minutesPerToken = reader.double();
                    break;
                case 6:
                    message.expirationTime = reader.double();
                    break;
                case 7:
                    message.lengthSeconds = reader.double();
                    break;
                case 13:
                    message.maxSoulEggs = reader.double();
                    break;
                case 14:
                    message.minClientVersion = reader.uint32();
                    break;
                case 11:
                    message.debug = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a Contract message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ei.Contract
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ei.Contract} Contract
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Contract.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a Contract message.
         * @function verify
         * @memberof ei.Contract
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Contract.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.identifier != null && message.hasOwnProperty("identifier"))
                if (!$util.isString(message.identifier))
                    return "identifier: string expected";
            if (message.name != null && message.hasOwnProperty("name"))
                if (!$util.isString(message.name))
                    return "name: string expected";
            if (message.description != null && message.hasOwnProperty("description"))
                if (!$util.isString(message.description))
                    return "description: string expected";
            if (message.egg != null && message.hasOwnProperty("egg"))
                switch (message.egg) {
                default:
                    return "egg: enum value expected";
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 16:
                case 17:
                case 18:
                case 19:
                case 100:
                case 101:
                case 102:
                case 103:
                case 104:
                case 1000:
                    break;
                }
            if (message.goals != null && message.hasOwnProperty("goals")) {
                if (!Array.isArray(message.goals))
                    return "goals: array expected";
                for (let i = 0; i < message.goals.length; ++i) {
                    let error = $root.ei.Contract.Goal.verify(message.goals[i]);
                    if (error)
                        return "goals." + error;
                }
            }
            if (message.goalSets != null && message.hasOwnProperty("goalSets")) {
                if (!Array.isArray(message.goalSets))
                    return "goalSets: array expected";
                for (let i = 0; i < message.goalSets.length; ++i) {
                    let error = $root.ei.Contract.GoalSet.verify(message.goalSets[i]);
                    if (error)
                        return "goalSets." + error;
                }
            }
            if (message.coopAllowed != null && message.hasOwnProperty("coopAllowed"))
                if (typeof message.coopAllowed !== "boolean")
                    return "coopAllowed: boolean expected";
            if (message.maxCoopSize != null && message.hasOwnProperty("maxCoopSize"))
                if (!$util.isInteger(message.maxCoopSize))
                    return "maxCoopSize: integer expected";
            if (message.maxBoosts != null && message.hasOwnProperty("maxBoosts"))
                if (!$util.isInteger(message.maxBoosts))
                    return "maxBoosts: integer expected";
            if (message.minutesPerToken != null && message.hasOwnProperty("minutesPerToken"))
                if (typeof message.minutesPerToken !== "number")
                    return "minutesPerToken: number expected";
            if (message.expirationTime != null && message.hasOwnProperty("expirationTime"))
                if (typeof message.expirationTime !== "number")
                    return "expirationTime: number expected";
            if (message.lengthSeconds != null && message.hasOwnProperty("lengthSeconds"))
                if (typeof message.lengthSeconds !== "number")
                    return "lengthSeconds: number expected";
            if (message.maxSoulEggs != null && message.hasOwnProperty("maxSoulEggs"))
                if (typeof message.maxSoulEggs !== "number")
                    return "maxSoulEggs: number expected";
            if (message.minClientVersion != null && message.hasOwnProperty("minClientVersion"))
                if (!$util.isInteger(message.minClientVersion))
                    return "minClientVersion: integer expected";
            if (message.debug != null && message.hasOwnProperty("debug"))
                if (typeof message.debug !== "boolean")
                    return "debug: boolean expected";
            return null;
        };

        /**
         * Creates a Contract message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ei.Contract
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ei.Contract} Contract
         */
        Contract.fromObject = function fromObject(object) {
            if (object instanceof $root.ei.Contract)
                return object;
            let message = new $root.ei.Contract();
            if (object.identifier != null)
                message.identifier = String(object.identifier);
            if (object.name != null)
                message.name = String(object.name);
            if (object.description != null)
                message.description = String(object.description);
            switch (object.egg) {
            case "EDIBLE":
            case 1:
                message.egg = 1;
                break;
            case "SUPERFOOD":
            case 2:
                message.egg = 2;
                break;
            case "MEDICAL":
            case 3:
                message.egg = 3;
                break;
            case "ROCKET_FUEL":
            case 4:
                message.egg = 4;
                break;
            case "SUPER_MATERIAL":
            case 5:
                message.egg = 5;
                break;
            case "FUSION":
            case 6:
                message.egg = 6;
                break;
            case "QUANTUM":
            case 7:
                message.egg = 7;
                break;
            case "IMMORTALITY":
            case 8:
                message.egg = 8;
                break;
            case "TACHYON":
            case 9:
                message.egg = 9;
                break;
            case "GRAVITON":
            case 10:
                message.egg = 10;
                break;
            case "DILITHIUM":
            case 11:
                message.egg = 11;
                break;
            case "PRODIGY":
            case 12:
                message.egg = 12;
                break;
            case "TERRAFORM":
            case 13:
                message.egg = 13;
                break;
            case "ANTIMATTER":
            case 14:
                message.egg = 14;
                break;
            case "DARK_MATTER":
            case 15:
                message.egg = 15;
                break;
            case "AI":
            case 16:
                message.egg = 16;
                break;
            case "NEBULA":
            case 17:
                message.egg = 17;
                break;
            case "UNIVERSE":
            case 18:
                message.egg = 18;
                break;
            case "ENLIGHTENMENT":
            case 19:
                message.egg = 19;
                break;
            case "CHOCOLATE":
            case 100:
                message.egg = 100;
                break;
            case "EASTER":
            case 101:
                message.egg = 101;
                break;
            case "WATERBALLOON":
            case 102:
                message.egg = 102;
                break;
            case "FIREWORK":
            case 103:
                message.egg = 103;
                break;
            case "PUMPKIN":
            case 104:
                message.egg = 104;
                break;
            case "UNKNOWN":
            case 1000:
                message.egg = 1000;
                break;
            }
            if (object.goals) {
                if (!Array.isArray(object.goals))
                    throw TypeError(".ei.Contract.goals: array expected");
                message.goals = [];
                for (let i = 0; i < object.goals.length; ++i) {
                    if (typeof object.goals[i] !== "object")
                        throw TypeError(".ei.Contract.goals: object expected");
                    message.goals[i] = $root.ei.Contract.Goal.fromObject(object.goals[i]);
                }
            }
            if (object.goalSets) {
                if (!Array.isArray(object.goalSets))
                    throw TypeError(".ei.Contract.goalSets: array expected");
                message.goalSets = [];
                for (let i = 0; i < object.goalSets.length; ++i) {
                    if (typeof object.goalSets[i] !== "object")
                        throw TypeError(".ei.Contract.goalSets: object expected");
                    message.goalSets[i] = $root.ei.Contract.GoalSet.fromObject(object.goalSets[i]);
                }
            }
            if (object.coopAllowed != null)
                message.coopAllowed = Boolean(object.coopAllowed);
            if (object.maxCoopSize != null)
                message.maxCoopSize = object.maxCoopSize >>> 0;
            if (object.maxBoosts != null)
                message.maxBoosts = object.maxBoosts >>> 0;
            if (object.minutesPerToken != null)
                message.minutesPerToken = Number(object.minutesPerToken);
            if (object.expirationTime != null)
                message.expirationTime = Number(object.expirationTime);
            if (object.lengthSeconds != null)
                message.lengthSeconds = Number(object.lengthSeconds);
            if (object.maxSoulEggs != null)
                message.maxSoulEggs = Number(object.maxSoulEggs);
            if (object.minClientVersion != null)
                message.minClientVersion = object.minClientVersion >>> 0;
            if (object.debug != null)
                message.debug = Boolean(object.debug);
            return message;
        };

        /**
         * Creates a plain object from a Contract message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ei.Contract
         * @static
         * @param {ei.Contract} message Contract
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        Contract.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.arrays || options.defaults) {
                object.goals = [];
                object.goalSets = [];
            }
            if (options.defaults) {
                object.identifier = "";
                object.egg = options.enums === String ? "EDIBLE" : 1;
                object.coopAllowed = false;
                object.maxCoopSize = 0;
                object.expirationTime = 0;
                object.lengthSeconds = 0;
                object.name = "";
                object.description = "";
                object.debug = false;
                object.maxBoosts = 0;
                object.maxSoulEggs = 0;
                object.minClientVersion = 0;
                object.minutesPerToken = 60;
            }
            if (message.identifier != null && message.hasOwnProperty("identifier"))
                object.identifier = message.identifier;
            if (message.egg != null && message.hasOwnProperty("egg"))
                object.egg = options.enums === String ? $root.ei.Egg[message.egg] : message.egg;
            if (message.goals && message.goals.length) {
                object.goals = [];
                for (let j = 0; j < message.goals.length; ++j)
                    object.goals[j] = $root.ei.Contract.Goal.toObject(message.goals[j], options);
            }
            if (message.coopAllowed != null && message.hasOwnProperty("coopAllowed"))
                object.coopAllowed = message.coopAllowed;
            if (message.maxCoopSize != null && message.hasOwnProperty("maxCoopSize"))
                object.maxCoopSize = message.maxCoopSize;
            if (message.expirationTime != null && message.hasOwnProperty("expirationTime"))
                object.expirationTime = options.json && !isFinite(message.expirationTime) ? String(message.expirationTime) : message.expirationTime;
            if (message.lengthSeconds != null && message.hasOwnProperty("lengthSeconds"))
                object.lengthSeconds = options.json && !isFinite(message.lengthSeconds) ? String(message.lengthSeconds) : message.lengthSeconds;
            if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
            if (message.description != null && message.hasOwnProperty("description"))
                object.description = message.description;
            if (message.debug != null && message.hasOwnProperty("debug"))
                object.debug = message.debug;
            if (message.maxBoosts != null && message.hasOwnProperty("maxBoosts"))
                object.maxBoosts = message.maxBoosts;
            if (message.maxSoulEggs != null && message.hasOwnProperty("maxSoulEggs"))
                object.maxSoulEggs = options.json && !isFinite(message.maxSoulEggs) ? String(message.maxSoulEggs) : message.maxSoulEggs;
            if (message.minClientVersion != null && message.hasOwnProperty("minClientVersion"))
                object.minClientVersion = message.minClientVersion;
            if (message.minutesPerToken != null && message.hasOwnProperty("minutesPerToken"))
                object.minutesPerToken = options.json && !isFinite(message.minutesPerToken) ? String(message.minutesPerToken) : message.minutesPerToken;
            if (message.goalSets && message.goalSets.length) {
                object.goalSets = [];
                for (let j = 0; j < message.goalSets.length; ++j)
                    object.goalSets[j] = $root.ei.Contract.GoalSet.toObject(message.goalSets[j], options);
            }
            return object;
        };

        /**
         * Converts this Contract to JSON.
         * @function toJSON
         * @memberof ei.Contract
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        Contract.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        Contract.Goal = (function() {

            /**
             * Properties of a Goal.
             * @memberof ei.Contract
             * @interface IGoal
             * @property {ei.GoalType|null} [type] Goal type
             * @property {number|null} [targetAmount] Goal targetAmount
             * @property {ei.RewardType|null} [rewardType] Goal rewardType
             * @property {string|null} [rewardSubType] Goal rewardSubType
             * @property {number|null} [rewardAmount] Goal rewardAmount
             * @property {number|null} [targetSoulEggs] Goal targetSoulEggs
             */

            /**
             * Constructs a new Goal.
             * @memberof ei.Contract
             * @classdesc Represents a Goal.
             * @implements IGoal
             * @constructor
             * @param {ei.Contract.IGoal=} [properties] Properties to set
             */
            function Goal(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Goal type.
             * @member {ei.GoalType} type
             * @memberof ei.Contract.Goal
             * @instance
             */
            Goal.prototype.type = 1;

            /**
             * Goal targetAmount.
             * @member {number} targetAmount
             * @memberof ei.Contract.Goal
             * @instance
             */
            Goal.prototype.targetAmount = 0;

            /**
             * Goal rewardType.
             * @member {ei.RewardType} rewardType
             * @memberof ei.Contract.Goal
             * @instance
             */
            Goal.prototype.rewardType = 1;

            /**
             * Goal rewardSubType.
             * @member {string} rewardSubType
             * @memberof ei.Contract.Goal
             * @instance
             */
            Goal.prototype.rewardSubType = "";

            /**
             * Goal rewardAmount.
             * @member {number} rewardAmount
             * @memberof ei.Contract.Goal
             * @instance
             */
            Goal.prototype.rewardAmount = 0;

            /**
             * Goal targetSoulEggs.
             * @member {number} targetSoulEggs
             * @memberof ei.Contract.Goal
             * @instance
             */
            Goal.prototype.targetSoulEggs = 0;

            /**
             * Creates a new Goal instance using the specified properties.
             * @function create
             * @memberof ei.Contract.Goal
             * @static
             * @param {ei.Contract.IGoal=} [properties] Properties to set
             * @returns {ei.Contract.Goal} Goal instance
             */
            Goal.create = function create(properties) {
                return new Goal(properties);
            };

            /**
             * Encodes the specified Goal message. Does not implicitly {@link ei.Contract.Goal.verify|verify} messages.
             * @function encode
             * @memberof ei.Contract.Goal
             * @static
             * @param {ei.Contract.IGoal} message Goal message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Goal.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);
                if (message.targetAmount != null && Object.hasOwnProperty.call(message, "targetAmount"))
                    writer.uint32(/* id 2, wireType 1 =*/17).double(message.targetAmount);
                if (message.rewardType != null && Object.hasOwnProperty.call(message, "rewardType"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.rewardType);
                if (message.rewardSubType != null && Object.hasOwnProperty.call(message, "rewardSubType"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.rewardSubType);
                if (message.rewardAmount != null && Object.hasOwnProperty.call(message, "rewardAmount"))
                    writer.uint32(/* id 5, wireType 1 =*/41).double(message.rewardAmount);
                if (message.targetSoulEggs != null && Object.hasOwnProperty.call(message, "targetSoulEggs"))
                    writer.uint32(/* id 6, wireType 1 =*/49).double(message.targetSoulEggs);
                return writer;
            };

            /**
             * Encodes the specified Goal message, length delimited. Does not implicitly {@link ei.Contract.Goal.verify|verify} messages.
             * @function encodeDelimited
             * @memberof ei.Contract.Goal
             * @static
             * @param {ei.Contract.IGoal} message Goal message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Goal.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Goal message from the specified reader or buffer.
             * @function decode
             * @memberof ei.Contract.Goal
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {ei.Contract.Goal} Goal
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Goal.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ei.Contract.Goal();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.type = reader.int32();
                        break;
                    case 2:
                        message.targetAmount = reader.double();
                        break;
                    case 3:
                        message.rewardType = reader.int32();
                        break;
                    case 4:
                        message.rewardSubType = reader.string();
                        break;
                    case 5:
                        message.rewardAmount = reader.double();
                        break;
                    case 6:
                        message.targetSoulEggs = reader.double();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Goal message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof ei.Contract.Goal
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {ei.Contract.Goal} Goal
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Goal.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Goal message.
             * @function verify
             * @memberof ei.Contract.Goal
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Goal.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.type != null && message.hasOwnProperty("type"))
                    switch (message.type) {
                    default:
                        return "type: enum value expected";
                    case 1:
                    case 100:
                        break;
                    }
                if (message.targetAmount != null && message.hasOwnProperty("targetAmount"))
                    if (typeof message.targetAmount !== "number")
                        return "targetAmount: number expected";
                if (message.rewardType != null && message.hasOwnProperty("rewardType"))
                    switch (message.rewardType) {
                    default:
                        return "rewardType: enum value expected";
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                    case 8:
                    case 9:
                    case 10:
                    case 100:
                        break;
                    }
                if (message.rewardSubType != null && message.hasOwnProperty("rewardSubType"))
                    if (!$util.isString(message.rewardSubType))
                        return "rewardSubType: string expected";
                if (message.rewardAmount != null && message.hasOwnProperty("rewardAmount"))
                    if (typeof message.rewardAmount !== "number")
                        return "rewardAmount: number expected";
                if (message.targetSoulEggs != null && message.hasOwnProperty("targetSoulEggs"))
                    if (typeof message.targetSoulEggs !== "number")
                        return "targetSoulEggs: number expected";
                return null;
            };

            /**
             * Creates a Goal message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof ei.Contract.Goal
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {ei.Contract.Goal} Goal
             */
            Goal.fromObject = function fromObject(object) {
                if (object instanceof $root.ei.Contract.Goal)
                    return object;
                let message = new $root.ei.Contract.Goal();
                switch (object.type) {
                case "EGGS_LAID":
                case 1:
                    message.type = 1;
                    break;
                case "UNKNOWN_GOAL":
                case 100:
                    message.type = 100;
                    break;
                }
                if (object.targetAmount != null)
                    message.targetAmount = Number(object.targetAmount);
                switch (object.rewardType) {
                case "CASH":
                case 1:
                    message.rewardType = 1;
                    break;
                case "GOLD":
                case 2:
                    message.rewardType = 2;
                    break;
                case "SOUL_EGGS":
                case 3:
                    message.rewardType = 3;
                    break;
                case "EGGS_OF_PROPHECY":
                case 4:
                    message.rewardType = 4;
                    break;
                case "EPIC_RESEARCH_ITEM":
                case 5:
                    message.rewardType = 5;
                    break;
                case "PIGGY_FILL":
                case 6:
                    message.rewardType = 6;
                    break;
                case "PIGGY_MULTIPLIER":
                case 7:
                    message.rewardType = 7;
                    break;
                case "PIGGY_LEVEL_BUMP":
                case 8:
                    message.rewardType = 8;
                    break;
                case "BOOST":
                case 9:
                    message.rewardType = 9;
                    break;
                case "BOOST_TOKEN":
                case 10:
                    message.rewardType = 10;
                    break;
                case "UNKNOWN_REWARD":
                case 100:
                    message.rewardType = 100;
                    break;
                }
                if (object.rewardSubType != null)
                    message.rewardSubType = String(object.rewardSubType);
                if (object.rewardAmount != null)
                    message.rewardAmount = Number(object.rewardAmount);
                if (object.targetSoulEggs != null)
                    message.targetSoulEggs = Number(object.targetSoulEggs);
                return message;
            };

            /**
             * Creates a plain object from a Goal message. Also converts values to other types if specified.
             * @function toObject
             * @memberof ei.Contract.Goal
             * @static
             * @param {ei.Contract.Goal} message Goal
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Goal.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.type = options.enums === String ? "EGGS_LAID" : 1;
                    object.targetAmount = 0;
                    object.rewardType = options.enums === String ? "CASH" : 1;
                    object.rewardSubType = "";
                    object.rewardAmount = 0;
                    object.targetSoulEggs = 0;
                }
                if (message.type != null && message.hasOwnProperty("type"))
                    object.type = options.enums === String ? $root.ei.GoalType[message.type] : message.type;
                if (message.targetAmount != null && message.hasOwnProperty("targetAmount"))
                    object.targetAmount = options.json && !isFinite(message.targetAmount) ? String(message.targetAmount) : message.targetAmount;
                if (message.rewardType != null && message.hasOwnProperty("rewardType"))
                    object.rewardType = options.enums === String ? $root.ei.RewardType[message.rewardType] : message.rewardType;
                if (message.rewardSubType != null && message.hasOwnProperty("rewardSubType"))
                    object.rewardSubType = message.rewardSubType;
                if (message.rewardAmount != null && message.hasOwnProperty("rewardAmount"))
                    object.rewardAmount = options.json && !isFinite(message.rewardAmount) ? String(message.rewardAmount) : message.rewardAmount;
                if (message.targetSoulEggs != null && message.hasOwnProperty("targetSoulEggs"))
                    object.targetSoulEggs = options.json && !isFinite(message.targetSoulEggs) ? String(message.targetSoulEggs) : message.targetSoulEggs;
                return object;
            };

            /**
             * Converts this Goal to JSON.
             * @function toJSON
             * @memberof ei.Contract.Goal
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Goal.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Goal;
        })();

        Contract.GoalSet = (function() {

            /**
             * Properties of a GoalSet.
             * @memberof ei.Contract
             * @interface IGoalSet
             * @property {Array.<ei.Contract.IGoal>|null} [goals] GoalSet goals
             */

            /**
             * Constructs a new GoalSet.
             * @memberof ei.Contract
             * @classdesc Represents a GoalSet.
             * @implements IGoalSet
             * @constructor
             * @param {ei.Contract.IGoalSet=} [properties] Properties to set
             */
            function GoalSet(properties) {
                this.goals = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GoalSet goals.
             * @member {Array.<ei.Contract.IGoal>} goals
             * @memberof ei.Contract.GoalSet
             * @instance
             */
            GoalSet.prototype.goals = $util.emptyArray;

            /**
             * Creates a new GoalSet instance using the specified properties.
             * @function create
             * @memberof ei.Contract.GoalSet
             * @static
             * @param {ei.Contract.IGoalSet=} [properties] Properties to set
             * @returns {ei.Contract.GoalSet} GoalSet instance
             */
            GoalSet.create = function create(properties) {
                return new GoalSet(properties);
            };

            /**
             * Encodes the specified GoalSet message. Does not implicitly {@link ei.Contract.GoalSet.verify|verify} messages.
             * @function encode
             * @memberof ei.Contract.GoalSet
             * @static
             * @param {ei.Contract.IGoalSet} message GoalSet message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GoalSet.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.goals != null && message.goals.length)
                    for (let i = 0; i < message.goals.length; ++i)
                        $root.ei.Contract.Goal.encode(message.goals[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified GoalSet message, length delimited. Does not implicitly {@link ei.Contract.GoalSet.verify|verify} messages.
             * @function encodeDelimited
             * @memberof ei.Contract.GoalSet
             * @static
             * @param {ei.Contract.IGoalSet} message GoalSet message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GoalSet.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GoalSet message from the specified reader or buffer.
             * @function decode
             * @memberof ei.Contract.GoalSet
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {ei.Contract.GoalSet} GoalSet
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GoalSet.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ei.Contract.GoalSet();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.goals && message.goals.length))
                            message.goals = [];
                        message.goals.push($root.ei.Contract.Goal.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a GoalSet message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof ei.Contract.GoalSet
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {ei.Contract.GoalSet} GoalSet
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GoalSet.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GoalSet message.
             * @function verify
             * @memberof ei.Contract.GoalSet
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GoalSet.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.goals != null && message.hasOwnProperty("goals")) {
                    if (!Array.isArray(message.goals))
                        return "goals: array expected";
                    for (let i = 0; i < message.goals.length; ++i) {
                        let error = $root.ei.Contract.Goal.verify(message.goals[i]);
                        if (error)
                            return "goals." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a GoalSet message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof ei.Contract.GoalSet
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {ei.Contract.GoalSet} GoalSet
             */
            GoalSet.fromObject = function fromObject(object) {
                if (object instanceof $root.ei.Contract.GoalSet)
                    return object;
                let message = new $root.ei.Contract.GoalSet();
                if (object.goals) {
                    if (!Array.isArray(object.goals))
                        throw TypeError(".ei.Contract.GoalSet.goals: array expected");
                    message.goals = [];
                    for (let i = 0; i < object.goals.length; ++i) {
                        if (typeof object.goals[i] !== "object")
                            throw TypeError(".ei.Contract.GoalSet.goals: object expected");
                        message.goals[i] = $root.ei.Contract.Goal.fromObject(object.goals[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a GoalSet message. Also converts values to other types if specified.
             * @function toObject
             * @memberof ei.Contract.GoalSet
             * @static
             * @param {ei.Contract.GoalSet} message GoalSet
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GoalSet.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.goals = [];
                if (message.goals && message.goals.length) {
                    object.goals = [];
                    for (let j = 0; j < message.goals.length; ++j)
                        object.goals[j] = $root.ei.Contract.Goal.toObject(message.goals[j], options);
                }
                return object;
            };

            /**
             * Converts this GoalSet to JSON.
             * @function toJSON
             * @memberof ei.Contract.GoalSet
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GoalSet.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return GoalSet;
        })();

        return Contract;
    })();

    ei.BasicRequestInfo = (function() {

        /**
         * Properties of a BasicRequestInfo.
         * @memberof ei
         * @interface IBasicRequestInfo
         * @property {string|null} [eiUserId] BasicRequestInfo eiUserId
         * @property {number|null} [clientVersion] BasicRequestInfo clientVersion
         * @property {string|null} [version] BasicRequestInfo version
         * @property {string|null} [build] BasicRequestInfo build
         * @property {string|null} [platform] BasicRequestInfo platform
         */

        /**
         * Constructs a new BasicRequestInfo.
         * @memberof ei
         * @classdesc Represents a BasicRequestInfo.
         * @implements IBasicRequestInfo
         * @constructor
         * @param {ei.IBasicRequestInfo=} [properties] Properties to set
         */
        function BasicRequestInfo(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * BasicRequestInfo eiUserId.
         * @member {string} eiUserId
         * @memberof ei.BasicRequestInfo
         * @instance
         */
        BasicRequestInfo.prototype.eiUserId = "";

        /**
         * BasicRequestInfo clientVersion.
         * @member {number} clientVersion
         * @memberof ei.BasicRequestInfo
         * @instance
         */
        BasicRequestInfo.prototype.clientVersion = 0;

        /**
         * BasicRequestInfo version.
         * @member {string} version
         * @memberof ei.BasicRequestInfo
         * @instance
         */
        BasicRequestInfo.prototype.version = "";

        /**
         * BasicRequestInfo build.
         * @member {string} build
         * @memberof ei.BasicRequestInfo
         * @instance
         */
        BasicRequestInfo.prototype.build = "";

        /**
         * BasicRequestInfo platform.
         * @member {string} platform
         * @memberof ei.BasicRequestInfo
         * @instance
         */
        BasicRequestInfo.prototype.platform = "";

        /**
         * Creates a new BasicRequestInfo instance using the specified properties.
         * @function create
         * @memberof ei.BasicRequestInfo
         * @static
         * @param {ei.IBasicRequestInfo=} [properties] Properties to set
         * @returns {ei.BasicRequestInfo} BasicRequestInfo instance
         */
        BasicRequestInfo.create = function create(properties) {
            return new BasicRequestInfo(properties);
        };

        /**
         * Encodes the specified BasicRequestInfo message. Does not implicitly {@link ei.BasicRequestInfo.verify|verify} messages.
         * @function encode
         * @memberof ei.BasicRequestInfo
         * @static
         * @param {ei.IBasicRequestInfo} message BasicRequestInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BasicRequestInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.eiUserId != null && Object.hasOwnProperty.call(message, "eiUserId"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.eiUserId);
            if (message.clientVersion != null && Object.hasOwnProperty.call(message, "clientVersion"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.clientVersion);
            if (message.version != null && Object.hasOwnProperty.call(message, "version"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.version);
            if (message.build != null && Object.hasOwnProperty.call(message, "build"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.build);
            if (message.platform != null && Object.hasOwnProperty.call(message, "platform"))
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.platform);
            return writer;
        };

        /**
         * Encodes the specified BasicRequestInfo message, length delimited. Does not implicitly {@link ei.BasicRequestInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ei.BasicRequestInfo
         * @static
         * @param {ei.IBasicRequestInfo} message BasicRequestInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BasicRequestInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a BasicRequestInfo message from the specified reader or buffer.
         * @function decode
         * @memberof ei.BasicRequestInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ei.BasicRequestInfo} BasicRequestInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BasicRequestInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ei.BasicRequestInfo();
            while (reader.pos < end) {
                let tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.eiUserId = reader.string();
                    break;
                case 2:
                    message.clientVersion = reader.uint32();
                    break;
                case 3:
                    message.version = reader.string();
                    break;
                case 4:
                    message.build = reader.string();
                    break;
                case 5:
                    message.platform = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a BasicRequestInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ei.BasicRequestInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ei.BasicRequestInfo} BasicRequestInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BasicRequestInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a BasicRequestInfo message.
         * @function verify
         * @memberof ei.BasicRequestInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        BasicRequestInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.eiUserId != null && message.hasOwnProperty("eiUserId"))
                if (!$util.isString(message.eiUserId))
                    return "eiUserId: string expected";
            if (message.clientVersion != null && message.hasOwnProperty("clientVersion"))
                if (!$util.isInteger(message.clientVersion))
                    return "clientVersion: integer expected";
            if (message.version != null && message.hasOwnProperty("version"))
                if (!$util.isString(message.version))
                    return "version: string expected";
            if (message.build != null && message.hasOwnProperty("build"))
                if (!$util.isString(message.build))
                    return "build: string expected";
            if (message.platform != null && message.hasOwnProperty("platform"))
                if (!$util.isString(message.platform))
                    return "platform: string expected";
            return null;
        };

        /**
         * Creates a BasicRequestInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ei.BasicRequestInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ei.BasicRequestInfo} BasicRequestInfo
         */
        BasicRequestInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.ei.BasicRequestInfo)
                return object;
            let message = new $root.ei.BasicRequestInfo();
            if (object.eiUserId != null)
                message.eiUserId = String(object.eiUserId);
            if (object.clientVersion != null)
                message.clientVersion = object.clientVersion >>> 0;
            if (object.version != null)
                message.version = String(object.version);
            if (object.build != null)
                message.build = String(object.build);
            if (object.platform != null)
                message.platform = String(object.platform);
            return message;
        };

        /**
         * Creates a plain object from a BasicRequestInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ei.BasicRequestInfo
         * @static
         * @param {ei.BasicRequestInfo} message BasicRequestInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        BasicRequestInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.defaults) {
                object.eiUserId = "";
                object.clientVersion = 0;
                object.version = "";
                object.build = "";
                object.platform = "";
            }
            if (message.eiUserId != null && message.hasOwnProperty("eiUserId"))
                object.eiUserId = message.eiUserId;
            if (message.clientVersion != null && message.hasOwnProperty("clientVersion"))
                object.clientVersion = message.clientVersion;
            if (message.version != null && message.hasOwnProperty("version"))
                object.version = message.version;
            if (message.build != null && message.hasOwnProperty("build"))
                object.build = message.build;
            if (message.platform != null && message.hasOwnProperty("platform"))
                object.platform = message.platform;
            return object;
        };

        /**
         * Converts this BasicRequestInfo to JSON.
         * @function toJSON
         * @memberof ei.BasicRequestInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        BasicRequestInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return BasicRequestInfo;
    })();

    ei.ContractsRequest = (function() {

        /**
         * Properties of a ContractsRequest.
         * @memberof ei
         * @interface IContractsRequest
         * @property {number|null} [soulEggs] ContractsRequest soulEggs
         * @property {number|null} [clientVersion] ContractsRequest clientVersion
         */

        /**
         * Constructs a new ContractsRequest.
         * @memberof ei
         * @classdesc Represents a ContractsRequest.
         * @implements IContractsRequest
         * @constructor
         * @param {ei.IContractsRequest=} [properties] Properties to set
         */
        function ContractsRequest(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ContractsRequest soulEggs.
         * @member {number} soulEggs
         * @memberof ei.ContractsRequest
         * @instance
         */
        ContractsRequest.prototype.soulEggs = 0;

        /**
         * ContractsRequest clientVersion.
         * @member {number} clientVersion
         * @memberof ei.ContractsRequest
         * @instance
         */
        ContractsRequest.prototype.clientVersion = 0;

        /**
         * Creates a new ContractsRequest instance using the specified properties.
         * @function create
         * @memberof ei.ContractsRequest
         * @static
         * @param {ei.IContractsRequest=} [properties] Properties to set
         * @returns {ei.ContractsRequest} ContractsRequest instance
         */
        ContractsRequest.create = function create(properties) {
            return new ContractsRequest(properties);
        };

        /**
         * Encodes the specified ContractsRequest message. Does not implicitly {@link ei.ContractsRequest.verify|verify} messages.
         * @function encode
         * @memberof ei.ContractsRequest
         * @static
         * @param {ei.IContractsRequest} message ContractsRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ContractsRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.soulEggs != null && Object.hasOwnProperty.call(message, "soulEggs"))
                writer.uint32(/* id 1, wireType 1 =*/9).double(message.soulEggs);
            if (message.clientVersion != null && Object.hasOwnProperty.call(message, "clientVersion"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.clientVersion);
            return writer;
        };

        /**
         * Encodes the specified ContractsRequest message, length delimited. Does not implicitly {@link ei.ContractsRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ei.ContractsRequest
         * @static
         * @param {ei.IContractsRequest} message ContractsRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ContractsRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ContractsRequest message from the specified reader or buffer.
         * @function decode
         * @memberof ei.ContractsRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ei.ContractsRequest} ContractsRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ContractsRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ei.ContractsRequest();
            while (reader.pos < end) {
                let tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.soulEggs = reader.double();
                    break;
                case 5:
                    message.clientVersion = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ContractsRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ei.ContractsRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ei.ContractsRequest} ContractsRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ContractsRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ContractsRequest message.
         * @function verify
         * @memberof ei.ContractsRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ContractsRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.soulEggs != null && message.hasOwnProperty("soulEggs"))
                if (typeof message.soulEggs !== "number")
                    return "soulEggs: number expected";
            if (message.clientVersion != null && message.hasOwnProperty("clientVersion"))
                if (!$util.isInteger(message.clientVersion))
                    return "clientVersion: integer expected";
            return null;
        };

        /**
         * Creates a ContractsRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ei.ContractsRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ei.ContractsRequest} ContractsRequest
         */
        ContractsRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.ei.ContractsRequest)
                return object;
            let message = new $root.ei.ContractsRequest();
            if (object.soulEggs != null)
                message.soulEggs = Number(object.soulEggs);
            if (object.clientVersion != null)
                message.clientVersion = object.clientVersion >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a ContractsRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ei.ContractsRequest
         * @static
         * @param {ei.ContractsRequest} message ContractsRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ContractsRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.defaults) {
                object.soulEggs = 0;
                object.clientVersion = 0;
            }
            if (message.soulEggs != null && message.hasOwnProperty("soulEggs"))
                object.soulEggs = options.json && !isFinite(message.soulEggs) ? String(message.soulEggs) : message.soulEggs;
            if (message.clientVersion != null && message.hasOwnProperty("clientVersion"))
                object.clientVersion = message.clientVersion;
            return object;
        };

        /**
         * Converts this ContractsRequest to JSON.
         * @function toJSON
         * @memberof ei.ContractsRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ContractsRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ContractsRequest;
    })();

    ei.ContractsResponse = (function() {

        /**
         * Properties of a ContractsResponse.
         * @memberof ei
         * @interface IContractsResponse
         * @property {Array.<ei.IContract>|null} [contracts] ContractsResponse contracts
         * @property {string|null} [warningMessage] ContractsResponse warningMessage
         * @property {number|null} [serverTime] ContractsResponse serverTime
         * @property {number|null} [maxEop] ContractsResponse maxEop
         */

        /**
         * Constructs a new ContractsResponse.
         * @memberof ei
         * @classdesc Represents a ContractsResponse.
         * @implements IContractsResponse
         * @constructor
         * @param {ei.IContractsResponse=} [properties] Properties to set
         */
        function ContractsResponse(properties) {
            this.contracts = [];
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ContractsResponse contracts.
         * @member {Array.<ei.IContract>} contracts
         * @memberof ei.ContractsResponse
         * @instance
         */
        ContractsResponse.prototype.contracts = $util.emptyArray;

        /**
         * ContractsResponse warningMessage.
         * @member {string} warningMessage
         * @memberof ei.ContractsResponse
         * @instance
         */
        ContractsResponse.prototype.warningMessage = "";

        /**
         * ContractsResponse serverTime.
         * @member {number} serverTime
         * @memberof ei.ContractsResponse
         * @instance
         */
        ContractsResponse.prototype.serverTime = 0;

        /**
         * ContractsResponse maxEop.
         * @member {number} maxEop
         * @memberof ei.ContractsResponse
         * @instance
         */
        ContractsResponse.prototype.maxEop = 1000;

        /**
         * Creates a new ContractsResponse instance using the specified properties.
         * @function create
         * @memberof ei.ContractsResponse
         * @static
         * @param {ei.IContractsResponse=} [properties] Properties to set
         * @returns {ei.ContractsResponse} ContractsResponse instance
         */
        ContractsResponse.create = function create(properties) {
            return new ContractsResponse(properties);
        };

        /**
         * Encodes the specified ContractsResponse message. Does not implicitly {@link ei.ContractsResponse.verify|verify} messages.
         * @function encode
         * @memberof ei.ContractsResponse
         * @static
         * @param {ei.IContractsResponse} message ContractsResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ContractsResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.contracts != null && message.contracts.length)
                for (let i = 0; i < message.contracts.length; ++i)
                    $root.ei.Contract.encode(message.contracts[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.serverTime != null && Object.hasOwnProperty.call(message, "serverTime"))
                writer.uint32(/* id 2, wireType 1 =*/17).double(message.serverTime);
            if (message.maxEop != null && Object.hasOwnProperty.call(message, "maxEop"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.maxEop);
            if (message.warningMessage != null && Object.hasOwnProperty.call(message, "warningMessage"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.warningMessage);
            return writer;
        };

        /**
         * Encodes the specified ContractsResponse message, length delimited. Does not implicitly {@link ei.ContractsResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ei.ContractsResponse
         * @static
         * @param {ei.IContractsResponse} message ContractsResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ContractsResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ContractsResponse message from the specified reader or buffer.
         * @function decode
         * @memberof ei.ContractsResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ei.ContractsResponse} ContractsResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ContractsResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ei.ContractsResponse();
            while (reader.pos < end) {
                let tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.contracts && message.contracts.length))
                        message.contracts = [];
                    message.contracts.push($root.ei.Contract.decode(reader, reader.uint32()));
                    break;
                case 4:
                    message.warningMessage = reader.string();
                    break;
                case 2:
                    message.serverTime = reader.double();
                    break;
                case 3:
                    message.maxEop = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ContractsResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ei.ContractsResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ei.ContractsResponse} ContractsResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ContractsResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ContractsResponse message.
         * @function verify
         * @memberof ei.ContractsResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ContractsResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.contracts != null && message.hasOwnProperty("contracts")) {
                if (!Array.isArray(message.contracts))
                    return "contracts: array expected";
                for (let i = 0; i < message.contracts.length; ++i) {
                    let error = $root.ei.Contract.verify(message.contracts[i]);
                    if (error)
                        return "contracts." + error;
                }
            }
            if (message.warningMessage != null && message.hasOwnProperty("warningMessage"))
                if (!$util.isString(message.warningMessage))
                    return "warningMessage: string expected";
            if (message.serverTime != null && message.hasOwnProperty("serverTime"))
                if (typeof message.serverTime !== "number")
                    return "serverTime: number expected";
            if (message.maxEop != null && message.hasOwnProperty("maxEop"))
                if (!$util.isInteger(message.maxEop))
                    return "maxEop: integer expected";
            return null;
        };

        /**
         * Creates a ContractsResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ei.ContractsResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ei.ContractsResponse} ContractsResponse
         */
        ContractsResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.ei.ContractsResponse)
                return object;
            let message = new $root.ei.ContractsResponse();
            if (object.contracts) {
                if (!Array.isArray(object.contracts))
                    throw TypeError(".ei.ContractsResponse.contracts: array expected");
                message.contracts = [];
                for (let i = 0; i < object.contracts.length; ++i) {
                    if (typeof object.contracts[i] !== "object")
                        throw TypeError(".ei.ContractsResponse.contracts: object expected");
                    message.contracts[i] = $root.ei.Contract.fromObject(object.contracts[i]);
                }
            }
            if (object.warningMessage != null)
                message.warningMessage = String(object.warningMessage);
            if (object.serverTime != null)
                message.serverTime = Number(object.serverTime);
            if (object.maxEop != null)
                message.maxEop = object.maxEop >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a ContractsResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ei.ContractsResponse
         * @static
         * @param {ei.ContractsResponse} message ContractsResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ContractsResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.arrays || options.defaults)
                object.contracts = [];
            if (options.defaults) {
                object.serverTime = 0;
                object.maxEop = 1000;
                object.warningMessage = "";
            }
            if (message.contracts && message.contracts.length) {
                object.contracts = [];
                for (let j = 0; j < message.contracts.length; ++j)
                    object.contracts[j] = $root.ei.Contract.toObject(message.contracts[j], options);
            }
            if (message.serverTime != null && message.hasOwnProperty("serverTime"))
                object.serverTime = options.json && !isFinite(message.serverTime) ? String(message.serverTime) : message.serverTime;
            if (message.maxEop != null && message.hasOwnProperty("maxEop"))
                object.maxEop = message.maxEop;
            if (message.warningMessage != null && message.hasOwnProperty("warningMessage"))
                object.warningMessage = message.warningMessage;
            return object;
        };

        /**
         * Converts this ContractsResponse to JSON.
         * @function toJSON
         * @memberof ei.ContractsResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ContractsResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ContractsResponse;
    })();

    ei.ContractCoopStatusRequest = (function() {

        /**
         * Properties of a ContractCoopStatusRequest.
         * @memberof ei
         * @interface IContractCoopStatusRequest
         * @property {ei.IBasicRequestInfo|null} [rinfo] ContractCoopStatusRequest rinfo
         * @property {string|null} [contractIdentifier] ContractCoopStatusRequest contractIdentifier
         * @property {string|null} [coopIdentifier] ContractCoopStatusRequest coopIdentifier
         * @property {string|null} [userId] ContractCoopStatusRequest userId
         * @property {number|null} [clientVersion] ContractCoopStatusRequest clientVersion
         */

        /**
         * Constructs a new ContractCoopStatusRequest.
         * @memberof ei
         * @classdesc Represents a ContractCoopStatusRequest.
         * @implements IContractCoopStatusRequest
         * @constructor
         * @param {ei.IContractCoopStatusRequest=} [properties] Properties to set
         */
        function ContractCoopStatusRequest(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ContractCoopStatusRequest rinfo.
         * @member {ei.IBasicRequestInfo|null|undefined} rinfo
         * @memberof ei.ContractCoopStatusRequest
         * @instance
         */
        ContractCoopStatusRequest.prototype.rinfo = null;

        /**
         * ContractCoopStatusRequest contractIdentifier.
         * @member {string} contractIdentifier
         * @memberof ei.ContractCoopStatusRequest
         * @instance
         */
        ContractCoopStatusRequest.prototype.contractIdentifier = "";

        /**
         * ContractCoopStatusRequest coopIdentifier.
         * @member {string} coopIdentifier
         * @memberof ei.ContractCoopStatusRequest
         * @instance
         */
        ContractCoopStatusRequest.prototype.coopIdentifier = "";

        /**
         * ContractCoopStatusRequest userId.
         * @member {string} userId
         * @memberof ei.ContractCoopStatusRequest
         * @instance
         */
        ContractCoopStatusRequest.prototype.userId = "";

        /**
         * ContractCoopStatusRequest clientVersion.
         * @member {number} clientVersion
         * @memberof ei.ContractCoopStatusRequest
         * @instance
         */
        ContractCoopStatusRequest.prototype.clientVersion = 0;

        /**
         * Creates a new ContractCoopStatusRequest instance using the specified properties.
         * @function create
         * @memberof ei.ContractCoopStatusRequest
         * @static
         * @param {ei.IContractCoopStatusRequest=} [properties] Properties to set
         * @returns {ei.ContractCoopStatusRequest} ContractCoopStatusRequest instance
         */
        ContractCoopStatusRequest.create = function create(properties) {
            return new ContractCoopStatusRequest(properties);
        };

        /**
         * Encodes the specified ContractCoopStatusRequest message. Does not implicitly {@link ei.ContractCoopStatusRequest.verify|verify} messages.
         * @function encode
         * @memberof ei.ContractCoopStatusRequest
         * @static
         * @param {ei.IContractCoopStatusRequest} message ContractCoopStatusRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ContractCoopStatusRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.contractIdentifier != null && Object.hasOwnProperty.call(message, "contractIdentifier"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.contractIdentifier);
            if (message.coopIdentifier != null && Object.hasOwnProperty.call(message, "coopIdentifier"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.coopIdentifier);
            if (message.userId != null && Object.hasOwnProperty.call(message, "userId"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.userId);
            if (message.clientVersion != null && Object.hasOwnProperty.call(message, "clientVersion"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.clientVersion);
            if (message.rinfo != null && Object.hasOwnProperty.call(message, "rinfo"))
                $root.ei.BasicRequestInfo.encode(message.rinfo, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ContractCoopStatusRequest message, length delimited. Does not implicitly {@link ei.ContractCoopStatusRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ei.ContractCoopStatusRequest
         * @static
         * @param {ei.IContractCoopStatusRequest} message ContractCoopStatusRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ContractCoopStatusRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ContractCoopStatusRequest message from the specified reader or buffer.
         * @function decode
         * @memberof ei.ContractCoopStatusRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ei.ContractCoopStatusRequest} ContractCoopStatusRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ContractCoopStatusRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ei.ContractCoopStatusRequest();
            while (reader.pos < end) {
                let tag = reader.uint32();
                switch (tag >>> 3) {
                case 5:
                    message.rinfo = $root.ei.BasicRequestInfo.decode(reader, reader.uint32());
                    break;
                case 1:
                    message.contractIdentifier = reader.string();
                    break;
                case 2:
                    message.coopIdentifier = reader.string();
                    break;
                case 3:
                    message.userId = reader.string();
                    break;
                case 4:
                    message.clientVersion = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ContractCoopStatusRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ei.ContractCoopStatusRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ei.ContractCoopStatusRequest} ContractCoopStatusRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ContractCoopStatusRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ContractCoopStatusRequest message.
         * @function verify
         * @memberof ei.ContractCoopStatusRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ContractCoopStatusRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.rinfo != null && message.hasOwnProperty("rinfo")) {
                let error = $root.ei.BasicRequestInfo.verify(message.rinfo);
                if (error)
                    return "rinfo." + error;
            }
            if (message.contractIdentifier != null && message.hasOwnProperty("contractIdentifier"))
                if (!$util.isString(message.contractIdentifier))
                    return "contractIdentifier: string expected";
            if (message.coopIdentifier != null && message.hasOwnProperty("coopIdentifier"))
                if (!$util.isString(message.coopIdentifier))
                    return "coopIdentifier: string expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isString(message.userId))
                    return "userId: string expected";
            if (message.clientVersion != null && message.hasOwnProperty("clientVersion"))
                if (!$util.isInteger(message.clientVersion))
                    return "clientVersion: integer expected";
            return null;
        };

        /**
         * Creates a ContractCoopStatusRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ei.ContractCoopStatusRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ei.ContractCoopStatusRequest} ContractCoopStatusRequest
         */
        ContractCoopStatusRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.ei.ContractCoopStatusRequest)
                return object;
            let message = new $root.ei.ContractCoopStatusRequest();
            if (object.rinfo != null) {
                if (typeof object.rinfo !== "object")
                    throw TypeError(".ei.ContractCoopStatusRequest.rinfo: object expected");
                message.rinfo = $root.ei.BasicRequestInfo.fromObject(object.rinfo);
            }
            if (object.contractIdentifier != null)
                message.contractIdentifier = String(object.contractIdentifier);
            if (object.coopIdentifier != null)
                message.coopIdentifier = String(object.coopIdentifier);
            if (object.userId != null)
                message.userId = String(object.userId);
            if (object.clientVersion != null)
                message.clientVersion = object.clientVersion >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a ContractCoopStatusRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ei.ContractCoopStatusRequest
         * @static
         * @param {ei.ContractCoopStatusRequest} message ContractCoopStatusRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ContractCoopStatusRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.defaults) {
                object.contractIdentifier = "";
                object.coopIdentifier = "";
                object.userId = "";
                object.clientVersion = 0;
                object.rinfo = null;
            }
            if (message.contractIdentifier != null && message.hasOwnProperty("contractIdentifier"))
                object.contractIdentifier = message.contractIdentifier;
            if (message.coopIdentifier != null && message.hasOwnProperty("coopIdentifier"))
                object.coopIdentifier = message.coopIdentifier;
            if (message.userId != null && message.hasOwnProperty("userId"))
                object.userId = message.userId;
            if (message.clientVersion != null && message.hasOwnProperty("clientVersion"))
                object.clientVersion = message.clientVersion;
            if (message.rinfo != null && message.hasOwnProperty("rinfo"))
                object.rinfo = $root.ei.BasicRequestInfo.toObject(message.rinfo, options);
            return object;
        };

        /**
         * Converts this ContractCoopStatusRequest to JSON.
         * @function toJSON
         * @memberof ei.ContractCoopStatusRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ContractCoopStatusRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ContractCoopStatusRequest;
    })();

    ei.ContractCoopStatusResponse = (function() {

        /**
         * Properties of a ContractCoopStatusResponse.
         * @memberof ei
         * @interface IContractCoopStatusResponse
         * @property {string|null} [contractIdentifier] ContractCoopStatusResponse contractIdentifier
         * @property {number|null} [totalAmount] ContractCoopStatusResponse totalAmount
         * @property {string|null} [coopIdentifier] ContractCoopStatusResponse coopIdentifier
         * @property {Array.<ei.ContractCoopStatusResponse.IContributionInfo>|null} [contributors] ContractCoopStatusResponse contributors
         * @property {boolean|null} [autoGenerated] ContractCoopStatusResponse autoGenerated
         * @property {boolean|null} ["public"] ContractCoopStatusResponse public
         * @property {string|null} [creatorId] ContractCoopStatusResponse creatorId
         * @property {number|null} [secondsRemaining] ContractCoopStatusResponse secondsRemaining
         * @property {boolean|null} [allMembersReporting] ContractCoopStatusResponse allMembersReporting
         * @property {number|null} [gracePeriodSecondsRemaining] ContractCoopStatusResponse gracePeriodSecondsRemaining
         * @property {Array.<ei.ContractCoopStatusResponse.ICoopGift>|null} [gifts] ContractCoopStatusResponse gifts
         * @property {number|null} [localTimestamp] ContractCoopStatusResponse localTimestamp
         */

        /**
         * Constructs a new ContractCoopStatusResponse.
         * @memberof ei
         * @classdesc Represents a ContractCoopStatusResponse.
         * @implements IContractCoopStatusResponse
         * @constructor
         * @param {ei.IContractCoopStatusResponse=} [properties] Properties to set
         */
        function ContractCoopStatusResponse(properties) {
            this.contributors = [];
            this.gifts = [];
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ContractCoopStatusResponse contractIdentifier.
         * @member {string} contractIdentifier
         * @memberof ei.ContractCoopStatusResponse
         * @instance
         */
        ContractCoopStatusResponse.prototype.contractIdentifier = "";

        /**
         * ContractCoopStatusResponse totalAmount.
         * @member {number} totalAmount
         * @memberof ei.ContractCoopStatusResponse
         * @instance
         */
        ContractCoopStatusResponse.prototype.totalAmount = 0;

        /**
         * ContractCoopStatusResponse coopIdentifier.
         * @member {string} coopIdentifier
         * @memberof ei.ContractCoopStatusResponse
         * @instance
         */
        ContractCoopStatusResponse.prototype.coopIdentifier = "";

        /**
         * ContractCoopStatusResponse contributors.
         * @member {Array.<ei.ContractCoopStatusResponse.IContributionInfo>} contributors
         * @memberof ei.ContractCoopStatusResponse
         * @instance
         */
        ContractCoopStatusResponse.prototype.contributors = $util.emptyArray;

        /**
         * ContractCoopStatusResponse autoGenerated.
         * @member {boolean} autoGenerated
         * @memberof ei.ContractCoopStatusResponse
         * @instance
         */
        ContractCoopStatusResponse.prototype.autoGenerated = false;

        /**
         * ContractCoopStatusResponse public.
         * @member {boolean} public
         * @memberof ei.ContractCoopStatusResponse
         * @instance
         */
        ContractCoopStatusResponse.prototype["public"] = false;

        /**
         * ContractCoopStatusResponse creatorId.
         * @member {string} creatorId
         * @memberof ei.ContractCoopStatusResponse
         * @instance
         */
        ContractCoopStatusResponse.prototype.creatorId = "";

        /**
         * ContractCoopStatusResponse secondsRemaining.
         * @member {number} secondsRemaining
         * @memberof ei.ContractCoopStatusResponse
         * @instance
         */
        ContractCoopStatusResponse.prototype.secondsRemaining = 0;

        /**
         * ContractCoopStatusResponse allMembersReporting.
         * @member {boolean} allMembersReporting
         * @memberof ei.ContractCoopStatusResponse
         * @instance
         */
        ContractCoopStatusResponse.prototype.allMembersReporting = false;

        /**
         * ContractCoopStatusResponse gracePeriodSecondsRemaining.
         * @member {number} gracePeriodSecondsRemaining
         * @memberof ei.ContractCoopStatusResponse
         * @instance
         */
        ContractCoopStatusResponse.prototype.gracePeriodSecondsRemaining = 0;

        /**
         * ContractCoopStatusResponse gifts.
         * @member {Array.<ei.ContractCoopStatusResponse.ICoopGift>} gifts
         * @memberof ei.ContractCoopStatusResponse
         * @instance
         */
        ContractCoopStatusResponse.prototype.gifts = $util.emptyArray;

        /**
         * ContractCoopStatusResponse localTimestamp.
         * @member {number} localTimestamp
         * @memberof ei.ContractCoopStatusResponse
         * @instance
         */
        ContractCoopStatusResponse.prototype.localTimestamp = 0;

        /**
         * Creates a new ContractCoopStatusResponse instance using the specified properties.
         * @function create
         * @memberof ei.ContractCoopStatusResponse
         * @static
         * @param {ei.IContractCoopStatusResponse=} [properties] Properties to set
         * @returns {ei.ContractCoopStatusResponse} ContractCoopStatusResponse instance
         */
        ContractCoopStatusResponse.create = function create(properties) {
            return new ContractCoopStatusResponse(properties);
        };

        /**
         * Encodes the specified ContractCoopStatusResponse message. Does not implicitly {@link ei.ContractCoopStatusResponse.verify|verify} messages.
         * @function encode
         * @memberof ei.ContractCoopStatusResponse
         * @static
         * @param {ei.IContractCoopStatusResponse} message ContractCoopStatusResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ContractCoopStatusResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.contractIdentifier != null && Object.hasOwnProperty.call(message, "contractIdentifier"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.contractIdentifier);
            if (message.totalAmount != null && Object.hasOwnProperty.call(message, "totalAmount"))
                writer.uint32(/* id 2, wireType 1 =*/17).double(message.totalAmount);
            if (message.coopIdentifier != null && Object.hasOwnProperty.call(message, "coopIdentifier"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.coopIdentifier);
            if (message.contributors != null && message.contributors.length)
                for (let i = 0; i < message.contributors.length; ++i)
                    $root.ei.ContractCoopStatusResponse.ContributionInfo.encode(message.contributors[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            if (message.secondsRemaining != null && Object.hasOwnProperty.call(message, "secondsRemaining"))
                writer.uint32(/* id 5, wireType 1 =*/41).double(message.secondsRemaining);
            if (message.allMembersReporting != null && Object.hasOwnProperty.call(message, "allMembersReporting"))
                writer.uint32(/* id 6, wireType 0 =*/48).bool(message.allMembersReporting);
            if (message.gracePeriodSecondsRemaining != null && Object.hasOwnProperty.call(message, "gracePeriodSecondsRemaining"))
                writer.uint32(/* id 7, wireType 1 =*/57).double(message.gracePeriodSecondsRemaining);
            if (message.autoGenerated != null && Object.hasOwnProperty.call(message, "autoGenerated"))
                writer.uint32(/* id 8, wireType 0 =*/64).bool(message.autoGenerated);
            if (message.creatorId != null && Object.hasOwnProperty.call(message, "creatorId"))
                writer.uint32(/* id 9, wireType 2 =*/74).string(message.creatorId);
            if (message["public"] != null && Object.hasOwnProperty.call(message, "public"))
                writer.uint32(/* id 10, wireType 0 =*/80).bool(message["public"]);
            if (message.gifts != null && message.gifts.length)
                for (let i = 0; i < message.gifts.length; ++i)
                    $root.ei.ContractCoopStatusResponse.CoopGift.encode(message.gifts[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
            if (message.localTimestamp != null && Object.hasOwnProperty.call(message, "localTimestamp"))
                writer.uint32(/* id 12, wireType 1 =*/97).double(message.localTimestamp);
            return writer;
        };

        /**
         * Encodes the specified ContractCoopStatusResponse message, length delimited. Does not implicitly {@link ei.ContractCoopStatusResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ei.ContractCoopStatusResponse
         * @static
         * @param {ei.IContractCoopStatusResponse} message ContractCoopStatusResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ContractCoopStatusResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ContractCoopStatusResponse message from the specified reader or buffer.
         * @function decode
         * @memberof ei.ContractCoopStatusResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ei.ContractCoopStatusResponse} ContractCoopStatusResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ContractCoopStatusResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ei.ContractCoopStatusResponse();
            while (reader.pos < end) {
                let tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.contractIdentifier = reader.string();
                    break;
                case 2:
                    message.totalAmount = reader.double();
                    break;
                case 3:
                    message.coopIdentifier = reader.string();
                    break;
                case 4:
                    if (!(message.contributors && message.contributors.length))
                        message.contributors = [];
                    message.contributors.push($root.ei.ContractCoopStatusResponse.ContributionInfo.decode(reader, reader.uint32()));
                    break;
                case 8:
                    message.autoGenerated = reader.bool();
                    break;
                case 10:
                    message["public"] = reader.bool();
                    break;
                case 9:
                    message.creatorId = reader.string();
                    break;
                case 5:
                    message.secondsRemaining = reader.double();
                    break;
                case 6:
                    message.allMembersReporting = reader.bool();
                    break;
                case 7:
                    message.gracePeriodSecondsRemaining = reader.double();
                    break;
                case 11:
                    if (!(message.gifts && message.gifts.length))
                        message.gifts = [];
                    message.gifts.push($root.ei.ContractCoopStatusResponse.CoopGift.decode(reader, reader.uint32()));
                    break;
                case 12:
                    message.localTimestamp = reader.double();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ContractCoopStatusResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ei.ContractCoopStatusResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ei.ContractCoopStatusResponse} ContractCoopStatusResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ContractCoopStatusResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ContractCoopStatusResponse message.
         * @function verify
         * @memberof ei.ContractCoopStatusResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ContractCoopStatusResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.contractIdentifier != null && message.hasOwnProperty("contractIdentifier"))
                if (!$util.isString(message.contractIdentifier))
                    return "contractIdentifier: string expected";
            if (message.totalAmount != null && message.hasOwnProperty("totalAmount"))
                if (typeof message.totalAmount !== "number")
                    return "totalAmount: number expected";
            if (message.coopIdentifier != null && message.hasOwnProperty("coopIdentifier"))
                if (!$util.isString(message.coopIdentifier))
                    return "coopIdentifier: string expected";
            if (message.contributors != null && message.hasOwnProperty("contributors")) {
                if (!Array.isArray(message.contributors))
                    return "contributors: array expected";
                for (let i = 0; i < message.contributors.length; ++i) {
                    let error = $root.ei.ContractCoopStatusResponse.ContributionInfo.verify(message.contributors[i]);
                    if (error)
                        return "contributors." + error;
                }
            }
            if (message.autoGenerated != null && message.hasOwnProperty("autoGenerated"))
                if (typeof message.autoGenerated !== "boolean")
                    return "autoGenerated: boolean expected";
            if (message["public"] != null && message.hasOwnProperty("public"))
                if (typeof message["public"] !== "boolean")
                    return "public: boolean expected";
            if (message.creatorId != null && message.hasOwnProperty("creatorId"))
                if (!$util.isString(message.creatorId))
                    return "creatorId: string expected";
            if (message.secondsRemaining != null && message.hasOwnProperty("secondsRemaining"))
                if (typeof message.secondsRemaining !== "number")
                    return "secondsRemaining: number expected";
            if (message.allMembersReporting != null && message.hasOwnProperty("allMembersReporting"))
                if (typeof message.allMembersReporting !== "boolean")
                    return "allMembersReporting: boolean expected";
            if (message.gracePeriodSecondsRemaining != null && message.hasOwnProperty("gracePeriodSecondsRemaining"))
                if (typeof message.gracePeriodSecondsRemaining !== "number")
                    return "gracePeriodSecondsRemaining: number expected";
            if (message.gifts != null && message.hasOwnProperty("gifts")) {
                if (!Array.isArray(message.gifts))
                    return "gifts: array expected";
                for (let i = 0; i < message.gifts.length; ++i) {
                    let error = $root.ei.ContractCoopStatusResponse.CoopGift.verify(message.gifts[i]);
                    if (error)
                        return "gifts." + error;
                }
            }
            if (message.localTimestamp != null && message.hasOwnProperty("localTimestamp"))
                if (typeof message.localTimestamp !== "number")
                    return "localTimestamp: number expected";
            return null;
        };

        /**
         * Creates a ContractCoopStatusResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ei.ContractCoopStatusResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ei.ContractCoopStatusResponse} ContractCoopStatusResponse
         */
        ContractCoopStatusResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.ei.ContractCoopStatusResponse)
                return object;
            let message = new $root.ei.ContractCoopStatusResponse();
            if (object.contractIdentifier != null)
                message.contractIdentifier = String(object.contractIdentifier);
            if (object.totalAmount != null)
                message.totalAmount = Number(object.totalAmount);
            if (object.coopIdentifier != null)
                message.coopIdentifier = String(object.coopIdentifier);
            if (object.contributors) {
                if (!Array.isArray(object.contributors))
                    throw TypeError(".ei.ContractCoopStatusResponse.contributors: array expected");
                message.contributors = [];
                for (let i = 0; i < object.contributors.length; ++i) {
                    if (typeof object.contributors[i] !== "object")
                        throw TypeError(".ei.ContractCoopStatusResponse.contributors: object expected");
                    message.contributors[i] = $root.ei.ContractCoopStatusResponse.ContributionInfo.fromObject(object.contributors[i]);
                }
            }
            if (object.autoGenerated != null)
                message.autoGenerated = Boolean(object.autoGenerated);
            if (object["public"] != null)
                message["public"] = Boolean(object["public"]);
            if (object.creatorId != null)
                message.creatorId = String(object.creatorId);
            if (object.secondsRemaining != null)
                message.secondsRemaining = Number(object.secondsRemaining);
            if (object.allMembersReporting != null)
                message.allMembersReporting = Boolean(object.allMembersReporting);
            if (object.gracePeriodSecondsRemaining != null)
                message.gracePeriodSecondsRemaining = Number(object.gracePeriodSecondsRemaining);
            if (object.gifts) {
                if (!Array.isArray(object.gifts))
                    throw TypeError(".ei.ContractCoopStatusResponse.gifts: array expected");
                message.gifts = [];
                for (let i = 0; i < object.gifts.length; ++i) {
                    if (typeof object.gifts[i] !== "object")
                        throw TypeError(".ei.ContractCoopStatusResponse.gifts: object expected");
                    message.gifts[i] = $root.ei.ContractCoopStatusResponse.CoopGift.fromObject(object.gifts[i]);
                }
            }
            if (object.localTimestamp != null)
                message.localTimestamp = Number(object.localTimestamp);
            return message;
        };

        /**
         * Creates a plain object from a ContractCoopStatusResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ei.ContractCoopStatusResponse
         * @static
         * @param {ei.ContractCoopStatusResponse} message ContractCoopStatusResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ContractCoopStatusResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.arrays || options.defaults) {
                object.contributors = [];
                object.gifts = [];
            }
            if (options.defaults) {
                object.contractIdentifier = "";
                object.totalAmount = 0;
                object.coopIdentifier = "";
                object.secondsRemaining = 0;
                object.allMembersReporting = false;
                object.gracePeriodSecondsRemaining = 0;
                object.autoGenerated = false;
                object.creatorId = "";
                object["public"] = false;
                object.localTimestamp = 0;
            }
            if (message.contractIdentifier != null && message.hasOwnProperty("contractIdentifier"))
                object.contractIdentifier = message.contractIdentifier;
            if (message.totalAmount != null && message.hasOwnProperty("totalAmount"))
                object.totalAmount = options.json && !isFinite(message.totalAmount) ? String(message.totalAmount) : message.totalAmount;
            if (message.coopIdentifier != null && message.hasOwnProperty("coopIdentifier"))
                object.coopIdentifier = message.coopIdentifier;
            if (message.contributors && message.contributors.length) {
                object.contributors = [];
                for (let j = 0; j < message.contributors.length; ++j)
                    object.contributors[j] = $root.ei.ContractCoopStatusResponse.ContributionInfo.toObject(message.contributors[j], options);
            }
            if (message.secondsRemaining != null && message.hasOwnProperty("secondsRemaining"))
                object.secondsRemaining = options.json && !isFinite(message.secondsRemaining) ? String(message.secondsRemaining) : message.secondsRemaining;
            if (message.allMembersReporting != null && message.hasOwnProperty("allMembersReporting"))
                object.allMembersReporting = message.allMembersReporting;
            if (message.gracePeriodSecondsRemaining != null && message.hasOwnProperty("gracePeriodSecondsRemaining"))
                object.gracePeriodSecondsRemaining = options.json && !isFinite(message.gracePeriodSecondsRemaining) ? String(message.gracePeriodSecondsRemaining) : message.gracePeriodSecondsRemaining;
            if (message.autoGenerated != null && message.hasOwnProperty("autoGenerated"))
                object.autoGenerated = message.autoGenerated;
            if (message.creatorId != null && message.hasOwnProperty("creatorId"))
                object.creatorId = message.creatorId;
            if (message["public"] != null && message.hasOwnProperty("public"))
                object["public"] = message["public"];
            if (message.gifts && message.gifts.length) {
                object.gifts = [];
                for (let j = 0; j < message.gifts.length; ++j)
                    object.gifts[j] = $root.ei.ContractCoopStatusResponse.CoopGift.toObject(message.gifts[j], options);
            }
            if (message.localTimestamp != null && message.hasOwnProperty("localTimestamp"))
                object.localTimestamp = options.json && !isFinite(message.localTimestamp) ? String(message.localTimestamp) : message.localTimestamp;
            return object;
        };

        /**
         * Converts this ContractCoopStatusResponse to JSON.
         * @function toJSON
         * @memberof ei.ContractCoopStatusResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ContractCoopStatusResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        ContractCoopStatusResponse.ContributionInfo = (function() {

            /**
             * Properties of a ContributionInfo.
             * @memberof ei.ContractCoopStatusResponse
             * @interface IContributionInfo
             * @property {string|null} [userId] ContributionInfo userId
             * @property {string|null} [userName] ContributionInfo userName
             * @property {number|null} [contributionAmount] ContributionInfo contributionAmount
             * @property {number|null} [contributionRate] ContributionInfo contributionRate
             * @property {number|null} [soulPower] ContributionInfo soulPower
             * @property {number|null} [rankChange] ContributionInfo rankChange
             * @property {boolean|null} [active] ContributionInfo active
             * @property {boolean|null} [timeCheatDetected] ContributionInfo timeCheatDetected
             * @property {aux.Platform|null} [platform] ContributionInfo platform
             * @property {string|null} [pushId] ContributionInfo pushId
             * @property {number|null} [banVotes] ContributionInfo banVotes
             * @property {number|null} [boostTokens] ContributionInfo boostTokens
             * @property {Array.<ei.ICoopBuffState>|null} [buffHistory] ContributionInfo buffHistory
             */

            /**
             * Constructs a new ContributionInfo.
             * @memberof ei.ContractCoopStatusResponse
             * @classdesc Represents a ContributionInfo.
             * @implements IContributionInfo
             * @constructor
             * @param {ei.ContractCoopStatusResponse.IContributionInfo=} [properties] Properties to set
             */
            function ContributionInfo(properties) {
                this.buffHistory = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ContributionInfo userId.
             * @member {string} userId
             * @memberof ei.ContractCoopStatusResponse.ContributionInfo
             * @instance
             */
            ContributionInfo.prototype.userId = "";

            /**
             * ContributionInfo userName.
             * @member {string} userName
             * @memberof ei.ContractCoopStatusResponse.ContributionInfo
             * @instance
             */
            ContributionInfo.prototype.userName = "";

            /**
             * ContributionInfo contributionAmount.
             * @member {number} contributionAmount
             * @memberof ei.ContractCoopStatusResponse.ContributionInfo
             * @instance
             */
            ContributionInfo.prototype.contributionAmount = 0;

            /**
             * ContributionInfo contributionRate.
             * @member {number} contributionRate
             * @memberof ei.ContractCoopStatusResponse.ContributionInfo
             * @instance
             */
            ContributionInfo.prototype.contributionRate = 0;

            /**
             * ContributionInfo soulPower.
             * @member {number} soulPower
             * @memberof ei.ContractCoopStatusResponse.ContributionInfo
             * @instance
             */
            ContributionInfo.prototype.soulPower = 0;

            /**
             * ContributionInfo rankChange.
             * @member {number} rankChange
             * @memberof ei.ContractCoopStatusResponse.ContributionInfo
             * @instance
             */
            ContributionInfo.prototype.rankChange = 0;

            /**
             * ContributionInfo active.
             * @member {boolean} active
             * @memberof ei.ContractCoopStatusResponse.ContributionInfo
             * @instance
             */
            ContributionInfo.prototype.active = false;

            /**
             * ContributionInfo timeCheatDetected.
             * @member {boolean} timeCheatDetected
             * @memberof ei.ContractCoopStatusResponse.ContributionInfo
             * @instance
             */
            ContributionInfo.prototype.timeCheatDetected = false;

            /**
             * ContributionInfo platform.
             * @member {aux.Platform} platform
             * @memberof ei.ContractCoopStatusResponse.ContributionInfo
             * @instance
             */
            ContributionInfo.prototype.platform = 1;

            /**
             * ContributionInfo pushId.
             * @member {string} pushId
             * @memberof ei.ContractCoopStatusResponse.ContributionInfo
             * @instance
             */
            ContributionInfo.prototype.pushId = "";

            /**
             * ContributionInfo banVotes.
             * @member {number} banVotes
             * @memberof ei.ContractCoopStatusResponse.ContributionInfo
             * @instance
             */
            ContributionInfo.prototype.banVotes = 0;

            /**
             * ContributionInfo boostTokens.
             * @member {number} boostTokens
             * @memberof ei.ContractCoopStatusResponse.ContributionInfo
             * @instance
             */
            ContributionInfo.prototype.boostTokens = 0;

            /**
             * ContributionInfo buffHistory.
             * @member {Array.<ei.ICoopBuffState>} buffHistory
             * @memberof ei.ContractCoopStatusResponse.ContributionInfo
             * @instance
             */
            ContributionInfo.prototype.buffHistory = $util.emptyArray;

            /**
             * Creates a new ContributionInfo instance using the specified properties.
             * @function create
             * @memberof ei.ContractCoopStatusResponse.ContributionInfo
             * @static
             * @param {ei.ContractCoopStatusResponse.IContributionInfo=} [properties] Properties to set
             * @returns {ei.ContractCoopStatusResponse.ContributionInfo} ContributionInfo instance
             */
            ContributionInfo.create = function create(properties) {
                return new ContributionInfo(properties);
            };

            /**
             * Encodes the specified ContributionInfo message. Does not implicitly {@link ei.ContractCoopStatusResponse.ContributionInfo.verify|verify} messages.
             * @function encode
             * @memberof ei.ContractCoopStatusResponse.ContributionInfo
             * @static
             * @param {ei.ContractCoopStatusResponse.IContributionInfo} message ContributionInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ContributionInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.userId != null && Object.hasOwnProperty.call(message, "userId"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);
                if (message.userName != null && Object.hasOwnProperty.call(message, "userName"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.userName);
                if (message.contributionAmount != null && Object.hasOwnProperty.call(message, "contributionAmount"))
                    writer.uint32(/* id 3, wireType 1 =*/25).double(message.contributionAmount);
                if (message.active != null && Object.hasOwnProperty.call(message, "active"))
                    writer.uint32(/* id 4, wireType 0 =*/32).bool(message.active);
                if (message.platform != null && Object.hasOwnProperty.call(message, "platform"))
                    writer.uint32(/* id 5, wireType 0 =*/40).int32(message.platform);
                if (message.contributionRate != null && Object.hasOwnProperty.call(message, "contributionRate"))
                    writer.uint32(/* id 6, wireType 1 =*/49).double(message.contributionRate);
                if (message.timeCheatDetected != null && Object.hasOwnProperty.call(message, "timeCheatDetected"))
                    writer.uint32(/* id 7, wireType 0 =*/56).bool(message.timeCheatDetected);
                if (message.rankChange != null && Object.hasOwnProperty.call(message, "rankChange"))
                    writer.uint32(/* id 8, wireType 0 =*/64).int32(message.rankChange);
                if (message.pushId != null && Object.hasOwnProperty.call(message, "pushId"))
                    writer.uint32(/* id 9, wireType 2 =*/74).string(message.pushId);
                if (message.banVotes != null && Object.hasOwnProperty.call(message, "banVotes"))
                    writer.uint32(/* id 10, wireType 0 =*/80).uint32(message.banVotes);
                if (message.soulPower != null && Object.hasOwnProperty.call(message, "soulPower"))
                    writer.uint32(/* id 11, wireType 1 =*/89).double(message.soulPower);
                if (message.boostTokens != null && Object.hasOwnProperty.call(message, "boostTokens"))
                    writer.uint32(/* id 12, wireType 0 =*/96).uint32(message.boostTokens);
                if (message.buffHistory != null && message.buffHistory.length)
                    for (let i = 0; i < message.buffHistory.length; ++i)
                        $root.ei.CoopBuffState.encode(message.buffHistory[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified ContributionInfo message, length delimited. Does not implicitly {@link ei.ContractCoopStatusResponse.ContributionInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof ei.ContractCoopStatusResponse.ContributionInfo
             * @static
             * @param {ei.ContractCoopStatusResponse.IContributionInfo} message ContributionInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ContributionInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ContributionInfo message from the specified reader or buffer.
             * @function decode
             * @memberof ei.ContractCoopStatusResponse.ContributionInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {ei.ContractCoopStatusResponse.ContributionInfo} ContributionInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ContributionInfo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ei.ContractCoopStatusResponse.ContributionInfo();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.userId = reader.string();
                        break;
                    case 2:
                        message.userName = reader.string();
                        break;
                    case 3:
                        message.contributionAmount = reader.double();
                        break;
                    case 6:
                        message.contributionRate = reader.double();
                        break;
                    case 11:
                        message.soulPower = reader.double();
                        break;
                    case 8:
                        message.rankChange = reader.int32();
                        break;
                    case 4:
                        message.active = reader.bool();
                        break;
                    case 7:
                        message.timeCheatDetected = reader.bool();
                        break;
                    case 5:
                        message.platform = reader.int32();
                        break;
                    case 9:
                        message.pushId = reader.string();
                        break;
                    case 10:
                        message.banVotes = reader.uint32();
                        break;
                    case 12:
                        message.boostTokens = reader.uint32();
                        break;
                    case 13:
                        if (!(message.buffHistory && message.buffHistory.length))
                            message.buffHistory = [];
                        message.buffHistory.push($root.ei.CoopBuffState.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ContributionInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof ei.ContractCoopStatusResponse.ContributionInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {ei.ContractCoopStatusResponse.ContributionInfo} ContributionInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ContributionInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ContributionInfo message.
             * @function verify
             * @memberof ei.ContractCoopStatusResponse.ContributionInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ContributionInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.userId != null && message.hasOwnProperty("userId"))
                    if (!$util.isString(message.userId))
                        return "userId: string expected";
                if (message.userName != null && message.hasOwnProperty("userName"))
                    if (!$util.isString(message.userName))
                        return "userName: string expected";
                if (message.contributionAmount != null && message.hasOwnProperty("contributionAmount"))
                    if (typeof message.contributionAmount !== "number")
                        return "contributionAmount: number expected";
                if (message.contributionRate != null && message.hasOwnProperty("contributionRate"))
                    if (typeof message.contributionRate !== "number")
                        return "contributionRate: number expected";
                if (message.soulPower != null && message.hasOwnProperty("soulPower"))
                    if (typeof message.soulPower !== "number")
                        return "soulPower: number expected";
                if (message.rankChange != null && message.hasOwnProperty("rankChange"))
                    if (!$util.isInteger(message.rankChange))
                        return "rankChange: integer expected";
                if (message.active != null && message.hasOwnProperty("active"))
                    if (typeof message.active !== "boolean")
                        return "active: boolean expected";
                if (message.timeCheatDetected != null && message.hasOwnProperty("timeCheatDetected"))
                    if (typeof message.timeCheatDetected !== "boolean")
                        return "timeCheatDetected: boolean expected";
                if (message.platform != null && message.hasOwnProperty("platform"))
                    switch (message.platform) {
                    default:
                        return "platform: enum value expected";
                    case 1:
                    case 2:
                        break;
                    }
                if (message.pushId != null && message.hasOwnProperty("pushId"))
                    if (!$util.isString(message.pushId))
                        return "pushId: string expected";
                if (message.banVotes != null && message.hasOwnProperty("banVotes"))
                    if (!$util.isInteger(message.banVotes))
                        return "banVotes: integer expected";
                if (message.boostTokens != null && message.hasOwnProperty("boostTokens"))
                    if (!$util.isInteger(message.boostTokens))
                        return "boostTokens: integer expected";
                if (message.buffHistory != null && message.hasOwnProperty("buffHistory")) {
                    if (!Array.isArray(message.buffHistory))
                        return "buffHistory: array expected";
                    for (let i = 0; i < message.buffHistory.length; ++i) {
                        let error = $root.ei.CoopBuffState.verify(message.buffHistory[i]);
                        if (error)
                            return "buffHistory." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a ContributionInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof ei.ContractCoopStatusResponse.ContributionInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {ei.ContractCoopStatusResponse.ContributionInfo} ContributionInfo
             */
            ContributionInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.ei.ContractCoopStatusResponse.ContributionInfo)
                    return object;
                let message = new $root.ei.ContractCoopStatusResponse.ContributionInfo();
                if (object.userId != null)
                    message.userId = String(object.userId);
                if (object.userName != null)
                    message.userName = String(object.userName);
                if (object.contributionAmount != null)
                    message.contributionAmount = Number(object.contributionAmount);
                if (object.contributionRate != null)
                    message.contributionRate = Number(object.contributionRate);
                if (object.soulPower != null)
                    message.soulPower = Number(object.soulPower);
                if (object.rankChange != null)
                    message.rankChange = object.rankChange | 0;
                if (object.active != null)
                    message.active = Boolean(object.active);
                if (object.timeCheatDetected != null)
                    message.timeCheatDetected = Boolean(object.timeCheatDetected);
                switch (object.platform) {
                case "IOS":
                case 1:
                    message.platform = 1;
                    break;
                case "DROID":
                case 2:
                    message.platform = 2;
                    break;
                }
                if (object.pushId != null)
                    message.pushId = String(object.pushId);
                if (object.banVotes != null)
                    message.banVotes = object.banVotes >>> 0;
                if (object.boostTokens != null)
                    message.boostTokens = object.boostTokens >>> 0;
                if (object.buffHistory) {
                    if (!Array.isArray(object.buffHistory))
                        throw TypeError(".ei.ContractCoopStatusResponse.ContributionInfo.buffHistory: array expected");
                    message.buffHistory = [];
                    for (let i = 0; i < object.buffHistory.length; ++i) {
                        if (typeof object.buffHistory[i] !== "object")
                            throw TypeError(".ei.ContractCoopStatusResponse.ContributionInfo.buffHistory: object expected");
                        message.buffHistory[i] = $root.ei.CoopBuffState.fromObject(object.buffHistory[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a ContributionInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof ei.ContractCoopStatusResponse.ContributionInfo
             * @static
             * @param {ei.ContractCoopStatusResponse.ContributionInfo} message ContributionInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ContributionInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.buffHistory = [];
                if (options.defaults) {
                    object.userId = "";
                    object.userName = "";
                    object.contributionAmount = 0;
                    object.active = false;
                    object.platform = options.enums === String ? "IOS" : 1;
                    object.contributionRate = 0;
                    object.timeCheatDetected = false;
                    object.rankChange = 0;
                    object.pushId = "";
                    object.banVotes = 0;
                    object.soulPower = 0;
                    object.boostTokens = 0;
                }
                if (message.userId != null && message.hasOwnProperty("userId"))
                    object.userId = message.userId;
                if (message.userName != null && message.hasOwnProperty("userName"))
                    object.userName = message.userName;
                if (message.contributionAmount != null && message.hasOwnProperty("contributionAmount"))
                    object.contributionAmount = options.json && !isFinite(message.contributionAmount) ? String(message.contributionAmount) : message.contributionAmount;
                if (message.active != null && message.hasOwnProperty("active"))
                    object.active = message.active;
                if (message.platform != null && message.hasOwnProperty("platform"))
                    object.platform = options.enums === String ? $root.aux.Platform[message.platform] : message.platform;
                if (message.contributionRate != null && message.hasOwnProperty("contributionRate"))
                    object.contributionRate = options.json && !isFinite(message.contributionRate) ? String(message.contributionRate) : message.contributionRate;
                if (message.timeCheatDetected != null && message.hasOwnProperty("timeCheatDetected"))
                    object.timeCheatDetected = message.timeCheatDetected;
                if (message.rankChange != null && message.hasOwnProperty("rankChange"))
                    object.rankChange = message.rankChange;
                if (message.pushId != null && message.hasOwnProperty("pushId"))
                    object.pushId = message.pushId;
                if (message.banVotes != null && message.hasOwnProperty("banVotes"))
                    object.banVotes = message.banVotes;
                if (message.soulPower != null && message.hasOwnProperty("soulPower"))
                    object.soulPower = options.json && !isFinite(message.soulPower) ? String(message.soulPower) : message.soulPower;
                if (message.boostTokens != null && message.hasOwnProperty("boostTokens"))
                    object.boostTokens = message.boostTokens;
                if (message.buffHistory && message.buffHistory.length) {
                    object.buffHistory = [];
                    for (let j = 0; j < message.buffHistory.length; ++j)
                        object.buffHistory[j] = $root.ei.CoopBuffState.toObject(message.buffHistory[j], options);
                }
                return object;
            };

            /**
             * Converts this ContributionInfo to JSON.
             * @function toJSON
             * @memberof ei.ContractCoopStatusResponse.ContributionInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ContributionInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ContributionInfo;
        })();

        ContractCoopStatusResponse.CoopGift = (function() {

            /**
             * Properties of a CoopGift.
             * @memberof ei.ContractCoopStatusResponse
             * @interface ICoopGift
             * @property {string|null} [userId] CoopGift userId
             * @property {string|null} [userName] CoopGift userName
             * @property {number|null} [amount] CoopGift amount
             */

            /**
             * Constructs a new CoopGift.
             * @memberof ei.ContractCoopStatusResponse
             * @classdesc Represents a CoopGift.
             * @implements ICoopGift
             * @constructor
             * @param {ei.ContractCoopStatusResponse.ICoopGift=} [properties] Properties to set
             */
            function CoopGift(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * CoopGift userId.
             * @member {string} userId
             * @memberof ei.ContractCoopStatusResponse.CoopGift
             * @instance
             */
            CoopGift.prototype.userId = "";

            /**
             * CoopGift userName.
             * @member {string} userName
             * @memberof ei.ContractCoopStatusResponse.CoopGift
             * @instance
             */
            CoopGift.prototype.userName = "";

            /**
             * CoopGift amount.
             * @member {number} amount
             * @memberof ei.ContractCoopStatusResponse.CoopGift
             * @instance
             */
            CoopGift.prototype.amount = 0;

            /**
             * Creates a new CoopGift instance using the specified properties.
             * @function create
             * @memberof ei.ContractCoopStatusResponse.CoopGift
             * @static
             * @param {ei.ContractCoopStatusResponse.ICoopGift=} [properties] Properties to set
             * @returns {ei.ContractCoopStatusResponse.CoopGift} CoopGift instance
             */
            CoopGift.create = function create(properties) {
                return new CoopGift(properties);
            };

            /**
             * Encodes the specified CoopGift message. Does not implicitly {@link ei.ContractCoopStatusResponse.CoopGift.verify|verify} messages.
             * @function encode
             * @memberof ei.ContractCoopStatusResponse.CoopGift
             * @static
             * @param {ei.ContractCoopStatusResponse.ICoopGift} message CoopGift message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CoopGift.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.userId != null && Object.hasOwnProperty.call(message, "userId"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);
                if (message.amount != null && Object.hasOwnProperty.call(message, "amount"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.amount);
                if (message.userName != null && Object.hasOwnProperty.call(message, "userName"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.userName);
                return writer;
            };

            /**
             * Encodes the specified CoopGift message, length delimited. Does not implicitly {@link ei.ContractCoopStatusResponse.CoopGift.verify|verify} messages.
             * @function encodeDelimited
             * @memberof ei.ContractCoopStatusResponse.CoopGift
             * @static
             * @param {ei.ContractCoopStatusResponse.ICoopGift} message CoopGift message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CoopGift.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a CoopGift message from the specified reader or buffer.
             * @function decode
             * @memberof ei.ContractCoopStatusResponse.CoopGift
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {ei.ContractCoopStatusResponse.CoopGift} CoopGift
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CoopGift.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ei.ContractCoopStatusResponse.CoopGift();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.userId = reader.string();
                        break;
                    case 3:
                        message.userName = reader.string();
                        break;
                    case 2:
                        message.amount = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a CoopGift message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof ei.ContractCoopStatusResponse.CoopGift
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {ei.ContractCoopStatusResponse.CoopGift} CoopGift
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CoopGift.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a CoopGift message.
             * @function verify
             * @memberof ei.ContractCoopStatusResponse.CoopGift
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            CoopGift.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.userId != null && message.hasOwnProperty("userId"))
                    if (!$util.isString(message.userId))
                        return "userId: string expected";
                if (message.userName != null && message.hasOwnProperty("userName"))
                    if (!$util.isString(message.userName))
                        return "userName: string expected";
                if (message.amount != null && message.hasOwnProperty("amount"))
                    if (!$util.isInteger(message.amount))
                        return "amount: integer expected";
                return null;
            };

            /**
             * Creates a CoopGift message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof ei.ContractCoopStatusResponse.CoopGift
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {ei.ContractCoopStatusResponse.CoopGift} CoopGift
             */
            CoopGift.fromObject = function fromObject(object) {
                if (object instanceof $root.ei.ContractCoopStatusResponse.CoopGift)
                    return object;
                let message = new $root.ei.ContractCoopStatusResponse.CoopGift();
                if (object.userId != null)
                    message.userId = String(object.userId);
                if (object.userName != null)
                    message.userName = String(object.userName);
                if (object.amount != null)
                    message.amount = object.amount >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a CoopGift message. Also converts values to other types if specified.
             * @function toObject
             * @memberof ei.ContractCoopStatusResponse.CoopGift
             * @static
             * @param {ei.ContractCoopStatusResponse.CoopGift} message CoopGift
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            CoopGift.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.userId = "";
                    object.amount = 0;
                    object.userName = "";
                }
                if (message.userId != null && message.hasOwnProperty("userId"))
                    object.userId = message.userId;
                if (message.amount != null && message.hasOwnProperty("amount"))
                    object.amount = message.amount;
                if (message.userName != null && message.hasOwnProperty("userName"))
                    object.userName = message.userName;
                return object;
            };

            /**
             * Converts this CoopGift to JSON.
             * @function toJSON
             * @memberof ei.ContractCoopStatusResponse.CoopGift
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            CoopGift.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return CoopGift;
        })();

        return ContractCoopStatusResponse;
    })();

    ei.LocalContract = (function() {

        /**
         * Properties of a LocalContract.
         * @memberof ei
         * @interface ILocalContract
         * @property {ei.IContract|null} [contract] LocalContract contract
         * @property {string|null} [coopIdentifier] LocalContract coopIdentifier
         * @property {boolean|null} [accepted] LocalContract accepted
         * @property {number|null} [timeAccepted] LocalContract timeAccepted
         * @property {boolean|null} [cancelled] LocalContract cancelled
         * @property {boolean|null} ["new"] LocalContract new
         * @property {number|null} [coopSharedEndTime] LocalContract coopSharedEndTime
         * @property {number|null} [coopGracePeriodEndTime] LocalContract coopGracePeriodEndTime
         * @property {boolean|null} [coopContributionFinalized] LocalContract coopContributionFinalized
         * @property {number|null} [coopLastUploadedContribution] LocalContract coopLastUploadedContribution
         * @property {string|null} [coopUserId] LocalContract coopUserId
         * @property {number|null} [lastAmountWhenRewardGiven] LocalContract lastAmountWhenRewardGiven
         * @property {number|null} [numGoalsAchieved] LocalContract numGoalsAchieved
         * @property {number|null} [boostsUsed] LocalContract boostsUsed
         * @property {number|null} [league] LocalContract league
         */

        /**
         * Constructs a new LocalContract.
         * @memberof ei
         * @classdesc Represents a LocalContract.
         * @implements ILocalContract
         * @constructor
         * @param {ei.ILocalContract=} [properties] Properties to set
         */
        function LocalContract(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * LocalContract contract.
         * @member {ei.IContract|null|undefined} contract
         * @memberof ei.LocalContract
         * @instance
         */
        LocalContract.prototype.contract = null;

        /**
         * LocalContract coopIdentifier.
         * @member {string} coopIdentifier
         * @memberof ei.LocalContract
         * @instance
         */
        LocalContract.prototype.coopIdentifier = "";

        /**
         * LocalContract accepted.
         * @member {boolean} accepted
         * @memberof ei.LocalContract
         * @instance
         */
        LocalContract.prototype.accepted = false;

        /**
         * LocalContract timeAccepted.
         * @member {number} timeAccepted
         * @memberof ei.LocalContract
         * @instance
         */
        LocalContract.prototype.timeAccepted = 0;

        /**
         * LocalContract cancelled.
         * @member {boolean} cancelled
         * @memberof ei.LocalContract
         * @instance
         */
        LocalContract.prototype.cancelled = false;

        /**
         * LocalContract new.
         * @member {boolean} new
         * @memberof ei.LocalContract
         * @instance
         */
        LocalContract.prototype["new"] = false;

        /**
         * LocalContract coopSharedEndTime.
         * @member {number} coopSharedEndTime
         * @memberof ei.LocalContract
         * @instance
         */
        LocalContract.prototype.coopSharedEndTime = 0;

        /**
         * LocalContract coopGracePeriodEndTime.
         * @member {number} coopGracePeriodEndTime
         * @memberof ei.LocalContract
         * @instance
         */
        LocalContract.prototype.coopGracePeriodEndTime = 0;

        /**
         * LocalContract coopContributionFinalized.
         * @member {boolean} coopContributionFinalized
         * @memberof ei.LocalContract
         * @instance
         */
        LocalContract.prototype.coopContributionFinalized = false;

        /**
         * LocalContract coopLastUploadedContribution.
         * @member {number} coopLastUploadedContribution
         * @memberof ei.LocalContract
         * @instance
         */
        LocalContract.prototype.coopLastUploadedContribution = 0;

        /**
         * LocalContract coopUserId.
         * @member {string} coopUserId
         * @memberof ei.LocalContract
         * @instance
         */
        LocalContract.prototype.coopUserId = "";

        /**
         * LocalContract lastAmountWhenRewardGiven.
         * @member {number} lastAmountWhenRewardGiven
         * @memberof ei.LocalContract
         * @instance
         */
        LocalContract.prototype.lastAmountWhenRewardGiven = 0;

        /**
         * LocalContract numGoalsAchieved.
         * @member {number} numGoalsAchieved
         * @memberof ei.LocalContract
         * @instance
         */
        LocalContract.prototype.numGoalsAchieved = 0;

        /**
         * LocalContract boostsUsed.
         * @member {number} boostsUsed
         * @memberof ei.LocalContract
         * @instance
         */
        LocalContract.prototype.boostsUsed = 0;

        /**
         * LocalContract league.
         * @member {number} league
         * @memberof ei.LocalContract
         * @instance
         */
        LocalContract.prototype.league = 0;

        /**
         * Creates a new LocalContract instance using the specified properties.
         * @function create
         * @memberof ei.LocalContract
         * @static
         * @param {ei.ILocalContract=} [properties] Properties to set
         * @returns {ei.LocalContract} LocalContract instance
         */
        LocalContract.create = function create(properties) {
            return new LocalContract(properties);
        };

        /**
         * Encodes the specified LocalContract message. Does not implicitly {@link ei.LocalContract.verify|verify} messages.
         * @function encode
         * @memberof ei.LocalContract
         * @static
         * @param {ei.ILocalContract} message LocalContract message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        LocalContract.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.contract != null && Object.hasOwnProperty.call(message, "contract"))
                $root.ei.Contract.encode(message.contract, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.coopIdentifier != null && Object.hasOwnProperty.call(message, "coopIdentifier"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.coopIdentifier);
            if (message.timeAccepted != null && Object.hasOwnProperty.call(message, "timeAccepted"))
                writer.uint32(/* id 3, wireType 1 =*/25).double(message.timeAccepted);
            if (message.cancelled != null && Object.hasOwnProperty.call(message, "cancelled"))
                writer.uint32(/* id 4, wireType 0 =*/32).bool(message.cancelled);
            if (message.coopSharedEndTime != null && Object.hasOwnProperty.call(message, "coopSharedEndTime"))
                writer.uint32(/* id 5, wireType 1 =*/41).double(message.coopSharedEndTime);
            if (message.lastAmountWhenRewardGiven != null && Object.hasOwnProperty.call(message, "lastAmountWhenRewardGiven"))
                writer.uint32(/* id 6, wireType 1 =*/49).double(message.lastAmountWhenRewardGiven);
            if (message.accepted != null && Object.hasOwnProperty.call(message, "accepted"))
                writer.uint32(/* id 7, wireType 0 =*/56).bool(message.accepted);
            if (message["new"] != null && Object.hasOwnProperty.call(message, "new"))
                writer.uint32(/* id 8, wireType 0 =*/64).bool(message["new"]);
            if (message.coopGracePeriodEndTime != null && Object.hasOwnProperty.call(message, "coopGracePeriodEndTime"))
                writer.uint32(/* id 9, wireType 1 =*/73).double(message.coopGracePeriodEndTime);
            if (message.coopContributionFinalized != null && Object.hasOwnProperty.call(message, "coopContributionFinalized"))
                writer.uint32(/* id 10, wireType 0 =*/80).bool(message.coopContributionFinalized);
            if (message.coopLastUploadedContribution != null && Object.hasOwnProperty.call(message, "coopLastUploadedContribution"))
                writer.uint32(/* id 11, wireType 1 =*/89).double(message.coopLastUploadedContribution);
            if (message.boostsUsed != null && Object.hasOwnProperty.call(message, "boostsUsed"))
                writer.uint32(/* id 12, wireType 0 =*/96).uint32(message.boostsUsed);
            if (message.coopUserId != null && Object.hasOwnProperty.call(message, "coopUserId"))
                writer.uint32(/* id 13, wireType 2 =*/106).string(message.coopUserId);
            if (message.numGoalsAchieved != null && Object.hasOwnProperty.call(message, "numGoalsAchieved"))
                writer.uint32(/* id 14, wireType 0 =*/112).uint32(message.numGoalsAchieved);
            if (message.league != null && Object.hasOwnProperty.call(message, "league"))
                writer.uint32(/* id 15, wireType 0 =*/120).uint32(message.league);
            return writer;
        };

        /**
         * Encodes the specified LocalContract message, length delimited. Does not implicitly {@link ei.LocalContract.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ei.LocalContract
         * @static
         * @param {ei.ILocalContract} message LocalContract message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        LocalContract.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a LocalContract message from the specified reader or buffer.
         * @function decode
         * @memberof ei.LocalContract
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ei.LocalContract} LocalContract
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        LocalContract.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ei.LocalContract();
            while (reader.pos < end) {
                let tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.contract = $root.ei.Contract.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.coopIdentifier = reader.string();
                    break;
                case 7:
                    message.accepted = reader.bool();
                    break;
                case 3:
                    message.timeAccepted = reader.double();
                    break;
                case 4:
                    message.cancelled = reader.bool();
                    break;
                case 8:
                    message["new"] = reader.bool();
                    break;
                case 5:
                    message.coopSharedEndTime = reader.double();
                    break;
                case 9:
                    message.coopGracePeriodEndTime = reader.double();
                    break;
                case 10:
                    message.coopContributionFinalized = reader.bool();
                    break;
                case 11:
                    message.coopLastUploadedContribution = reader.double();
                    break;
                case 13:
                    message.coopUserId = reader.string();
                    break;
                case 6:
                    message.lastAmountWhenRewardGiven = reader.double();
                    break;
                case 14:
                    message.numGoalsAchieved = reader.uint32();
                    break;
                case 12:
                    message.boostsUsed = reader.uint32();
                    break;
                case 15:
                    message.league = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a LocalContract message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ei.LocalContract
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ei.LocalContract} LocalContract
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        LocalContract.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a LocalContract message.
         * @function verify
         * @memberof ei.LocalContract
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        LocalContract.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.contract != null && message.hasOwnProperty("contract")) {
                let error = $root.ei.Contract.verify(message.contract);
                if (error)
                    return "contract." + error;
            }
            if (message.coopIdentifier != null && message.hasOwnProperty("coopIdentifier"))
                if (!$util.isString(message.coopIdentifier))
                    return "coopIdentifier: string expected";
            if (message.accepted != null && message.hasOwnProperty("accepted"))
                if (typeof message.accepted !== "boolean")
                    return "accepted: boolean expected";
            if (message.timeAccepted != null && message.hasOwnProperty("timeAccepted"))
                if (typeof message.timeAccepted !== "number")
                    return "timeAccepted: number expected";
            if (message.cancelled != null && message.hasOwnProperty("cancelled"))
                if (typeof message.cancelled !== "boolean")
                    return "cancelled: boolean expected";
            if (message["new"] != null && message.hasOwnProperty("new"))
                if (typeof message["new"] !== "boolean")
                    return "new: boolean expected";
            if (message.coopSharedEndTime != null && message.hasOwnProperty("coopSharedEndTime"))
                if (typeof message.coopSharedEndTime !== "number")
                    return "coopSharedEndTime: number expected";
            if (message.coopGracePeriodEndTime != null && message.hasOwnProperty("coopGracePeriodEndTime"))
                if (typeof message.coopGracePeriodEndTime !== "number")
                    return "coopGracePeriodEndTime: number expected";
            if (message.coopContributionFinalized != null && message.hasOwnProperty("coopContributionFinalized"))
                if (typeof message.coopContributionFinalized !== "boolean")
                    return "coopContributionFinalized: boolean expected";
            if (message.coopLastUploadedContribution != null && message.hasOwnProperty("coopLastUploadedContribution"))
                if (typeof message.coopLastUploadedContribution !== "number")
                    return "coopLastUploadedContribution: number expected";
            if (message.coopUserId != null && message.hasOwnProperty("coopUserId"))
                if (!$util.isString(message.coopUserId))
                    return "coopUserId: string expected";
            if (message.lastAmountWhenRewardGiven != null && message.hasOwnProperty("lastAmountWhenRewardGiven"))
                if (typeof message.lastAmountWhenRewardGiven !== "number")
                    return "lastAmountWhenRewardGiven: number expected";
            if (message.numGoalsAchieved != null && message.hasOwnProperty("numGoalsAchieved"))
                if (!$util.isInteger(message.numGoalsAchieved))
                    return "numGoalsAchieved: integer expected";
            if (message.boostsUsed != null && message.hasOwnProperty("boostsUsed"))
                if (!$util.isInteger(message.boostsUsed))
                    return "boostsUsed: integer expected";
            if (message.league != null && message.hasOwnProperty("league"))
                if (!$util.isInteger(message.league))
                    return "league: integer expected";
            return null;
        };

        /**
         * Creates a LocalContract message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ei.LocalContract
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ei.LocalContract} LocalContract
         */
        LocalContract.fromObject = function fromObject(object) {
            if (object instanceof $root.ei.LocalContract)
                return object;
            let message = new $root.ei.LocalContract();
            if (object.contract != null) {
                if (typeof object.contract !== "object")
                    throw TypeError(".ei.LocalContract.contract: object expected");
                message.contract = $root.ei.Contract.fromObject(object.contract);
            }
            if (object.coopIdentifier != null)
                message.coopIdentifier = String(object.coopIdentifier);
            if (object.accepted != null)
                message.accepted = Boolean(object.accepted);
            if (object.timeAccepted != null)
                message.timeAccepted = Number(object.timeAccepted);
            if (object.cancelled != null)
                message.cancelled = Boolean(object.cancelled);
            if (object["new"] != null)
                message["new"] = Boolean(object["new"]);
            if (object.coopSharedEndTime != null)
                message.coopSharedEndTime = Number(object.coopSharedEndTime);
            if (object.coopGracePeriodEndTime != null)
                message.coopGracePeriodEndTime = Number(object.coopGracePeriodEndTime);
            if (object.coopContributionFinalized != null)
                message.coopContributionFinalized = Boolean(object.coopContributionFinalized);
            if (object.coopLastUploadedContribution != null)
                message.coopLastUploadedContribution = Number(object.coopLastUploadedContribution);
            if (object.coopUserId != null)
                message.coopUserId = String(object.coopUserId);
            if (object.lastAmountWhenRewardGiven != null)
                message.lastAmountWhenRewardGiven = Number(object.lastAmountWhenRewardGiven);
            if (object.numGoalsAchieved != null)
                message.numGoalsAchieved = object.numGoalsAchieved >>> 0;
            if (object.boostsUsed != null)
                message.boostsUsed = object.boostsUsed >>> 0;
            if (object.league != null)
                message.league = object.league >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a LocalContract message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ei.LocalContract
         * @static
         * @param {ei.LocalContract} message LocalContract
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        LocalContract.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.defaults) {
                object.contract = null;
                object.coopIdentifier = "";
                object.timeAccepted = 0;
                object.cancelled = false;
                object.coopSharedEndTime = 0;
                object.lastAmountWhenRewardGiven = 0;
                object.accepted = false;
                object["new"] = false;
                object.coopGracePeriodEndTime = 0;
                object.coopContributionFinalized = false;
                object.coopLastUploadedContribution = 0;
                object.boostsUsed = 0;
                object.coopUserId = "";
                object.numGoalsAchieved = 0;
                object.league = 0;
            }
            if (message.contract != null && message.hasOwnProperty("contract"))
                object.contract = $root.ei.Contract.toObject(message.contract, options);
            if (message.coopIdentifier != null && message.hasOwnProperty("coopIdentifier"))
                object.coopIdentifier = message.coopIdentifier;
            if (message.timeAccepted != null && message.hasOwnProperty("timeAccepted"))
                object.timeAccepted = options.json && !isFinite(message.timeAccepted) ? String(message.timeAccepted) : message.timeAccepted;
            if (message.cancelled != null && message.hasOwnProperty("cancelled"))
                object.cancelled = message.cancelled;
            if (message.coopSharedEndTime != null && message.hasOwnProperty("coopSharedEndTime"))
                object.coopSharedEndTime = options.json && !isFinite(message.coopSharedEndTime) ? String(message.coopSharedEndTime) : message.coopSharedEndTime;
            if (message.lastAmountWhenRewardGiven != null && message.hasOwnProperty("lastAmountWhenRewardGiven"))
                object.lastAmountWhenRewardGiven = options.json && !isFinite(message.lastAmountWhenRewardGiven) ? String(message.lastAmountWhenRewardGiven) : message.lastAmountWhenRewardGiven;
            if (message.accepted != null && message.hasOwnProperty("accepted"))
                object.accepted = message.accepted;
            if (message["new"] != null && message.hasOwnProperty("new"))
                object["new"] = message["new"];
            if (message.coopGracePeriodEndTime != null && message.hasOwnProperty("coopGracePeriodEndTime"))
                object.coopGracePeriodEndTime = options.json && !isFinite(message.coopGracePeriodEndTime) ? String(message.coopGracePeriodEndTime) : message.coopGracePeriodEndTime;
            if (message.coopContributionFinalized != null && message.hasOwnProperty("coopContributionFinalized"))
                object.coopContributionFinalized = message.coopContributionFinalized;
            if (message.coopLastUploadedContribution != null && message.hasOwnProperty("coopLastUploadedContribution"))
                object.coopLastUploadedContribution = options.json && !isFinite(message.coopLastUploadedContribution) ? String(message.coopLastUploadedContribution) : message.coopLastUploadedContribution;
            if (message.boostsUsed != null && message.hasOwnProperty("boostsUsed"))
                object.boostsUsed = message.boostsUsed;
            if (message.coopUserId != null && message.hasOwnProperty("coopUserId"))
                object.coopUserId = message.coopUserId;
            if (message.numGoalsAchieved != null && message.hasOwnProperty("numGoalsAchieved"))
                object.numGoalsAchieved = message.numGoalsAchieved;
            if (message.league != null && message.hasOwnProperty("league"))
                object.league = message.league;
            return object;
        };

        /**
         * Converts this LocalContract to JSON.
         * @function toJSON
         * @memberof ei.LocalContract
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        LocalContract.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return LocalContract;
    })();

    ei.MyContracts = (function() {

        /**
         * Properties of a MyContracts.
         * @memberof ei
         * @interface IMyContracts
         * @property {Array.<string>|null} [contractIdsSeen] MyContracts contractIdsSeen
         * @property {Array.<ei.ILocalContract>|null} [contracts] MyContracts contracts
         * @property {Array.<ei.ILocalContract>|null} [archive] MyContracts archive
         * @property {Array.<ei.IContractCoopStatusResponse>|null} [currentCoopStatuses] MyContracts currentCoopStatuses
         */

        /**
         * Constructs a new MyContracts.
         * @memberof ei
         * @classdesc Represents a MyContracts.
         * @implements IMyContracts
         * @constructor
         * @param {ei.IMyContracts=} [properties] Properties to set
         */
        function MyContracts(properties) {
            this.contractIdsSeen = [];
            this.contracts = [];
            this.archive = [];
            this.currentCoopStatuses = [];
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * MyContracts contractIdsSeen.
         * @member {Array.<string>} contractIdsSeen
         * @memberof ei.MyContracts
         * @instance
         */
        MyContracts.prototype.contractIdsSeen = $util.emptyArray;

        /**
         * MyContracts contracts.
         * @member {Array.<ei.ILocalContract>} contracts
         * @memberof ei.MyContracts
         * @instance
         */
        MyContracts.prototype.contracts = $util.emptyArray;

        /**
         * MyContracts archive.
         * @member {Array.<ei.ILocalContract>} archive
         * @memberof ei.MyContracts
         * @instance
         */
        MyContracts.prototype.archive = $util.emptyArray;

        /**
         * MyContracts currentCoopStatuses.
         * @member {Array.<ei.IContractCoopStatusResponse>} currentCoopStatuses
         * @memberof ei.MyContracts
         * @instance
         */
        MyContracts.prototype.currentCoopStatuses = $util.emptyArray;

        /**
         * Creates a new MyContracts instance using the specified properties.
         * @function create
         * @memberof ei.MyContracts
         * @static
         * @param {ei.IMyContracts=} [properties] Properties to set
         * @returns {ei.MyContracts} MyContracts instance
         */
        MyContracts.create = function create(properties) {
            return new MyContracts(properties);
        };

        /**
         * Encodes the specified MyContracts message. Does not implicitly {@link ei.MyContracts.verify|verify} messages.
         * @function encode
         * @memberof ei.MyContracts
         * @static
         * @param {ei.IMyContracts} message MyContracts message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MyContracts.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.contracts != null && message.contracts.length)
                for (let i = 0; i < message.contracts.length; ++i)
                    $root.ei.LocalContract.encode(message.contracts[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.archive != null && message.archive.length)
                for (let i = 0; i < message.archive.length; ++i)
                    $root.ei.LocalContract.encode(message.archive[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.contractIdsSeen != null && message.contractIdsSeen.length)
                for (let i = 0; i < message.contractIdsSeen.length; ++i)
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.contractIdsSeen[i]);
            if (message.currentCoopStatuses != null && message.currentCoopStatuses.length)
                for (let i = 0; i < message.currentCoopStatuses.length; ++i)
                    $root.ei.ContractCoopStatusResponse.encode(message.currentCoopStatuses[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified MyContracts message, length delimited. Does not implicitly {@link ei.MyContracts.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ei.MyContracts
         * @static
         * @param {ei.IMyContracts} message MyContracts message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MyContracts.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a MyContracts message from the specified reader or buffer.
         * @function decode
         * @memberof ei.MyContracts
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ei.MyContracts} MyContracts
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MyContracts.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ei.MyContracts();
            while (reader.pos < end) {
                let tag = reader.uint32();
                switch (tag >>> 3) {
                case 3:
                    if (!(message.contractIdsSeen && message.contractIdsSeen.length))
                        message.contractIdsSeen = [];
                    message.contractIdsSeen.push(reader.string());
                    break;
                case 1:
                    if (!(message.contracts && message.contracts.length))
                        message.contracts = [];
                    message.contracts.push($root.ei.LocalContract.decode(reader, reader.uint32()));
                    break;
                case 2:
                    if (!(message.archive && message.archive.length))
                        message.archive = [];
                    message.archive.push($root.ei.LocalContract.decode(reader, reader.uint32()));
                    break;
                case 4:
                    if (!(message.currentCoopStatuses && message.currentCoopStatuses.length))
                        message.currentCoopStatuses = [];
                    message.currentCoopStatuses.push($root.ei.ContractCoopStatusResponse.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a MyContracts message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ei.MyContracts
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ei.MyContracts} MyContracts
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MyContracts.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a MyContracts message.
         * @function verify
         * @memberof ei.MyContracts
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        MyContracts.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.contractIdsSeen != null && message.hasOwnProperty("contractIdsSeen")) {
                if (!Array.isArray(message.contractIdsSeen))
                    return "contractIdsSeen: array expected";
                for (let i = 0; i < message.contractIdsSeen.length; ++i)
                    if (!$util.isString(message.contractIdsSeen[i]))
                        return "contractIdsSeen: string[] expected";
            }
            if (message.contracts != null && message.hasOwnProperty("contracts")) {
                if (!Array.isArray(message.contracts))
                    return "contracts: array expected";
                for (let i = 0; i < message.contracts.length; ++i) {
                    let error = $root.ei.LocalContract.verify(message.contracts[i]);
                    if (error)
                        return "contracts." + error;
                }
            }
            if (message.archive != null && message.hasOwnProperty("archive")) {
                if (!Array.isArray(message.archive))
                    return "archive: array expected";
                for (let i = 0; i < message.archive.length; ++i) {
                    let error = $root.ei.LocalContract.verify(message.archive[i]);
                    if (error)
                        return "archive." + error;
                }
            }
            if (message.currentCoopStatuses != null && message.hasOwnProperty("currentCoopStatuses")) {
                if (!Array.isArray(message.currentCoopStatuses))
                    return "currentCoopStatuses: array expected";
                for (let i = 0; i < message.currentCoopStatuses.length; ++i) {
                    let error = $root.ei.ContractCoopStatusResponse.verify(message.currentCoopStatuses[i]);
                    if (error)
                        return "currentCoopStatuses." + error;
                }
            }
            return null;
        };

        /**
         * Creates a MyContracts message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ei.MyContracts
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ei.MyContracts} MyContracts
         */
        MyContracts.fromObject = function fromObject(object) {
            if (object instanceof $root.ei.MyContracts)
                return object;
            let message = new $root.ei.MyContracts();
            if (object.contractIdsSeen) {
                if (!Array.isArray(object.contractIdsSeen))
                    throw TypeError(".ei.MyContracts.contractIdsSeen: array expected");
                message.contractIdsSeen = [];
                for (let i = 0; i < object.contractIdsSeen.length; ++i)
                    message.contractIdsSeen[i] = String(object.contractIdsSeen[i]);
            }
            if (object.contracts) {
                if (!Array.isArray(object.contracts))
                    throw TypeError(".ei.MyContracts.contracts: array expected");
                message.contracts = [];
                for (let i = 0; i < object.contracts.length; ++i) {
                    if (typeof object.contracts[i] !== "object")
                        throw TypeError(".ei.MyContracts.contracts: object expected");
                    message.contracts[i] = $root.ei.LocalContract.fromObject(object.contracts[i]);
                }
            }
            if (object.archive) {
                if (!Array.isArray(object.archive))
                    throw TypeError(".ei.MyContracts.archive: array expected");
                message.archive = [];
                for (let i = 0; i < object.archive.length; ++i) {
                    if (typeof object.archive[i] !== "object")
                        throw TypeError(".ei.MyContracts.archive: object expected");
                    message.archive[i] = $root.ei.LocalContract.fromObject(object.archive[i]);
                }
            }
            if (object.currentCoopStatuses) {
                if (!Array.isArray(object.currentCoopStatuses))
                    throw TypeError(".ei.MyContracts.currentCoopStatuses: array expected");
                message.currentCoopStatuses = [];
                for (let i = 0; i < object.currentCoopStatuses.length; ++i) {
                    if (typeof object.currentCoopStatuses[i] !== "object")
                        throw TypeError(".ei.MyContracts.currentCoopStatuses: object expected");
                    message.currentCoopStatuses[i] = $root.ei.ContractCoopStatusResponse.fromObject(object.currentCoopStatuses[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a MyContracts message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ei.MyContracts
         * @static
         * @param {ei.MyContracts} message MyContracts
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        MyContracts.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.arrays || options.defaults) {
                object.contracts = [];
                object.archive = [];
                object.contractIdsSeen = [];
                object.currentCoopStatuses = [];
            }
            if (message.contracts && message.contracts.length) {
                object.contracts = [];
                for (let j = 0; j < message.contracts.length; ++j)
                    object.contracts[j] = $root.ei.LocalContract.toObject(message.contracts[j], options);
            }
            if (message.archive && message.archive.length) {
                object.archive = [];
                for (let j = 0; j < message.archive.length; ++j)
                    object.archive[j] = $root.ei.LocalContract.toObject(message.archive[j], options);
            }
            if (message.contractIdsSeen && message.contractIdsSeen.length) {
                object.contractIdsSeen = [];
                for (let j = 0; j < message.contractIdsSeen.length; ++j)
                    object.contractIdsSeen[j] = message.contractIdsSeen[j];
            }
            if (message.currentCoopStatuses && message.currentCoopStatuses.length) {
                object.currentCoopStatuses = [];
                for (let j = 0; j < message.currentCoopStatuses.length; ++j)
                    object.currentCoopStatuses[j] = $root.ei.ContractCoopStatusResponse.toObject(message.currentCoopStatuses[j], options);
            }
            return object;
        };

        /**
         * Converts this MyContracts to JSON.
         * @function toJSON
         * @memberof ei.MyContracts
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        MyContracts.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return MyContracts;
    })();

    ei.QueryCoopRequest = (function() {

        /**
         * Properties of a QueryCoopRequest.
         * @memberof ei
         * @interface IQueryCoopRequest
         * @property {ei.IBasicRequestInfo|null} [rinfo] QueryCoopRequest rinfo
         * @property {string|null} [contractIdentifier] QueryCoopRequest contractIdentifier
         * @property {string|null} [coopIdentifier] QueryCoopRequest coopIdentifier
         * @property {number|null} [league] QueryCoopRequest league
         * @property {number|null} [clientVersion] QueryCoopRequest clientVersion
         */

        /**
         * Constructs a new QueryCoopRequest.
         * @memberof ei
         * @classdesc Represents a QueryCoopRequest.
         * @implements IQueryCoopRequest
         * @constructor
         * @param {ei.IQueryCoopRequest=} [properties] Properties to set
         */
        function QueryCoopRequest(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * QueryCoopRequest rinfo.
         * @member {ei.IBasicRequestInfo|null|undefined} rinfo
         * @memberof ei.QueryCoopRequest
         * @instance
         */
        QueryCoopRequest.prototype.rinfo = null;

        /**
         * QueryCoopRequest contractIdentifier.
         * @member {string} contractIdentifier
         * @memberof ei.QueryCoopRequest
         * @instance
         */
        QueryCoopRequest.prototype.contractIdentifier = "";

        /**
         * QueryCoopRequest coopIdentifier.
         * @member {string} coopIdentifier
         * @memberof ei.QueryCoopRequest
         * @instance
         */
        QueryCoopRequest.prototype.coopIdentifier = "";

        /**
         * QueryCoopRequest league.
         * @member {number} league
         * @memberof ei.QueryCoopRequest
         * @instance
         */
        QueryCoopRequest.prototype.league = 0;

        /**
         * QueryCoopRequest clientVersion.
         * @member {number} clientVersion
         * @memberof ei.QueryCoopRequest
         * @instance
         */
        QueryCoopRequest.prototype.clientVersion = 0;

        /**
         * Creates a new QueryCoopRequest instance using the specified properties.
         * @function create
         * @memberof ei.QueryCoopRequest
         * @static
         * @param {ei.IQueryCoopRequest=} [properties] Properties to set
         * @returns {ei.QueryCoopRequest} QueryCoopRequest instance
         */
        QueryCoopRequest.create = function create(properties) {
            return new QueryCoopRequest(properties);
        };

        /**
         * Encodes the specified QueryCoopRequest message. Does not implicitly {@link ei.QueryCoopRequest.verify|verify} messages.
         * @function encode
         * @memberof ei.QueryCoopRequest
         * @static
         * @param {ei.IQueryCoopRequest} message QueryCoopRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        QueryCoopRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.contractIdentifier != null && Object.hasOwnProperty.call(message, "contractIdentifier"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.contractIdentifier);
            if (message.coopIdentifier != null && Object.hasOwnProperty.call(message, "coopIdentifier"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.coopIdentifier);
            if (message.clientVersion != null && Object.hasOwnProperty.call(message, "clientVersion"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.clientVersion);
            if (message.league != null && Object.hasOwnProperty.call(message, "league"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.league);
            if (message.rinfo != null && Object.hasOwnProperty.call(message, "rinfo"))
                $root.ei.BasicRequestInfo.encode(message.rinfo, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified QueryCoopRequest message, length delimited. Does not implicitly {@link ei.QueryCoopRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ei.QueryCoopRequest
         * @static
         * @param {ei.IQueryCoopRequest} message QueryCoopRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        QueryCoopRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a QueryCoopRequest message from the specified reader or buffer.
         * @function decode
         * @memberof ei.QueryCoopRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ei.QueryCoopRequest} QueryCoopRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        QueryCoopRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ei.QueryCoopRequest();
            while (reader.pos < end) {
                let tag = reader.uint32();
                switch (tag >>> 3) {
                case 5:
                    message.rinfo = $root.ei.BasicRequestInfo.decode(reader, reader.uint32());
                    break;
                case 1:
                    message.contractIdentifier = reader.string();
                    break;
                case 2:
                    message.coopIdentifier = reader.string();
                    break;
                case 4:
                    message.league = reader.uint32();
                    break;
                case 3:
                    message.clientVersion = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a QueryCoopRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ei.QueryCoopRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ei.QueryCoopRequest} QueryCoopRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        QueryCoopRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a QueryCoopRequest message.
         * @function verify
         * @memberof ei.QueryCoopRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        QueryCoopRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.rinfo != null && message.hasOwnProperty("rinfo")) {
                let error = $root.ei.BasicRequestInfo.verify(message.rinfo);
                if (error)
                    return "rinfo." + error;
            }
            if (message.contractIdentifier != null && message.hasOwnProperty("contractIdentifier"))
                if (!$util.isString(message.contractIdentifier))
                    return "contractIdentifier: string expected";
            if (message.coopIdentifier != null && message.hasOwnProperty("coopIdentifier"))
                if (!$util.isString(message.coopIdentifier))
                    return "coopIdentifier: string expected";
            if (message.league != null && message.hasOwnProperty("league"))
                if (!$util.isInteger(message.league))
                    return "league: integer expected";
            if (message.clientVersion != null && message.hasOwnProperty("clientVersion"))
                if (!$util.isInteger(message.clientVersion))
                    return "clientVersion: integer expected";
            return null;
        };

        /**
         * Creates a QueryCoopRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ei.QueryCoopRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ei.QueryCoopRequest} QueryCoopRequest
         */
        QueryCoopRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.ei.QueryCoopRequest)
                return object;
            let message = new $root.ei.QueryCoopRequest();
            if (object.rinfo != null) {
                if (typeof object.rinfo !== "object")
                    throw TypeError(".ei.QueryCoopRequest.rinfo: object expected");
                message.rinfo = $root.ei.BasicRequestInfo.fromObject(object.rinfo);
            }
            if (object.contractIdentifier != null)
                message.contractIdentifier = String(object.contractIdentifier);
            if (object.coopIdentifier != null)
                message.coopIdentifier = String(object.coopIdentifier);
            if (object.league != null)
                message.league = object.league >>> 0;
            if (object.clientVersion != null)
                message.clientVersion = object.clientVersion >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a QueryCoopRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ei.QueryCoopRequest
         * @static
         * @param {ei.QueryCoopRequest} message QueryCoopRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        QueryCoopRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.defaults) {
                object.contractIdentifier = "";
                object.coopIdentifier = "";
                object.clientVersion = 0;
                object.league = 0;
                object.rinfo = null;
            }
            if (message.contractIdentifier != null && message.hasOwnProperty("contractIdentifier"))
                object.contractIdentifier = message.contractIdentifier;
            if (message.coopIdentifier != null && message.hasOwnProperty("coopIdentifier"))
                object.coopIdentifier = message.coopIdentifier;
            if (message.clientVersion != null && message.hasOwnProperty("clientVersion"))
                object.clientVersion = message.clientVersion;
            if (message.league != null && message.hasOwnProperty("league"))
                object.league = message.league;
            if (message.rinfo != null && message.hasOwnProperty("rinfo"))
                object.rinfo = $root.ei.BasicRequestInfo.toObject(message.rinfo, options);
            return object;
        };

        /**
         * Converts this QueryCoopRequest to JSON.
         * @function toJSON
         * @memberof ei.QueryCoopRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        QueryCoopRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return QueryCoopRequest;
    })();

    ei.QueryCoopResponse = (function() {

        /**
         * Properties of a QueryCoopResponse.
         * @memberof ei
         * @interface IQueryCoopResponse
         * @property {boolean|null} [exists] QueryCoopResponse exists
         * @property {boolean|null} [full] QueryCoopResponse full
         * @property {boolean|null} [differentLeague] QueryCoopResponse differentLeague
         * @property {boolean|null} [banned] QueryCoopResponse banned
         */

        /**
         * Constructs a new QueryCoopResponse.
         * @memberof ei
         * @classdesc Represents a QueryCoopResponse.
         * @implements IQueryCoopResponse
         * @constructor
         * @param {ei.IQueryCoopResponse=} [properties] Properties to set
         */
        function QueryCoopResponse(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * QueryCoopResponse exists.
         * @member {boolean} exists
         * @memberof ei.QueryCoopResponse
         * @instance
         */
        QueryCoopResponse.prototype.exists = false;

        /**
         * QueryCoopResponse full.
         * @member {boolean} full
         * @memberof ei.QueryCoopResponse
         * @instance
         */
        QueryCoopResponse.prototype.full = false;

        /**
         * QueryCoopResponse differentLeague.
         * @member {boolean} differentLeague
         * @memberof ei.QueryCoopResponse
         * @instance
         */
        QueryCoopResponse.prototype.differentLeague = false;

        /**
         * QueryCoopResponse banned.
         * @member {boolean} banned
         * @memberof ei.QueryCoopResponse
         * @instance
         */
        QueryCoopResponse.prototype.banned = false;

        /**
         * Creates a new QueryCoopResponse instance using the specified properties.
         * @function create
         * @memberof ei.QueryCoopResponse
         * @static
         * @param {ei.IQueryCoopResponse=} [properties] Properties to set
         * @returns {ei.QueryCoopResponse} QueryCoopResponse instance
         */
        QueryCoopResponse.create = function create(properties) {
            return new QueryCoopResponse(properties);
        };

        /**
         * Encodes the specified QueryCoopResponse message. Does not implicitly {@link ei.QueryCoopResponse.verify|verify} messages.
         * @function encode
         * @memberof ei.QueryCoopResponse
         * @static
         * @param {ei.IQueryCoopResponse} message QueryCoopResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        QueryCoopResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.exists != null && Object.hasOwnProperty.call(message, "exists"))
                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.exists);
            if (message.full != null && Object.hasOwnProperty.call(message, "full"))
                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.full);
            if (message.banned != null && Object.hasOwnProperty.call(message, "banned"))
                writer.uint32(/* id 3, wireType 0 =*/24).bool(message.banned);
            if (message.differentLeague != null && Object.hasOwnProperty.call(message, "differentLeague"))
                writer.uint32(/* id 4, wireType 0 =*/32).bool(message.differentLeague);
            return writer;
        };

        /**
         * Encodes the specified QueryCoopResponse message, length delimited. Does not implicitly {@link ei.QueryCoopResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ei.QueryCoopResponse
         * @static
         * @param {ei.IQueryCoopResponse} message QueryCoopResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        QueryCoopResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a QueryCoopResponse message from the specified reader or buffer.
         * @function decode
         * @memberof ei.QueryCoopResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ei.QueryCoopResponse} QueryCoopResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        QueryCoopResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ei.QueryCoopResponse();
            while (reader.pos < end) {
                let tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.exists = reader.bool();
                    break;
                case 2:
                    message.full = reader.bool();
                    break;
                case 4:
                    message.differentLeague = reader.bool();
                    break;
                case 3:
                    message.banned = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a QueryCoopResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ei.QueryCoopResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ei.QueryCoopResponse} QueryCoopResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        QueryCoopResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a QueryCoopResponse message.
         * @function verify
         * @memberof ei.QueryCoopResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        QueryCoopResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.exists != null && message.hasOwnProperty("exists"))
                if (typeof message.exists !== "boolean")
                    return "exists: boolean expected";
            if (message.full != null && message.hasOwnProperty("full"))
                if (typeof message.full !== "boolean")
                    return "full: boolean expected";
            if (message.differentLeague != null && message.hasOwnProperty("differentLeague"))
                if (typeof message.differentLeague !== "boolean")
                    return "differentLeague: boolean expected";
            if (message.banned != null && message.hasOwnProperty("banned"))
                if (typeof message.banned !== "boolean")
                    return "banned: boolean expected";
            return null;
        };

        /**
         * Creates a QueryCoopResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ei.QueryCoopResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ei.QueryCoopResponse} QueryCoopResponse
         */
        QueryCoopResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.ei.QueryCoopResponse)
                return object;
            let message = new $root.ei.QueryCoopResponse();
            if (object.exists != null)
                message.exists = Boolean(object.exists);
            if (object.full != null)
                message.full = Boolean(object.full);
            if (object.differentLeague != null)
                message.differentLeague = Boolean(object.differentLeague);
            if (object.banned != null)
                message.banned = Boolean(object.banned);
            return message;
        };

        /**
         * Creates a plain object from a QueryCoopResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ei.QueryCoopResponse
         * @static
         * @param {ei.QueryCoopResponse} message QueryCoopResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        QueryCoopResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.defaults) {
                object.exists = false;
                object.full = false;
                object.banned = false;
                object.differentLeague = false;
            }
            if (message.exists != null && message.hasOwnProperty("exists"))
                object.exists = message.exists;
            if (message.full != null && message.hasOwnProperty("full"))
                object.full = message.full;
            if (message.banned != null && message.hasOwnProperty("banned"))
                object.banned = message.banned;
            if (message.differentLeague != null && message.hasOwnProperty("differentLeague"))
                object.differentLeague = message.differentLeague;
            return object;
        };

        /**
         * Converts this QueryCoopResponse to JSON.
         * @function toJSON
         * @memberof ei.QueryCoopResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        QueryCoopResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return QueryCoopResponse;
    })();

    ei.CreateCoopRequest = (function() {

        /**
         * Properties of a CreateCoopRequest.
         * @memberof ei
         * @interface ICreateCoopRequest
         * @property {ei.IBasicRequestInfo|null} [rinfo] CreateCoopRequest rinfo
         * @property {string|null} [contractIdentifier] CreateCoopRequest contractIdentifier
         * @property {string|null} [coopIdentifier] CreateCoopRequest coopIdentifier
         * @property {number|null} [secondsRemaining] CreateCoopRequest secondsRemaining
         * @property {string|null} [userId] CreateCoopRequest userId
         * @property {string|null} [userName] CreateCoopRequest userName
         * @property {number|null} [soulPower] CreateCoopRequest soulPower
         * @property {number|null} [league] CreateCoopRequest league
         * @property {aux.Platform|null} [platform] CreateCoopRequest platform
         * @property {number|null} [clientVersion] CreateCoopRequest clientVersion
         */

        /**
         * Constructs a new CreateCoopRequest.
         * @memberof ei
         * @classdesc Represents a CreateCoopRequest.
         * @implements ICreateCoopRequest
         * @constructor
         * @param {ei.ICreateCoopRequest=} [properties] Properties to set
         */
        function CreateCoopRequest(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CreateCoopRequest rinfo.
         * @member {ei.IBasicRequestInfo|null|undefined} rinfo
         * @memberof ei.CreateCoopRequest
         * @instance
         */
        CreateCoopRequest.prototype.rinfo = null;

        /**
         * CreateCoopRequest contractIdentifier.
         * @member {string} contractIdentifier
         * @memberof ei.CreateCoopRequest
         * @instance
         */
        CreateCoopRequest.prototype.contractIdentifier = "";

        /**
         * CreateCoopRequest coopIdentifier.
         * @member {string} coopIdentifier
         * @memberof ei.CreateCoopRequest
         * @instance
         */
        CreateCoopRequest.prototype.coopIdentifier = "";

        /**
         * CreateCoopRequest secondsRemaining.
         * @member {number} secondsRemaining
         * @memberof ei.CreateCoopRequest
         * @instance
         */
        CreateCoopRequest.prototype.secondsRemaining = 0;

        /**
         * CreateCoopRequest userId.
         * @member {string} userId
         * @memberof ei.CreateCoopRequest
         * @instance
         */
        CreateCoopRequest.prototype.userId = "";

        /**
         * CreateCoopRequest userName.
         * @member {string} userName
         * @memberof ei.CreateCoopRequest
         * @instance
         */
        CreateCoopRequest.prototype.userName = "";

        /**
         * CreateCoopRequest soulPower.
         * @member {number} soulPower
         * @memberof ei.CreateCoopRequest
         * @instance
         */
        CreateCoopRequest.prototype.soulPower = 0;

        /**
         * CreateCoopRequest league.
         * @member {number} league
         * @memberof ei.CreateCoopRequest
         * @instance
         */
        CreateCoopRequest.prototype.league = 0;

        /**
         * CreateCoopRequest platform.
         * @member {aux.Platform} platform
         * @memberof ei.CreateCoopRequest
         * @instance
         */
        CreateCoopRequest.prototype.platform = 1;

        /**
         * CreateCoopRequest clientVersion.
         * @member {number} clientVersion
         * @memberof ei.CreateCoopRequest
         * @instance
         */
        CreateCoopRequest.prototype.clientVersion = 0;

        /**
         * Creates a new CreateCoopRequest instance using the specified properties.
         * @function create
         * @memberof ei.CreateCoopRequest
         * @static
         * @param {ei.ICreateCoopRequest=} [properties] Properties to set
         * @returns {ei.CreateCoopRequest} CreateCoopRequest instance
         */
        CreateCoopRequest.create = function create(properties) {
            return new CreateCoopRequest(properties);
        };

        /**
         * Encodes the specified CreateCoopRequest message. Does not implicitly {@link ei.CreateCoopRequest.verify|verify} messages.
         * @function encode
         * @memberof ei.CreateCoopRequest
         * @static
         * @param {ei.ICreateCoopRequest} message CreateCoopRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CreateCoopRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.contractIdentifier != null && Object.hasOwnProperty.call(message, "contractIdentifier"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.contractIdentifier);
            if (message.coopIdentifier != null && Object.hasOwnProperty.call(message, "coopIdentifier"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.coopIdentifier);
            if (message.secondsRemaining != null && Object.hasOwnProperty.call(message, "secondsRemaining"))
                writer.uint32(/* id 3, wireType 1 =*/25).double(message.secondsRemaining);
            if (message.userId != null && Object.hasOwnProperty.call(message, "userId"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.userId);
            if (message.userName != null && Object.hasOwnProperty.call(message, "userName"))
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.userName);
            if (message.platform != null && Object.hasOwnProperty.call(message, "platform"))
                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.platform);
            if (message.clientVersion != null && Object.hasOwnProperty.call(message, "clientVersion"))
                writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.clientVersion);
            if (message.soulPower != null && Object.hasOwnProperty.call(message, "soulPower"))
                writer.uint32(/* id 8, wireType 1 =*/65).double(message.soulPower);
            if (message.league != null && Object.hasOwnProperty.call(message, "league"))
                writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.league);
            if (message.rinfo != null && Object.hasOwnProperty.call(message, "rinfo"))
                $root.ei.BasicRequestInfo.encode(message.rinfo, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified CreateCoopRequest message, length delimited. Does not implicitly {@link ei.CreateCoopRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ei.CreateCoopRequest
         * @static
         * @param {ei.ICreateCoopRequest} message CreateCoopRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CreateCoopRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CreateCoopRequest message from the specified reader or buffer.
         * @function decode
         * @memberof ei.CreateCoopRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ei.CreateCoopRequest} CreateCoopRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CreateCoopRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ei.CreateCoopRequest();
            while (reader.pos < end) {
                let tag = reader.uint32();
                switch (tag >>> 3) {
                case 10:
                    message.rinfo = $root.ei.BasicRequestInfo.decode(reader, reader.uint32());
                    break;
                case 1:
                    message.contractIdentifier = reader.string();
                    break;
                case 2:
                    message.coopIdentifier = reader.string();
                    break;
                case 3:
                    message.secondsRemaining = reader.double();
                    break;
                case 4:
                    message.userId = reader.string();
                    break;
                case 5:
                    message.userName = reader.string();
                    break;
                case 8:
                    message.soulPower = reader.double();
                    break;
                case 9:
                    message.league = reader.uint32();
                    break;
                case 6:
                    message.platform = reader.int32();
                    break;
                case 7:
                    message.clientVersion = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a CreateCoopRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ei.CreateCoopRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ei.CreateCoopRequest} CreateCoopRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CreateCoopRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CreateCoopRequest message.
         * @function verify
         * @memberof ei.CreateCoopRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CreateCoopRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.rinfo != null && message.hasOwnProperty("rinfo")) {
                let error = $root.ei.BasicRequestInfo.verify(message.rinfo);
                if (error)
                    return "rinfo." + error;
            }
            if (message.contractIdentifier != null && message.hasOwnProperty("contractIdentifier"))
                if (!$util.isString(message.contractIdentifier))
                    return "contractIdentifier: string expected";
            if (message.coopIdentifier != null && message.hasOwnProperty("coopIdentifier"))
                if (!$util.isString(message.coopIdentifier))
                    return "coopIdentifier: string expected";
            if (message.secondsRemaining != null && message.hasOwnProperty("secondsRemaining"))
                if (typeof message.secondsRemaining !== "number")
                    return "secondsRemaining: number expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isString(message.userId))
                    return "userId: string expected";
            if (message.userName != null && message.hasOwnProperty("userName"))
                if (!$util.isString(message.userName))
                    return "userName: string expected";
            if (message.soulPower != null && message.hasOwnProperty("soulPower"))
                if (typeof message.soulPower !== "number")
                    return "soulPower: number expected";
            if (message.league != null && message.hasOwnProperty("league"))
                if (!$util.isInteger(message.league))
                    return "league: integer expected";
            if (message.platform != null && message.hasOwnProperty("platform"))
                switch (message.platform) {
                default:
                    return "platform: enum value expected";
                case 1:
                case 2:
                    break;
                }
            if (message.clientVersion != null && message.hasOwnProperty("clientVersion"))
                if (!$util.isInteger(message.clientVersion))
                    return "clientVersion: integer expected";
            return null;
        };

        /**
         * Creates a CreateCoopRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ei.CreateCoopRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ei.CreateCoopRequest} CreateCoopRequest
         */
        CreateCoopRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.ei.CreateCoopRequest)
                return object;
            let message = new $root.ei.CreateCoopRequest();
            if (object.rinfo != null) {
                if (typeof object.rinfo !== "object")
                    throw TypeError(".ei.CreateCoopRequest.rinfo: object expected");
                message.rinfo = $root.ei.BasicRequestInfo.fromObject(object.rinfo);
            }
            if (object.contractIdentifier != null)
                message.contractIdentifier = String(object.contractIdentifier);
            if (object.coopIdentifier != null)
                message.coopIdentifier = String(object.coopIdentifier);
            if (object.secondsRemaining != null)
                message.secondsRemaining = Number(object.secondsRemaining);
            if (object.userId != null)
                message.userId = String(object.userId);
            if (object.userName != null)
                message.userName = String(object.userName);
            if (object.soulPower != null)
                message.soulPower = Number(object.soulPower);
            if (object.league != null)
                message.league = object.league >>> 0;
            switch (object.platform) {
            case "IOS":
            case 1:
                message.platform = 1;
                break;
            case "DROID":
            case 2:
                message.platform = 2;
                break;
            }
            if (object.clientVersion != null)
                message.clientVersion = object.clientVersion >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a CreateCoopRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ei.CreateCoopRequest
         * @static
         * @param {ei.CreateCoopRequest} message CreateCoopRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CreateCoopRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.defaults) {
                object.contractIdentifier = "";
                object.coopIdentifier = "";
                object.secondsRemaining = 0;
                object.userId = "";
                object.userName = "";
                object.platform = options.enums === String ? "IOS" : 1;
                object.clientVersion = 0;
                object.soulPower = 0;
                object.league = 0;
                object.rinfo = null;
            }
            if (message.contractIdentifier != null && message.hasOwnProperty("contractIdentifier"))
                object.contractIdentifier = message.contractIdentifier;
            if (message.coopIdentifier != null && message.hasOwnProperty("coopIdentifier"))
                object.coopIdentifier = message.coopIdentifier;
            if (message.secondsRemaining != null && message.hasOwnProperty("secondsRemaining"))
                object.secondsRemaining = options.json && !isFinite(message.secondsRemaining) ? String(message.secondsRemaining) : message.secondsRemaining;
            if (message.userId != null && message.hasOwnProperty("userId"))
                object.userId = message.userId;
            if (message.userName != null && message.hasOwnProperty("userName"))
                object.userName = message.userName;
            if (message.platform != null && message.hasOwnProperty("platform"))
                object.platform = options.enums === String ? $root.aux.Platform[message.platform] : message.platform;
            if (message.clientVersion != null && message.hasOwnProperty("clientVersion"))
                object.clientVersion = message.clientVersion;
            if (message.soulPower != null && message.hasOwnProperty("soulPower"))
                object.soulPower = options.json && !isFinite(message.soulPower) ? String(message.soulPower) : message.soulPower;
            if (message.league != null && message.hasOwnProperty("league"))
                object.league = message.league;
            if (message.rinfo != null && message.hasOwnProperty("rinfo"))
                object.rinfo = $root.ei.BasicRequestInfo.toObject(message.rinfo, options);
            return object;
        };

        /**
         * Converts this CreateCoopRequest to JSON.
         * @function toJSON
         * @memberof ei.CreateCoopRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CreateCoopRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CreateCoopRequest;
    })();

    ei.CreateCoopResponse = (function() {

        /**
         * Properties of a CreateCoopResponse.
         * @memberof ei
         * @interface ICreateCoopResponse
         * @property {boolean|null} [success] CreateCoopResponse success
         * @property {string|null} [message] CreateCoopResponse message
         */

        /**
         * Constructs a new CreateCoopResponse.
         * @memberof ei
         * @classdesc Represents a CreateCoopResponse.
         * @implements ICreateCoopResponse
         * @constructor
         * @param {ei.ICreateCoopResponse=} [properties] Properties to set
         */
        function CreateCoopResponse(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CreateCoopResponse success.
         * @member {boolean} success
         * @memberof ei.CreateCoopResponse
         * @instance
         */
        CreateCoopResponse.prototype.success = false;

        /**
         * CreateCoopResponse message.
         * @member {string} message
         * @memberof ei.CreateCoopResponse
         * @instance
         */
        CreateCoopResponse.prototype.message = "";

        /**
         * Creates a new CreateCoopResponse instance using the specified properties.
         * @function create
         * @memberof ei.CreateCoopResponse
         * @static
         * @param {ei.ICreateCoopResponse=} [properties] Properties to set
         * @returns {ei.CreateCoopResponse} CreateCoopResponse instance
         */
        CreateCoopResponse.create = function create(properties) {
            return new CreateCoopResponse(properties);
        };

        /**
         * Encodes the specified CreateCoopResponse message. Does not implicitly {@link ei.CreateCoopResponse.verify|verify} messages.
         * @function encode
         * @memberof ei.CreateCoopResponse
         * @static
         * @param {ei.ICreateCoopResponse} message CreateCoopResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CreateCoopResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.success != null && Object.hasOwnProperty.call(message, "success"))
                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.success);
            if (message.message != null && Object.hasOwnProperty.call(message, "message"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.message);
            return writer;
        };

        /**
         * Encodes the specified CreateCoopResponse message, length delimited. Does not implicitly {@link ei.CreateCoopResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ei.CreateCoopResponse
         * @static
         * @param {ei.ICreateCoopResponse} message CreateCoopResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CreateCoopResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CreateCoopResponse message from the specified reader or buffer.
         * @function decode
         * @memberof ei.CreateCoopResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ei.CreateCoopResponse} CreateCoopResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CreateCoopResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ei.CreateCoopResponse();
            while (reader.pos < end) {
                let tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.success = reader.bool();
                    break;
                case 2:
                    message.message = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a CreateCoopResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ei.CreateCoopResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ei.CreateCoopResponse} CreateCoopResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CreateCoopResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CreateCoopResponse message.
         * @function verify
         * @memberof ei.CreateCoopResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CreateCoopResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.success != null && message.hasOwnProperty("success"))
                if (typeof message.success !== "boolean")
                    return "success: boolean expected";
            if (message.message != null && message.hasOwnProperty("message"))
                if (!$util.isString(message.message))
                    return "message: string expected";
            return null;
        };

        /**
         * Creates a CreateCoopResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ei.CreateCoopResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ei.CreateCoopResponse} CreateCoopResponse
         */
        CreateCoopResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.ei.CreateCoopResponse)
                return object;
            let message = new $root.ei.CreateCoopResponse();
            if (object.success != null)
                message.success = Boolean(object.success);
            if (object.message != null)
                message.message = String(object.message);
            return message;
        };

        /**
         * Creates a plain object from a CreateCoopResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ei.CreateCoopResponse
         * @static
         * @param {ei.CreateCoopResponse} message CreateCoopResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CreateCoopResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.defaults) {
                object.success = false;
                object.message = "";
            }
            if (message.success != null && message.hasOwnProperty("success"))
                object.success = message.success;
            if (message.message != null && message.hasOwnProperty("message"))
                object.message = message.message;
            return object;
        };

        /**
         * Converts this CreateCoopResponse to JSON.
         * @function toJSON
         * @memberof ei.CreateCoopResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CreateCoopResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CreateCoopResponse;
    })();

    ei.JoinCoopRequest = (function() {

        /**
         * Properties of a JoinCoopRequest.
         * @memberof ei
         * @interface IJoinCoopRequest
         * @property {ei.IBasicRequestInfo|null} [rinfo] JoinCoopRequest rinfo
         * @property {string|null} [contractIdentifier] JoinCoopRequest contractIdentifier
         * @property {string|null} [coopIdentifier] JoinCoopRequest coopIdentifier
         * @property {string|null} [userId] JoinCoopRequest userId
         * @property {string|null} [userName] JoinCoopRequest userName
         * @property {number|null} [soulPower] JoinCoopRequest soulPower
         * @property {number|null} [league] JoinCoopRequest league
         * @property {aux.Platform|null} [platform] JoinCoopRequest platform
         * @property {number|null} [secondsRemaining] JoinCoopRequest secondsRemaining
         * @property {number|null} [clientVersion] JoinCoopRequest clientVersion
         */

        /**
         * Constructs a new JoinCoopRequest.
         * @memberof ei
         * @classdesc Represents a JoinCoopRequest.
         * @implements IJoinCoopRequest
         * @constructor
         * @param {ei.IJoinCoopRequest=} [properties] Properties to set
         */
        function JoinCoopRequest(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * JoinCoopRequest rinfo.
         * @member {ei.IBasicRequestInfo|null|undefined} rinfo
         * @memberof ei.JoinCoopRequest
         * @instance
         */
        JoinCoopRequest.prototype.rinfo = null;

        /**
         * JoinCoopRequest contractIdentifier.
         * @member {string} contractIdentifier
         * @memberof ei.JoinCoopRequest
         * @instance
         */
        JoinCoopRequest.prototype.contractIdentifier = "";

        /**
         * JoinCoopRequest coopIdentifier.
         * @member {string} coopIdentifier
         * @memberof ei.JoinCoopRequest
         * @instance
         */
        JoinCoopRequest.prototype.coopIdentifier = "";

        /**
         * JoinCoopRequest userId.
         * @member {string} userId
         * @memberof ei.JoinCoopRequest
         * @instance
         */
        JoinCoopRequest.prototype.userId = "";

        /**
         * JoinCoopRequest userName.
         * @member {string} userName
         * @memberof ei.JoinCoopRequest
         * @instance
         */
        JoinCoopRequest.prototype.userName = "";

        /**
         * JoinCoopRequest soulPower.
         * @member {number} soulPower
         * @memberof ei.JoinCoopRequest
         * @instance
         */
        JoinCoopRequest.prototype.soulPower = 0;

        /**
         * JoinCoopRequest league.
         * @member {number} league
         * @memberof ei.JoinCoopRequest
         * @instance
         */
        JoinCoopRequest.prototype.league = 0;

        /**
         * JoinCoopRequest platform.
         * @member {aux.Platform} platform
         * @memberof ei.JoinCoopRequest
         * @instance
         */
        JoinCoopRequest.prototype.platform = 1;

        /**
         * JoinCoopRequest secondsRemaining.
         * @member {number} secondsRemaining
         * @memberof ei.JoinCoopRequest
         * @instance
         */
        JoinCoopRequest.prototype.secondsRemaining = 0;

        /**
         * JoinCoopRequest clientVersion.
         * @member {number} clientVersion
         * @memberof ei.JoinCoopRequest
         * @instance
         */
        JoinCoopRequest.prototype.clientVersion = 0;

        /**
         * Creates a new JoinCoopRequest instance using the specified properties.
         * @function create
         * @memberof ei.JoinCoopRequest
         * @static
         * @param {ei.IJoinCoopRequest=} [properties] Properties to set
         * @returns {ei.JoinCoopRequest} JoinCoopRequest instance
         */
        JoinCoopRequest.create = function create(properties) {
            return new JoinCoopRequest(properties);
        };

        /**
         * Encodes the specified JoinCoopRequest message. Does not implicitly {@link ei.JoinCoopRequest.verify|verify} messages.
         * @function encode
         * @memberof ei.JoinCoopRequest
         * @static
         * @param {ei.IJoinCoopRequest} message JoinCoopRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        JoinCoopRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.contractIdentifier != null && Object.hasOwnProperty.call(message, "contractIdentifier"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.contractIdentifier);
            if (message.coopIdentifier != null && Object.hasOwnProperty.call(message, "coopIdentifier"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.coopIdentifier);
            if (message.userId != null && Object.hasOwnProperty.call(message, "userId"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.userId);
            if (message.userName != null && Object.hasOwnProperty.call(message, "userName"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.userName);
            if (message.platform != null && Object.hasOwnProperty.call(message, "platform"))
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.platform);
            if (message.clientVersion != null && Object.hasOwnProperty.call(message, "clientVersion"))
                writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.clientVersion);
            if (message.soulPower != null && Object.hasOwnProperty.call(message, "soulPower"))
                writer.uint32(/* id 8, wireType 1 =*/65).double(message.soulPower);
            if (message.league != null && Object.hasOwnProperty.call(message, "league"))
                writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.league);
            if (message.rinfo != null && Object.hasOwnProperty.call(message, "rinfo"))
                $root.ei.BasicRequestInfo.encode(message.rinfo, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
            if (message.secondsRemaining != null && Object.hasOwnProperty.call(message, "secondsRemaining"))
                writer.uint32(/* id 11, wireType 1 =*/89).double(message.secondsRemaining);
            return writer;
        };

        /**
         * Encodes the specified JoinCoopRequest message, length delimited. Does not implicitly {@link ei.JoinCoopRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ei.JoinCoopRequest
         * @static
         * @param {ei.IJoinCoopRequest} message JoinCoopRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        JoinCoopRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a JoinCoopRequest message from the specified reader or buffer.
         * @function decode
         * @memberof ei.JoinCoopRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ei.JoinCoopRequest} JoinCoopRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        JoinCoopRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ei.JoinCoopRequest();
            while (reader.pos < end) {
                let tag = reader.uint32();
                switch (tag >>> 3) {
                case 10:
                    message.rinfo = $root.ei.BasicRequestInfo.decode(reader, reader.uint32());
                    break;
                case 1:
                    message.contractIdentifier = reader.string();
                    break;
                case 2:
                    message.coopIdentifier = reader.string();
                    break;
                case 3:
                    message.userId = reader.string();
                    break;
                case 4:
                    message.userName = reader.string();
                    break;
                case 8:
                    message.soulPower = reader.double();
                    break;
                case 9:
                    message.league = reader.uint32();
                    break;
                case 5:
                    message.platform = reader.int32();
                    break;
                case 11:
                    message.secondsRemaining = reader.double();
                    break;
                case 7:
                    message.clientVersion = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a JoinCoopRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ei.JoinCoopRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ei.JoinCoopRequest} JoinCoopRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        JoinCoopRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a JoinCoopRequest message.
         * @function verify
         * @memberof ei.JoinCoopRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        JoinCoopRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.rinfo != null && message.hasOwnProperty("rinfo")) {
                let error = $root.ei.BasicRequestInfo.verify(message.rinfo);
                if (error)
                    return "rinfo." + error;
            }
            if (message.contractIdentifier != null && message.hasOwnProperty("contractIdentifier"))
                if (!$util.isString(message.contractIdentifier))
                    return "contractIdentifier: string expected";
            if (message.coopIdentifier != null && message.hasOwnProperty("coopIdentifier"))
                if (!$util.isString(message.coopIdentifier))
                    return "coopIdentifier: string expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isString(message.userId))
                    return "userId: string expected";
            if (message.userName != null && message.hasOwnProperty("userName"))
                if (!$util.isString(message.userName))
                    return "userName: string expected";
            if (message.soulPower != null && message.hasOwnProperty("soulPower"))
                if (typeof message.soulPower !== "number")
                    return "soulPower: number expected";
            if (message.league != null && message.hasOwnProperty("league"))
                if (!$util.isInteger(message.league))
                    return "league: integer expected";
            if (message.platform != null && message.hasOwnProperty("platform"))
                switch (message.platform) {
                default:
                    return "platform: enum value expected";
                case 1:
                case 2:
                    break;
                }
            if (message.secondsRemaining != null && message.hasOwnProperty("secondsRemaining"))
                if (typeof message.secondsRemaining !== "number")
                    return "secondsRemaining: number expected";
            if (message.clientVersion != null && message.hasOwnProperty("clientVersion"))
                if (!$util.isInteger(message.clientVersion))
                    return "clientVersion: integer expected";
            return null;
        };

        /**
         * Creates a JoinCoopRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ei.JoinCoopRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ei.JoinCoopRequest} JoinCoopRequest
         */
        JoinCoopRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.ei.JoinCoopRequest)
                return object;
            let message = new $root.ei.JoinCoopRequest();
            if (object.rinfo != null) {
                if (typeof object.rinfo !== "object")
                    throw TypeError(".ei.JoinCoopRequest.rinfo: object expected");
                message.rinfo = $root.ei.BasicRequestInfo.fromObject(object.rinfo);
            }
            if (object.contractIdentifier != null)
                message.contractIdentifier = String(object.contractIdentifier);
            if (object.coopIdentifier != null)
                message.coopIdentifier = String(object.coopIdentifier);
            if (object.userId != null)
                message.userId = String(object.userId);
            if (object.userName != null)
                message.userName = String(object.userName);
            if (object.soulPower != null)
                message.soulPower = Number(object.soulPower);
            if (object.league != null)
                message.league = object.league >>> 0;
            switch (object.platform) {
            case "IOS":
            case 1:
                message.platform = 1;
                break;
            case "DROID":
            case 2:
                message.platform = 2;
                break;
            }
            if (object.secondsRemaining != null)
                message.secondsRemaining = Number(object.secondsRemaining);
            if (object.clientVersion != null)
                message.clientVersion = object.clientVersion >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a JoinCoopRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ei.JoinCoopRequest
         * @static
         * @param {ei.JoinCoopRequest} message JoinCoopRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        JoinCoopRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.defaults) {
                object.contractIdentifier = "";
                object.coopIdentifier = "";
                object.userId = "";
                object.userName = "";
                object.platform = options.enums === String ? "IOS" : 1;
                object.clientVersion = 0;
                object.soulPower = 0;
                object.league = 0;
                object.rinfo = null;
                object.secondsRemaining = 0;
            }
            if (message.contractIdentifier != null && message.hasOwnProperty("contractIdentifier"))
                object.contractIdentifier = message.contractIdentifier;
            if (message.coopIdentifier != null && message.hasOwnProperty("coopIdentifier"))
                object.coopIdentifier = message.coopIdentifier;
            if (message.userId != null && message.hasOwnProperty("userId"))
                object.userId = message.userId;
            if (message.userName != null && message.hasOwnProperty("userName"))
                object.userName = message.userName;
            if (message.platform != null && message.hasOwnProperty("platform"))
                object.platform = options.enums === String ? $root.aux.Platform[message.platform] : message.platform;
            if (message.clientVersion != null && message.hasOwnProperty("clientVersion"))
                object.clientVersion = message.clientVersion;
            if (message.soulPower != null && message.hasOwnProperty("soulPower"))
                object.soulPower = options.json && !isFinite(message.soulPower) ? String(message.soulPower) : message.soulPower;
            if (message.league != null && message.hasOwnProperty("league"))
                object.league = message.league;
            if (message.rinfo != null && message.hasOwnProperty("rinfo"))
                object.rinfo = $root.ei.BasicRequestInfo.toObject(message.rinfo, options);
            if (message.secondsRemaining != null && message.hasOwnProperty("secondsRemaining"))
                object.secondsRemaining = options.json && !isFinite(message.secondsRemaining) ? String(message.secondsRemaining) : message.secondsRemaining;
            return object;
        };

        /**
         * Converts this JoinCoopRequest to JSON.
         * @function toJSON
         * @memberof ei.JoinCoopRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        JoinCoopRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return JoinCoopRequest;
    })();

    ei.JoinCoopResponse = (function() {

        /**
         * Properties of a JoinCoopResponse.
         * @memberof ei
         * @interface IJoinCoopResponse
         * @property {boolean|null} [success] JoinCoopResponse success
         * @property {string|null} [message] JoinCoopResponse message
         * @property {boolean|null} [banned] JoinCoopResponse banned
         * @property {string|null} [coopIdentifier] JoinCoopResponse coopIdentifier
         * @property {number|null} [secondsRemaining] JoinCoopResponse secondsRemaining
         */

        /**
         * Constructs a new JoinCoopResponse.
         * @memberof ei
         * @classdesc Represents a JoinCoopResponse.
         * @implements IJoinCoopResponse
         * @constructor
         * @param {ei.IJoinCoopResponse=} [properties] Properties to set
         */
        function JoinCoopResponse(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * JoinCoopResponse success.
         * @member {boolean} success
         * @memberof ei.JoinCoopResponse
         * @instance
         */
        JoinCoopResponse.prototype.success = false;

        /**
         * JoinCoopResponse message.
         * @member {string} message
         * @memberof ei.JoinCoopResponse
         * @instance
         */
        JoinCoopResponse.prototype.message = "";

        /**
         * JoinCoopResponse banned.
         * @member {boolean} banned
         * @memberof ei.JoinCoopResponse
         * @instance
         */
        JoinCoopResponse.prototype.banned = false;

        /**
         * JoinCoopResponse coopIdentifier.
         * @member {string} coopIdentifier
         * @memberof ei.JoinCoopResponse
         * @instance
         */
        JoinCoopResponse.prototype.coopIdentifier = "";

        /**
         * JoinCoopResponse secondsRemaining.
         * @member {number} secondsRemaining
         * @memberof ei.JoinCoopResponse
         * @instance
         */
        JoinCoopResponse.prototype.secondsRemaining = 0;

        /**
         * Creates a new JoinCoopResponse instance using the specified properties.
         * @function create
         * @memberof ei.JoinCoopResponse
         * @static
         * @param {ei.IJoinCoopResponse=} [properties] Properties to set
         * @returns {ei.JoinCoopResponse} JoinCoopResponse instance
         */
        JoinCoopResponse.create = function create(properties) {
            return new JoinCoopResponse(properties);
        };

        /**
         * Encodes the specified JoinCoopResponse message. Does not implicitly {@link ei.JoinCoopResponse.verify|verify} messages.
         * @function encode
         * @memberof ei.JoinCoopResponse
         * @static
         * @param {ei.IJoinCoopResponse} message JoinCoopResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        JoinCoopResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.success != null && Object.hasOwnProperty.call(message, "success"))
                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.success);
            if (message.message != null && Object.hasOwnProperty.call(message, "message"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.message);
            if (message.secondsRemaining != null && Object.hasOwnProperty.call(message, "secondsRemaining"))
                writer.uint32(/* id 3, wireType 1 =*/25).double(message.secondsRemaining);
            if (message.banned != null && Object.hasOwnProperty.call(message, "banned"))
                writer.uint32(/* id 4, wireType 0 =*/32).bool(message.banned);
            if (message.coopIdentifier != null && Object.hasOwnProperty.call(message, "coopIdentifier"))
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.coopIdentifier);
            return writer;
        };

        /**
         * Encodes the specified JoinCoopResponse message, length delimited. Does not implicitly {@link ei.JoinCoopResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ei.JoinCoopResponse
         * @static
         * @param {ei.IJoinCoopResponse} message JoinCoopResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        JoinCoopResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a JoinCoopResponse message from the specified reader or buffer.
         * @function decode
         * @memberof ei.JoinCoopResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ei.JoinCoopResponse} JoinCoopResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        JoinCoopResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ei.JoinCoopResponse();
            while (reader.pos < end) {
                let tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.success = reader.bool();
                    break;
                case 2:
                    message.message = reader.string();
                    break;
                case 4:
                    message.banned = reader.bool();
                    break;
                case 5:
                    message.coopIdentifier = reader.string();
                    break;
                case 3:
                    message.secondsRemaining = reader.double();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a JoinCoopResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ei.JoinCoopResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ei.JoinCoopResponse} JoinCoopResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        JoinCoopResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a JoinCoopResponse message.
         * @function verify
         * @memberof ei.JoinCoopResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        JoinCoopResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.success != null && message.hasOwnProperty("success"))
                if (typeof message.success !== "boolean")
                    return "success: boolean expected";
            if (message.message != null && message.hasOwnProperty("message"))
                if (!$util.isString(message.message))
                    return "message: string expected";
            if (message.banned != null && message.hasOwnProperty("banned"))
                if (typeof message.banned !== "boolean")
                    return "banned: boolean expected";
            if (message.coopIdentifier != null && message.hasOwnProperty("coopIdentifier"))
                if (!$util.isString(message.coopIdentifier))
                    return "coopIdentifier: string expected";
            if (message.secondsRemaining != null && message.hasOwnProperty("secondsRemaining"))
                if (typeof message.secondsRemaining !== "number")
                    return "secondsRemaining: number expected";
            return null;
        };

        /**
         * Creates a JoinCoopResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ei.JoinCoopResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ei.JoinCoopResponse} JoinCoopResponse
         */
        JoinCoopResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.ei.JoinCoopResponse)
                return object;
            let message = new $root.ei.JoinCoopResponse();
            if (object.success != null)
                message.success = Boolean(object.success);
            if (object.message != null)
                message.message = String(object.message);
            if (object.banned != null)
                message.banned = Boolean(object.banned);
            if (object.coopIdentifier != null)
                message.coopIdentifier = String(object.coopIdentifier);
            if (object.secondsRemaining != null)
                message.secondsRemaining = Number(object.secondsRemaining);
            return message;
        };

        /**
         * Creates a plain object from a JoinCoopResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ei.JoinCoopResponse
         * @static
         * @param {ei.JoinCoopResponse} message JoinCoopResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        JoinCoopResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.defaults) {
                object.success = false;
                object.message = "";
                object.secondsRemaining = 0;
                object.banned = false;
                object.coopIdentifier = "";
            }
            if (message.success != null && message.hasOwnProperty("success"))
                object.success = message.success;
            if (message.message != null && message.hasOwnProperty("message"))
                object.message = message.message;
            if (message.secondsRemaining != null && message.hasOwnProperty("secondsRemaining"))
                object.secondsRemaining = options.json && !isFinite(message.secondsRemaining) ? String(message.secondsRemaining) : message.secondsRemaining;
            if (message.banned != null && message.hasOwnProperty("banned"))
                object.banned = message.banned;
            if (message.coopIdentifier != null && message.hasOwnProperty("coopIdentifier"))
                object.coopIdentifier = message.coopIdentifier;
            return object;
        };

        /**
         * Converts this JoinCoopResponse to JSON.
         * @function toJSON
         * @memberof ei.JoinCoopResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        JoinCoopResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return JoinCoopResponse;
    })();

    ei.AutoJoinCoopRequest = (function() {

        /**
         * Properties of an AutoJoinCoopRequest.
         * @memberof ei
         * @interface IAutoJoinCoopRequest
         * @property {ei.IBasicRequestInfo|null} [rinfo] AutoJoinCoopRequest rinfo
         * @property {string|null} [contractIdentifier] AutoJoinCoopRequest contractIdentifier
         * @property {string|null} [userId] AutoJoinCoopRequest userId
         * @property {string|null} [userName] AutoJoinCoopRequest userName
         * @property {number|null} [soulPower] AutoJoinCoopRequest soulPower
         * @property {number|null} [league] AutoJoinCoopRequest league
         * @property {number|null} [secondsRemaining] AutoJoinCoopRequest secondsRemaining
         * @property {aux.Platform|null} [platform] AutoJoinCoopRequest platform
         * @property {number|null} [clientVersion] AutoJoinCoopRequest clientVersion
         */

        /**
         * Constructs a new AutoJoinCoopRequest.
         * @memberof ei
         * @classdesc Represents an AutoJoinCoopRequest.
         * @implements IAutoJoinCoopRequest
         * @constructor
         * @param {ei.IAutoJoinCoopRequest=} [properties] Properties to set
         */
        function AutoJoinCoopRequest(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * AutoJoinCoopRequest rinfo.
         * @member {ei.IBasicRequestInfo|null|undefined} rinfo
         * @memberof ei.AutoJoinCoopRequest
         * @instance
         */
        AutoJoinCoopRequest.prototype.rinfo = null;

        /**
         * AutoJoinCoopRequest contractIdentifier.
         * @member {string} contractIdentifier
         * @memberof ei.AutoJoinCoopRequest
         * @instance
         */
        AutoJoinCoopRequest.prototype.contractIdentifier = "";

        /**
         * AutoJoinCoopRequest userId.
         * @member {string} userId
         * @memberof ei.AutoJoinCoopRequest
         * @instance
         */
        AutoJoinCoopRequest.prototype.userId = "";

        /**
         * AutoJoinCoopRequest userName.
         * @member {string} userName
         * @memberof ei.AutoJoinCoopRequest
         * @instance
         */
        AutoJoinCoopRequest.prototype.userName = "";

        /**
         * AutoJoinCoopRequest soulPower.
         * @member {number} soulPower
         * @memberof ei.AutoJoinCoopRequest
         * @instance
         */
        AutoJoinCoopRequest.prototype.soulPower = 0;

        /**
         * AutoJoinCoopRequest league.
         * @member {number} league
         * @memberof ei.AutoJoinCoopRequest
         * @instance
         */
        AutoJoinCoopRequest.prototype.league = 0;

        /**
         * AutoJoinCoopRequest secondsRemaining.
         * @member {number} secondsRemaining
         * @memberof ei.AutoJoinCoopRequest
         * @instance
         */
        AutoJoinCoopRequest.prototype.secondsRemaining = 0;

        /**
         * AutoJoinCoopRequest platform.
         * @member {aux.Platform} platform
         * @memberof ei.AutoJoinCoopRequest
         * @instance
         */
        AutoJoinCoopRequest.prototype.platform = 1;

        /**
         * AutoJoinCoopRequest clientVersion.
         * @member {number} clientVersion
         * @memberof ei.AutoJoinCoopRequest
         * @instance
         */
        AutoJoinCoopRequest.prototype.clientVersion = 0;

        /**
         * Creates a new AutoJoinCoopRequest instance using the specified properties.
         * @function create
         * @memberof ei.AutoJoinCoopRequest
         * @static
         * @param {ei.IAutoJoinCoopRequest=} [properties] Properties to set
         * @returns {ei.AutoJoinCoopRequest} AutoJoinCoopRequest instance
         */
        AutoJoinCoopRequest.create = function create(properties) {
            return new AutoJoinCoopRequest(properties);
        };

        /**
         * Encodes the specified AutoJoinCoopRequest message. Does not implicitly {@link ei.AutoJoinCoopRequest.verify|verify} messages.
         * @function encode
         * @memberof ei.AutoJoinCoopRequest
         * @static
         * @param {ei.IAutoJoinCoopRequest} message AutoJoinCoopRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        AutoJoinCoopRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.contractIdentifier != null && Object.hasOwnProperty.call(message, "contractIdentifier"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.contractIdentifier);
            if (message.userId != null && Object.hasOwnProperty.call(message, "userId"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.userId);
            if (message.userName != null && Object.hasOwnProperty.call(message, "userName"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.userName);
            if (message.soulPower != null && Object.hasOwnProperty.call(message, "soulPower"))
                writer.uint32(/* id 4, wireType 1 =*/33).double(message.soulPower);
            if (message.secondsRemaining != null && Object.hasOwnProperty.call(message, "secondsRemaining"))
                writer.uint32(/* id 5, wireType 1 =*/41).double(message.secondsRemaining);
            if (message.platform != null && Object.hasOwnProperty.call(message, "platform"))
                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.platform);
            if (message.clientVersion != null && Object.hasOwnProperty.call(message, "clientVersion"))
                writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.clientVersion);
            if (message.league != null && Object.hasOwnProperty.call(message, "league"))
                writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.league);
            if (message.rinfo != null && Object.hasOwnProperty.call(message, "rinfo"))
                $root.ei.BasicRequestInfo.encode(message.rinfo, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified AutoJoinCoopRequest message, length delimited. Does not implicitly {@link ei.AutoJoinCoopRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ei.AutoJoinCoopRequest
         * @static
         * @param {ei.IAutoJoinCoopRequest} message AutoJoinCoopRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        AutoJoinCoopRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an AutoJoinCoopRequest message from the specified reader or buffer.
         * @function decode
         * @memberof ei.AutoJoinCoopRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ei.AutoJoinCoopRequest} AutoJoinCoopRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        AutoJoinCoopRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ei.AutoJoinCoopRequest();
            while (reader.pos < end) {
                let tag = reader.uint32();
                switch (tag >>> 3) {
                case 9:
                    message.rinfo = $root.ei.BasicRequestInfo.decode(reader, reader.uint32());
                    break;
                case 1:
                    message.contractIdentifier = reader.string();
                    break;
                case 2:
                    message.userId = reader.string();
                    break;
                case 3:
                    message.userName = reader.string();
                    break;
                case 4:
                    message.soulPower = reader.double();
                    break;
                case 8:
                    message.league = reader.uint32();
                    break;
                case 5:
                    message.secondsRemaining = reader.double();
                    break;
                case 6:
                    message.platform = reader.int32();
                    break;
                case 7:
                    message.clientVersion = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an AutoJoinCoopRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ei.AutoJoinCoopRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ei.AutoJoinCoopRequest} AutoJoinCoopRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        AutoJoinCoopRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an AutoJoinCoopRequest message.
         * @function verify
         * @memberof ei.AutoJoinCoopRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        AutoJoinCoopRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.rinfo != null && message.hasOwnProperty("rinfo")) {
                let error = $root.ei.BasicRequestInfo.verify(message.rinfo);
                if (error)
                    return "rinfo." + error;
            }
            if (message.contractIdentifier != null && message.hasOwnProperty("contractIdentifier"))
                if (!$util.isString(message.contractIdentifier))
                    return "contractIdentifier: string expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isString(message.userId))
                    return "userId: string expected";
            if (message.userName != null && message.hasOwnProperty("userName"))
                if (!$util.isString(message.userName))
                    return "userName: string expected";
            if (message.soulPower != null && message.hasOwnProperty("soulPower"))
                if (typeof message.soulPower !== "number")
                    return "soulPower: number expected";
            if (message.league != null && message.hasOwnProperty("league"))
                if (!$util.isInteger(message.league))
                    return "league: integer expected";
            if (message.secondsRemaining != null && message.hasOwnProperty("secondsRemaining"))
                if (typeof message.secondsRemaining !== "number")
                    return "secondsRemaining: number expected";
            if (message.platform != null && message.hasOwnProperty("platform"))
                switch (message.platform) {
                default:
                    return "platform: enum value expected";
                case 1:
                case 2:
                    break;
                }
            if (message.clientVersion != null && message.hasOwnProperty("clientVersion"))
                if (!$util.isInteger(message.clientVersion))
                    return "clientVersion: integer expected";
            return null;
        };

        /**
         * Creates an AutoJoinCoopRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ei.AutoJoinCoopRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ei.AutoJoinCoopRequest} AutoJoinCoopRequest
         */
        AutoJoinCoopRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.ei.AutoJoinCoopRequest)
                return object;
            let message = new $root.ei.AutoJoinCoopRequest();
            if (object.rinfo != null) {
                if (typeof object.rinfo !== "object")
                    throw TypeError(".ei.AutoJoinCoopRequest.rinfo: object expected");
                message.rinfo = $root.ei.BasicRequestInfo.fromObject(object.rinfo);
            }
            if (object.contractIdentifier != null)
                message.contractIdentifier = String(object.contractIdentifier);
            if (object.userId != null)
                message.userId = String(object.userId);
            if (object.userName != null)
                message.userName = String(object.userName);
            if (object.soulPower != null)
                message.soulPower = Number(object.soulPower);
            if (object.league != null)
                message.league = object.league >>> 0;
            if (object.secondsRemaining != null)
                message.secondsRemaining = Number(object.secondsRemaining);
            switch (object.platform) {
            case "IOS":
            case 1:
                message.platform = 1;
                break;
            case "DROID":
            case 2:
                message.platform = 2;
                break;
            }
            if (object.clientVersion != null)
                message.clientVersion = object.clientVersion >>> 0;
            return message;
        };

        /**
         * Creates a plain object from an AutoJoinCoopRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ei.AutoJoinCoopRequest
         * @static
         * @param {ei.AutoJoinCoopRequest} message AutoJoinCoopRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        AutoJoinCoopRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.defaults) {
                object.contractIdentifier = "";
                object.userId = "";
                object.userName = "";
                object.soulPower = 0;
                object.secondsRemaining = 0;
                object.platform = options.enums === String ? "IOS" : 1;
                object.clientVersion = 0;
                object.league = 0;
                object.rinfo = null;
            }
            if (message.contractIdentifier != null && message.hasOwnProperty("contractIdentifier"))
                object.contractIdentifier = message.contractIdentifier;
            if (message.userId != null && message.hasOwnProperty("userId"))
                object.userId = message.userId;
            if (message.userName != null && message.hasOwnProperty("userName"))
                object.userName = message.userName;
            if (message.soulPower != null && message.hasOwnProperty("soulPower"))
                object.soulPower = options.json && !isFinite(message.soulPower) ? String(message.soulPower) : message.soulPower;
            if (message.secondsRemaining != null && message.hasOwnProperty("secondsRemaining"))
                object.secondsRemaining = options.json && !isFinite(message.secondsRemaining) ? String(message.secondsRemaining) : message.secondsRemaining;
            if (message.platform != null && message.hasOwnProperty("platform"))
                object.platform = options.enums === String ? $root.aux.Platform[message.platform] : message.platform;
            if (message.clientVersion != null && message.hasOwnProperty("clientVersion"))
                object.clientVersion = message.clientVersion;
            if (message.league != null && message.hasOwnProperty("league"))
                object.league = message.league;
            if (message.rinfo != null && message.hasOwnProperty("rinfo"))
                object.rinfo = $root.ei.BasicRequestInfo.toObject(message.rinfo, options);
            return object;
        };

        /**
         * Converts this AutoJoinCoopRequest to JSON.
         * @function toJSON
         * @memberof ei.AutoJoinCoopRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        AutoJoinCoopRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return AutoJoinCoopRequest;
    })();

    ei.UpdateCoopPermissionsRequest = (function() {

        /**
         * Properties of an UpdateCoopPermissionsRequest.
         * @memberof ei
         * @interface IUpdateCoopPermissionsRequest
         * @property {ei.IBasicRequestInfo|null} [rinfo] UpdateCoopPermissionsRequest rinfo
         * @property {string|null} [contractIdentifier] UpdateCoopPermissionsRequest contractIdentifier
         * @property {string|null} [coopIdentifier] UpdateCoopPermissionsRequest coopIdentifier
         * @property {string|null} [requestingUserId] UpdateCoopPermissionsRequest requestingUserId
         * @property {boolean|null} ["public"] UpdateCoopPermissionsRequest public
         * @property {number|null} [clientVersion] UpdateCoopPermissionsRequest clientVersion
         */

        /**
         * Constructs a new UpdateCoopPermissionsRequest.
         * @memberof ei
         * @classdesc Represents an UpdateCoopPermissionsRequest.
         * @implements IUpdateCoopPermissionsRequest
         * @constructor
         * @param {ei.IUpdateCoopPermissionsRequest=} [properties] Properties to set
         */
        function UpdateCoopPermissionsRequest(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * UpdateCoopPermissionsRequest rinfo.
         * @member {ei.IBasicRequestInfo|null|undefined} rinfo
         * @memberof ei.UpdateCoopPermissionsRequest
         * @instance
         */
        UpdateCoopPermissionsRequest.prototype.rinfo = null;

        /**
         * UpdateCoopPermissionsRequest contractIdentifier.
         * @member {string} contractIdentifier
         * @memberof ei.UpdateCoopPermissionsRequest
         * @instance
         */
        UpdateCoopPermissionsRequest.prototype.contractIdentifier = "";

        /**
         * UpdateCoopPermissionsRequest coopIdentifier.
         * @member {string} coopIdentifier
         * @memberof ei.UpdateCoopPermissionsRequest
         * @instance
         */
        UpdateCoopPermissionsRequest.prototype.coopIdentifier = "";

        /**
         * UpdateCoopPermissionsRequest requestingUserId.
         * @member {string} requestingUserId
         * @memberof ei.UpdateCoopPermissionsRequest
         * @instance
         */
        UpdateCoopPermissionsRequest.prototype.requestingUserId = "";

        /**
         * UpdateCoopPermissionsRequest public.
         * @member {boolean} public
         * @memberof ei.UpdateCoopPermissionsRequest
         * @instance
         */
        UpdateCoopPermissionsRequest.prototype["public"] = false;

        /**
         * UpdateCoopPermissionsRequest clientVersion.
         * @member {number} clientVersion
         * @memberof ei.UpdateCoopPermissionsRequest
         * @instance
         */
        UpdateCoopPermissionsRequest.prototype.clientVersion = 0;

        /**
         * Creates a new UpdateCoopPermissionsRequest instance using the specified properties.
         * @function create
         * @memberof ei.UpdateCoopPermissionsRequest
         * @static
         * @param {ei.IUpdateCoopPermissionsRequest=} [properties] Properties to set
         * @returns {ei.UpdateCoopPermissionsRequest} UpdateCoopPermissionsRequest instance
         */
        UpdateCoopPermissionsRequest.create = function create(properties) {
            return new UpdateCoopPermissionsRequest(properties);
        };

        /**
         * Encodes the specified UpdateCoopPermissionsRequest message. Does not implicitly {@link ei.UpdateCoopPermissionsRequest.verify|verify} messages.
         * @function encode
         * @memberof ei.UpdateCoopPermissionsRequest
         * @static
         * @param {ei.IUpdateCoopPermissionsRequest} message UpdateCoopPermissionsRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        UpdateCoopPermissionsRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.contractIdentifier != null && Object.hasOwnProperty.call(message, "contractIdentifier"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.contractIdentifier);
            if (message.coopIdentifier != null && Object.hasOwnProperty.call(message, "coopIdentifier"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.coopIdentifier);
            if (message.requestingUserId != null && Object.hasOwnProperty.call(message, "requestingUserId"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.requestingUserId);
            if (message["public"] != null && Object.hasOwnProperty.call(message, "public"))
                writer.uint32(/* id 4, wireType 0 =*/32).bool(message["public"]);
            if (message.clientVersion != null && Object.hasOwnProperty.call(message, "clientVersion"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.clientVersion);
            if (message.rinfo != null && Object.hasOwnProperty.call(message, "rinfo"))
                $root.ei.BasicRequestInfo.encode(message.rinfo, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified UpdateCoopPermissionsRequest message, length delimited. Does not implicitly {@link ei.UpdateCoopPermissionsRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ei.UpdateCoopPermissionsRequest
         * @static
         * @param {ei.IUpdateCoopPermissionsRequest} message UpdateCoopPermissionsRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        UpdateCoopPermissionsRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an UpdateCoopPermissionsRequest message from the specified reader or buffer.
         * @function decode
         * @memberof ei.UpdateCoopPermissionsRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ei.UpdateCoopPermissionsRequest} UpdateCoopPermissionsRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        UpdateCoopPermissionsRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ei.UpdateCoopPermissionsRequest();
            while (reader.pos < end) {
                let tag = reader.uint32();
                switch (tag >>> 3) {
                case 6:
                    message.rinfo = $root.ei.BasicRequestInfo.decode(reader, reader.uint32());
                    break;
                case 1:
                    message.contractIdentifier = reader.string();
                    break;
                case 2:
                    message.coopIdentifier = reader.string();
                    break;
                case 3:
                    message.requestingUserId = reader.string();
                    break;
                case 4:
                    message["public"] = reader.bool();
                    break;
                case 5:
                    message.clientVersion = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an UpdateCoopPermissionsRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ei.UpdateCoopPermissionsRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ei.UpdateCoopPermissionsRequest} UpdateCoopPermissionsRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        UpdateCoopPermissionsRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an UpdateCoopPermissionsRequest message.
         * @function verify
         * @memberof ei.UpdateCoopPermissionsRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        UpdateCoopPermissionsRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.rinfo != null && message.hasOwnProperty("rinfo")) {
                let error = $root.ei.BasicRequestInfo.verify(message.rinfo);
                if (error)
                    return "rinfo." + error;
            }
            if (message.contractIdentifier != null && message.hasOwnProperty("contractIdentifier"))
                if (!$util.isString(message.contractIdentifier))
                    return "contractIdentifier: string expected";
            if (message.coopIdentifier != null && message.hasOwnProperty("coopIdentifier"))
                if (!$util.isString(message.coopIdentifier))
                    return "coopIdentifier: string expected";
            if (message.requestingUserId != null && message.hasOwnProperty("requestingUserId"))
                if (!$util.isString(message.requestingUserId))
                    return "requestingUserId: string expected";
            if (message["public"] != null && message.hasOwnProperty("public"))
                if (typeof message["public"] !== "boolean")
                    return "public: boolean expected";
            if (message.clientVersion != null && message.hasOwnProperty("clientVersion"))
                if (!$util.isInteger(message.clientVersion))
                    return "clientVersion: integer expected";
            return null;
        };

        /**
         * Creates an UpdateCoopPermissionsRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ei.UpdateCoopPermissionsRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ei.UpdateCoopPermissionsRequest} UpdateCoopPermissionsRequest
         */
        UpdateCoopPermissionsRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.ei.UpdateCoopPermissionsRequest)
                return object;
            let message = new $root.ei.UpdateCoopPermissionsRequest();
            if (object.rinfo != null) {
                if (typeof object.rinfo !== "object")
                    throw TypeError(".ei.UpdateCoopPermissionsRequest.rinfo: object expected");
                message.rinfo = $root.ei.BasicRequestInfo.fromObject(object.rinfo);
            }
            if (object.contractIdentifier != null)
                message.contractIdentifier = String(object.contractIdentifier);
            if (object.coopIdentifier != null)
                message.coopIdentifier = String(object.coopIdentifier);
            if (object.requestingUserId != null)
                message.requestingUserId = String(object.requestingUserId);
            if (object["public"] != null)
                message["public"] = Boolean(object["public"]);
            if (object.clientVersion != null)
                message.clientVersion = object.clientVersion >>> 0;
            return message;
        };

        /**
         * Creates a plain object from an UpdateCoopPermissionsRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ei.UpdateCoopPermissionsRequest
         * @static
         * @param {ei.UpdateCoopPermissionsRequest} message UpdateCoopPermissionsRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        UpdateCoopPermissionsRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.defaults) {
                object.contractIdentifier = "";
                object.coopIdentifier = "";
                object.requestingUserId = "";
                object["public"] = false;
                object.clientVersion = 0;
                object.rinfo = null;
            }
            if (message.contractIdentifier != null && message.hasOwnProperty("contractIdentifier"))
                object.contractIdentifier = message.contractIdentifier;
            if (message.coopIdentifier != null && message.hasOwnProperty("coopIdentifier"))
                object.coopIdentifier = message.coopIdentifier;
            if (message.requestingUserId != null && message.hasOwnProperty("requestingUserId"))
                object.requestingUserId = message.requestingUserId;
            if (message["public"] != null && message.hasOwnProperty("public"))
                object["public"] = message["public"];
            if (message.clientVersion != null && message.hasOwnProperty("clientVersion"))
                object.clientVersion = message.clientVersion;
            if (message.rinfo != null && message.hasOwnProperty("rinfo"))
                object.rinfo = $root.ei.BasicRequestInfo.toObject(message.rinfo, options);
            return object;
        };

        /**
         * Converts this UpdateCoopPermissionsRequest to JSON.
         * @function toJSON
         * @memberof ei.UpdateCoopPermissionsRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        UpdateCoopPermissionsRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return UpdateCoopPermissionsRequest;
    })();

    ei.UpdateCoopPermissionsResponse = (function() {

        /**
         * Properties of an UpdateCoopPermissionsResponse.
         * @memberof ei
         * @interface IUpdateCoopPermissionsResponse
         * @property {boolean|null} [success] UpdateCoopPermissionsResponse success
         * @property {string|null} [message] UpdateCoopPermissionsResponse message
         */

        /**
         * Constructs a new UpdateCoopPermissionsResponse.
         * @memberof ei
         * @classdesc Represents an UpdateCoopPermissionsResponse.
         * @implements IUpdateCoopPermissionsResponse
         * @constructor
         * @param {ei.IUpdateCoopPermissionsResponse=} [properties] Properties to set
         */
        function UpdateCoopPermissionsResponse(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * UpdateCoopPermissionsResponse success.
         * @member {boolean} success
         * @memberof ei.UpdateCoopPermissionsResponse
         * @instance
         */
        UpdateCoopPermissionsResponse.prototype.success = false;

        /**
         * UpdateCoopPermissionsResponse message.
         * @member {string} message
         * @memberof ei.UpdateCoopPermissionsResponse
         * @instance
         */
        UpdateCoopPermissionsResponse.prototype.message = "";

        /**
         * Creates a new UpdateCoopPermissionsResponse instance using the specified properties.
         * @function create
         * @memberof ei.UpdateCoopPermissionsResponse
         * @static
         * @param {ei.IUpdateCoopPermissionsResponse=} [properties] Properties to set
         * @returns {ei.UpdateCoopPermissionsResponse} UpdateCoopPermissionsResponse instance
         */
        UpdateCoopPermissionsResponse.create = function create(properties) {
            return new UpdateCoopPermissionsResponse(properties);
        };

        /**
         * Encodes the specified UpdateCoopPermissionsResponse message. Does not implicitly {@link ei.UpdateCoopPermissionsResponse.verify|verify} messages.
         * @function encode
         * @memberof ei.UpdateCoopPermissionsResponse
         * @static
         * @param {ei.IUpdateCoopPermissionsResponse} message UpdateCoopPermissionsResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        UpdateCoopPermissionsResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.success != null && Object.hasOwnProperty.call(message, "success"))
                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.success);
            if (message.message != null && Object.hasOwnProperty.call(message, "message"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.message);
            return writer;
        };

        /**
         * Encodes the specified UpdateCoopPermissionsResponse message, length delimited. Does not implicitly {@link ei.UpdateCoopPermissionsResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ei.UpdateCoopPermissionsResponse
         * @static
         * @param {ei.IUpdateCoopPermissionsResponse} message UpdateCoopPermissionsResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        UpdateCoopPermissionsResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an UpdateCoopPermissionsResponse message from the specified reader or buffer.
         * @function decode
         * @memberof ei.UpdateCoopPermissionsResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ei.UpdateCoopPermissionsResponse} UpdateCoopPermissionsResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        UpdateCoopPermissionsResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ei.UpdateCoopPermissionsResponse();
            while (reader.pos < end) {
                let tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.success = reader.bool();
                    break;
                case 2:
                    message.message = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an UpdateCoopPermissionsResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ei.UpdateCoopPermissionsResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ei.UpdateCoopPermissionsResponse} UpdateCoopPermissionsResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        UpdateCoopPermissionsResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an UpdateCoopPermissionsResponse message.
         * @function verify
         * @memberof ei.UpdateCoopPermissionsResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        UpdateCoopPermissionsResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.success != null && message.hasOwnProperty("success"))
                if (typeof message.success !== "boolean")
                    return "success: boolean expected";
            if (message.message != null && message.hasOwnProperty("message"))
                if (!$util.isString(message.message))
                    return "message: string expected";
            return null;
        };

        /**
         * Creates an UpdateCoopPermissionsResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ei.UpdateCoopPermissionsResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ei.UpdateCoopPermissionsResponse} UpdateCoopPermissionsResponse
         */
        UpdateCoopPermissionsResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.ei.UpdateCoopPermissionsResponse)
                return object;
            let message = new $root.ei.UpdateCoopPermissionsResponse();
            if (object.success != null)
                message.success = Boolean(object.success);
            if (object.message != null)
                message.message = String(object.message);
            return message;
        };

        /**
         * Creates a plain object from an UpdateCoopPermissionsResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ei.UpdateCoopPermissionsResponse
         * @static
         * @param {ei.UpdateCoopPermissionsResponse} message UpdateCoopPermissionsResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        UpdateCoopPermissionsResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.defaults) {
                object.success = false;
                object.message = "";
            }
            if (message.success != null && message.hasOwnProperty("success"))
                object.success = message.success;
            if (message.message != null && message.hasOwnProperty("message"))
                object.message = message.message;
            return object;
        };

        /**
         * Converts this UpdateCoopPermissionsResponse to JSON.
         * @function toJSON
         * @memberof ei.UpdateCoopPermissionsResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        UpdateCoopPermissionsResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return UpdateCoopPermissionsResponse;
    })();

    ei.LeaveCoopRequest = (function() {

        /**
         * Properties of a LeaveCoopRequest.
         * @memberof ei
         * @interface ILeaveCoopRequest
         * @property {ei.IBasicRequestInfo|null} [rinfo] LeaveCoopRequest rinfo
         * @property {string|null} [contractIdentifier] LeaveCoopRequest contractIdentifier
         * @property {string|null} [coopIdentifier] LeaveCoopRequest coopIdentifier
         * @property {string|null} [playerIdentifier] LeaveCoopRequest playerIdentifier
         * @property {number|null} [clientVersion] LeaveCoopRequest clientVersion
         */

        /**
         * Constructs a new LeaveCoopRequest.
         * @memberof ei
         * @classdesc Represents a LeaveCoopRequest.
         * @implements ILeaveCoopRequest
         * @constructor
         * @param {ei.ILeaveCoopRequest=} [properties] Properties to set
         */
        function LeaveCoopRequest(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * LeaveCoopRequest rinfo.
         * @member {ei.IBasicRequestInfo|null|undefined} rinfo
         * @memberof ei.LeaveCoopRequest
         * @instance
         */
        LeaveCoopRequest.prototype.rinfo = null;

        /**
         * LeaveCoopRequest contractIdentifier.
         * @member {string} contractIdentifier
         * @memberof ei.LeaveCoopRequest
         * @instance
         */
        LeaveCoopRequest.prototype.contractIdentifier = "";

        /**
         * LeaveCoopRequest coopIdentifier.
         * @member {string} coopIdentifier
         * @memberof ei.LeaveCoopRequest
         * @instance
         */
        LeaveCoopRequest.prototype.coopIdentifier = "";

        /**
         * LeaveCoopRequest playerIdentifier.
         * @member {string} playerIdentifier
         * @memberof ei.LeaveCoopRequest
         * @instance
         */
        LeaveCoopRequest.prototype.playerIdentifier = "";

        /**
         * LeaveCoopRequest clientVersion.
         * @member {number} clientVersion
         * @memberof ei.LeaveCoopRequest
         * @instance
         */
        LeaveCoopRequest.prototype.clientVersion = 0;

        /**
         * Creates a new LeaveCoopRequest instance using the specified properties.
         * @function create
         * @memberof ei.LeaveCoopRequest
         * @static
         * @param {ei.ILeaveCoopRequest=} [properties] Properties to set
         * @returns {ei.LeaveCoopRequest} LeaveCoopRequest instance
         */
        LeaveCoopRequest.create = function create(properties) {
            return new LeaveCoopRequest(properties);
        };

        /**
         * Encodes the specified LeaveCoopRequest message. Does not implicitly {@link ei.LeaveCoopRequest.verify|verify} messages.
         * @function encode
         * @memberof ei.LeaveCoopRequest
         * @static
         * @param {ei.ILeaveCoopRequest} message LeaveCoopRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        LeaveCoopRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.contractIdentifier != null && Object.hasOwnProperty.call(message, "contractIdentifier"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.contractIdentifier);
            if (message.coopIdentifier != null && Object.hasOwnProperty.call(message, "coopIdentifier"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.coopIdentifier);
            if (message.playerIdentifier != null && Object.hasOwnProperty.call(message, "playerIdentifier"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.playerIdentifier);
            if (message.clientVersion != null && Object.hasOwnProperty.call(message, "clientVersion"))
                writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.clientVersion);
            if (message.rinfo != null && Object.hasOwnProperty.call(message, "rinfo"))
                $root.ei.BasicRequestInfo.encode(message.rinfo, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified LeaveCoopRequest message, length delimited. Does not implicitly {@link ei.LeaveCoopRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ei.LeaveCoopRequest
         * @static
         * @param {ei.ILeaveCoopRequest} message LeaveCoopRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        LeaveCoopRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a LeaveCoopRequest message from the specified reader or buffer.
         * @function decode
         * @memberof ei.LeaveCoopRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ei.LeaveCoopRequest} LeaveCoopRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        LeaveCoopRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ei.LeaveCoopRequest();
            while (reader.pos < end) {
                let tag = reader.uint32();
                switch (tag >>> 3) {
                case 8:
                    message.rinfo = $root.ei.BasicRequestInfo.decode(reader, reader.uint32());
                    break;
                case 1:
                    message.contractIdentifier = reader.string();
                    break;
                case 2:
                    message.coopIdentifier = reader.string();
                    break;
                case 3:
                    message.playerIdentifier = reader.string();
                    break;
                case 7:
                    message.clientVersion = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a LeaveCoopRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ei.LeaveCoopRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ei.LeaveCoopRequest} LeaveCoopRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        LeaveCoopRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a LeaveCoopRequest message.
         * @function verify
         * @memberof ei.LeaveCoopRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        LeaveCoopRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.rinfo != null && message.hasOwnProperty("rinfo")) {
                let error = $root.ei.BasicRequestInfo.verify(message.rinfo);
                if (error)
                    return "rinfo." + error;
            }
            if (message.contractIdentifier != null && message.hasOwnProperty("contractIdentifier"))
                if (!$util.isString(message.contractIdentifier))
                    return "contractIdentifier: string expected";
            if (message.coopIdentifier != null && message.hasOwnProperty("coopIdentifier"))
                if (!$util.isString(message.coopIdentifier))
                    return "coopIdentifier: string expected";
            if (message.playerIdentifier != null && message.hasOwnProperty("playerIdentifier"))
                if (!$util.isString(message.playerIdentifier))
                    return "playerIdentifier: string expected";
            if (message.clientVersion != null && message.hasOwnProperty("clientVersion"))
                if (!$util.isInteger(message.clientVersion))
                    return "clientVersion: integer expected";
            return null;
        };

        /**
         * Creates a LeaveCoopRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ei.LeaveCoopRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ei.LeaveCoopRequest} LeaveCoopRequest
         */
        LeaveCoopRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.ei.LeaveCoopRequest)
                return object;
            let message = new $root.ei.LeaveCoopRequest();
            if (object.rinfo != null) {
                if (typeof object.rinfo !== "object")
                    throw TypeError(".ei.LeaveCoopRequest.rinfo: object expected");
                message.rinfo = $root.ei.BasicRequestInfo.fromObject(object.rinfo);
            }
            if (object.contractIdentifier != null)
                message.contractIdentifier = String(object.contractIdentifier);
            if (object.coopIdentifier != null)
                message.coopIdentifier = String(object.coopIdentifier);
            if (object.playerIdentifier != null)
                message.playerIdentifier = String(object.playerIdentifier);
            if (object.clientVersion != null)
                message.clientVersion = object.clientVersion >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a LeaveCoopRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ei.LeaveCoopRequest
         * @static
         * @param {ei.LeaveCoopRequest} message LeaveCoopRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        LeaveCoopRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.defaults) {
                object.contractIdentifier = "";
                object.coopIdentifier = "";
                object.playerIdentifier = "";
                object.clientVersion = 0;
                object.rinfo = null;
            }
            if (message.contractIdentifier != null && message.hasOwnProperty("contractIdentifier"))
                object.contractIdentifier = message.contractIdentifier;
            if (message.coopIdentifier != null && message.hasOwnProperty("coopIdentifier"))
                object.coopIdentifier = message.coopIdentifier;
            if (message.playerIdentifier != null && message.hasOwnProperty("playerIdentifier"))
                object.playerIdentifier = message.playerIdentifier;
            if (message.clientVersion != null && message.hasOwnProperty("clientVersion"))
                object.clientVersion = message.clientVersion;
            if (message.rinfo != null && message.hasOwnProperty("rinfo"))
                object.rinfo = $root.ei.BasicRequestInfo.toObject(message.rinfo, options);
            return object;
        };

        /**
         * Converts this LeaveCoopRequest to JSON.
         * @function toJSON
         * @memberof ei.LeaveCoopRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        LeaveCoopRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return LeaveCoopRequest;
    })();

    ei.GiftPlayerCoopRequest = (function() {

        /**
         * Properties of a GiftPlayerCoopRequest.
         * @memberof ei
         * @interface IGiftPlayerCoopRequest
         * @property {ei.IBasicRequestInfo|null} [rinfo] GiftPlayerCoopRequest rinfo
         * @property {string|null} [contractIdentifier] GiftPlayerCoopRequest contractIdentifier
         * @property {string|null} [coopIdentifier] GiftPlayerCoopRequest coopIdentifier
         * @property {string|null} [playerIdentifier] GiftPlayerCoopRequest playerIdentifier
         * @property {string|null} [requestingUserId] GiftPlayerCoopRequest requestingUserId
         * @property {string|null} [requestingUserName] GiftPlayerCoopRequest requestingUserName
         * @property {number|null} [amount] GiftPlayerCoopRequest amount
         * @property {number|null} [clientVersion] GiftPlayerCoopRequest clientVersion
         */

        /**
         * Constructs a new GiftPlayerCoopRequest.
         * @memberof ei
         * @classdesc Represents a GiftPlayerCoopRequest.
         * @implements IGiftPlayerCoopRequest
         * @constructor
         * @param {ei.IGiftPlayerCoopRequest=} [properties] Properties to set
         */
        function GiftPlayerCoopRequest(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GiftPlayerCoopRequest rinfo.
         * @member {ei.IBasicRequestInfo|null|undefined} rinfo
         * @memberof ei.GiftPlayerCoopRequest
         * @instance
         */
        GiftPlayerCoopRequest.prototype.rinfo = null;

        /**
         * GiftPlayerCoopRequest contractIdentifier.
         * @member {string} contractIdentifier
         * @memberof ei.GiftPlayerCoopRequest
         * @instance
         */
        GiftPlayerCoopRequest.prototype.contractIdentifier = "";

        /**
         * GiftPlayerCoopRequest coopIdentifier.
         * @member {string} coopIdentifier
         * @memberof ei.GiftPlayerCoopRequest
         * @instance
         */
        GiftPlayerCoopRequest.prototype.coopIdentifier = "";

        /**
         * GiftPlayerCoopRequest playerIdentifier.
         * @member {string} playerIdentifier
         * @memberof ei.GiftPlayerCoopRequest
         * @instance
         */
        GiftPlayerCoopRequest.prototype.playerIdentifier = "";

        /**
         * GiftPlayerCoopRequest requestingUserId.
         * @member {string} requestingUserId
         * @memberof ei.GiftPlayerCoopRequest
         * @instance
         */
        GiftPlayerCoopRequest.prototype.requestingUserId = "";

        /**
         * GiftPlayerCoopRequest requestingUserName.
         * @member {string} requestingUserName
         * @memberof ei.GiftPlayerCoopRequest
         * @instance
         */
        GiftPlayerCoopRequest.prototype.requestingUserName = "";

        /**
         * GiftPlayerCoopRequest amount.
         * @member {number} amount
         * @memberof ei.GiftPlayerCoopRequest
         * @instance
         */
        GiftPlayerCoopRequest.prototype.amount = 0;

        /**
         * GiftPlayerCoopRequest clientVersion.
         * @member {number} clientVersion
         * @memberof ei.GiftPlayerCoopRequest
         * @instance
         */
        GiftPlayerCoopRequest.prototype.clientVersion = 0;

        /**
         * Creates a new GiftPlayerCoopRequest instance using the specified properties.
         * @function create
         * @memberof ei.GiftPlayerCoopRequest
         * @static
         * @param {ei.IGiftPlayerCoopRequest=} [properties] Properties to set
         * @returns {ei.GiftPlayerCoopRequest} GiftPlayerCoopRequest instance
         */
        GiftPlayerCoopRequest.create = function create(properties) {
            return new GiftPlayerCoopRequest(properties);
        };

        /**
         * Encodes the specified GiftPlayerCoopRequest message. Does not implicitly {@link ei.GiftPlayerCoopRequest.verify|verify} messages.
         * @function encode
         * @memberof ei.GiftPlayerCoopRequest
         * @static
         * @param {ei.IGiftPlayerCoopRequest} message GiftPlayerCoopRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GiftPlayerCoopRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.contractIdentifier != null && Object.hasOwnProperty.call(message, "contractIdentifier"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.contractIdentifier);
            if (message.coopIdentifier != null && Object.hasOwnProperty.call(message, "coopIdentifier"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.coopIdentifier);
            if (message.playerIdentifier != null && Object.hasOwnProperty.call(message, "playerIdentifier"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.playerIdentifier);
            if (message.requestingUserId != null && Object.hasOwnProperty.call(message, "requestingUserId"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.requestingUserId);
            if (message.amount != null && Object.hasOwnProperty.call(message, "amount"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.amount);
            if (message.requestingUserName != null && Object.hasOwnProperty.call(message, "requestingUserName"))
                writer.uint32(/* id 6, wireType 2 =*/50).string(message.requestingUserName);
            if (message.clientVersion != null && Object.hasOwnProperty.call(message, "clientVersion"))
                writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.clientVersion);
            if (message.rinfo != null && Object.hasOwnProperty.call(message, "rinfo"))
                $root.ei.BasicRequestInfo.encode(message.rinfo, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified GiftPlayerCoopRequest message, length delimited. Does not implicitly {@link ei.GiftPlayerCoopRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ei.GiftPlayerCoopRequest
         * @static
         * @param {ei.IGiftPlayerCoopRequest} message GiftPlayerCoopRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GiftPlayerCoopRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GiftPlayerCoopRequest message from the specified reader or buffer.
         * @function decode
         * @memberof ei.GiftPlayerCoopRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ei.GiftPlayerCoopRequest} GiftPlayerCoopRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GiftPlayerCoopRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ei.GiftPlayerCoopRequest();
            while (reader.pos < end) {
                let tag = reader.uint32();
                switch (tag >>> 3) {
                case 8:
                    message.rinfo = $root.ei.BasicRequestInfo.decode(reader, reader.uint32());
                    break;
                case 1:
                    message.contractIdentifier = reader.string();
                    break;
                case 2:
                    message.coopIdentifier = reader.string();
                    break;
                case 3:
                    message.playerIdentifier = reader.string();
                    break;
                case 4:
                    message.requestingUserId = reader.string();
                    break;
                case 6:
                    message.requestingUserName = reader.string();
                    break;
                case 5:
                    message.amount = reader.uint32();
                    break;
                case 7:
                    message.clientVersion = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GiftPlayerCoopRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ei.GiftPlayerCoopRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ei.GiftPlayerCoopRequest} GiftPlayerCoopRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GiftPlayerCoopRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GiftPlayerCoopRequest message.
         * @function verify
         * @memberof ei.GiftPlayerCoopRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GiftPlayerCoopRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.rinfo != null && message.hasOwnProperty("rinfo")) {
                let error = $root.ei.BasicRequestInfo.verify(message.rinfo);
                if (error)
                    return "rinfo." + error;
            }
            if (message.contractIdentifier != null && message.hasOwnProperty("contractIdentifier"))
                if (!$util.isString(message.contractIdentifier))
                    return "contractIdentifier: string expected";
            if (message.coopIdentifier != null && message.hasOwnProperty("coopIdentifier"))
                if (!$util.isString(message.coopIdentifier))
                    return "coopIdentifier: string expected";
            if (message.playerIdentifier != null && message.hasOwnProperty("playerIdentifier"))
                if (!$util.isString(message.playerIdentifier))
                    return "playerIdentifier: string expected";
            if (message.requestingUserId != null && message.hasOwnProperty("requestingUserId"))
                if (!$util.isString(message.requestingUserId))
                    return "requestingUserId: string expected";
            if (message.requestingUserName != null && message.hasOwnProperty("requestingUserName"))
                if (!$util.isString(message.requestingUserName))
                    return "requestingUserName: string expected";
            if (message.amount != null && message.hasOwnProperty("amount"))
                if (!$util.isInteger(message.amount))
                    return "amount: integer expected";
            if (message.clientVersion != null && message.hasOwnProperty("clientVersion"))
                if (!$util.isInteger(message.clientVersion))
                    return "clientVersion: integer expected";
            return null;
        };

        /**
         * Creates a GiftPlayerCoopRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ei.GiftPlayerCoopRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ei.GiftPlayerCoopRequest} GiftPlayerCoopRequest
         */
        GiftPlayerCoopRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.ei.GiftPlayerCoopRequest)
                return object;
            let message = new $root.ei.GiftPlayerCoopRequest();
            if (object.rinfo != null) {
                if (typeof object.rinfo !== "object")
                    throw TypeError(".ei.GiftPlayerCoopRequest.rinfo: object expected");
                message.rinfo = $root.ei.BasicRequestInfo.fromObject(object.rinfo);
            }
            if (object.contractIdentifier != null)
                message.contractIdentifier = String(object.contractIdentifier);
            if (object.coopIdentifier != null)
                message.coopIdentifier = String(object.coopIdentifier);
            if (object.playerIdentifier != null)
                message.playerIdentifier = String(object.playerIdentifier);
            if (object.requestingUserId != null)
                message.requestingUserId = String(object.requestingUserId);
            if (object.requestingUserName != null)
                message.requestingUserName = String(object.requestingUserName);
            if (object.amount != null)
                message.amount = object.amount >>> 0;
            if (object.clientVersion != null)
                message.clientVersion = object.clientVersion >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a GiftPlayerCoopRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ei.GiftPlayerCoopRequest
         * @static
         * @param {ei.GiftPlayerCoopRequest} message GiftPlayerCoopRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GiftPlayerCoopRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.defaults) {
                object.contractIdentifier = "";
                object.coopIdentifier = "";
                object.playerIdentifier = "";
                object.requestingUserId = "";
                object.amount = 0;
                object.requestingUserName = "";
                object.clientVersion = 0;
                object.rinfo = null;
            }
            if (message.contractIdentifier != null && message.hasOwnProperty("contractIdentifier"))
                object.contractIdentifier = message.contractIdentifier;
            if (message.coopIdentifier != null && message.hasOwnProperty("coopIdentifier"))
                object.coopIdentifier = message.coopIdentifier;
            if (message.playerIdentifier != null && message.hasOwnProperty("playerIdentifier"))
                object.playerIdentifier = message.playerIdentifier;
            if (message.requestingUserId != null && message.hasOwnProperty("requestingUserId"))
                object.requestingUserId = message.requestingUserId;
            if (message.amount != null && message.hasOwnProperty("amount"))
                object.amount = message.amount;
            if (message.requestingUserName != null && message.hasOwnProperty("requestingUserName"))
                object.requestingUserName = message.requestingUserName;
            if (message.clientVersion != null && message.hasOwnProperty("clientVersion"))
                object.clientVersion = message.clientVersion;
            if (message.rinfo != null && message.hasOwnProperty("rinfo"))
                object.rinfo = $root.ei.BasicRequestInfo.toObject(message.rinfo, options);
            return object;
        };

        /**
         * Converts this GiftPlayerCoopRequest to JSON.
         * @function toJSON
         * @memberof ei.GiftPlayerCoopRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GiftPlayerCoopRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GiftPlayerCoopRequest;
    })();

    ei.KickPlayerCoopRequest = (function() {

        /**
         * Properties of a KickPlayerCoopRequest.
         * @memberof ei
         * @interface IKickPlayerCoopRequest
         * @property {ei.IBasicRequestInfo|null} [rinfo] KickPlayerCoopRequest rinfo
         * @property {string|null} [contractIdentifier] KickPlayerCoopRequest contractIdentifier
         * @property {string|null} [coopIdentifier] KickPlayerCoopRequest coopIdentifier
         * @property {string|null} [playerIdentifier] KickPlayerCoopRequest playerIdentifier
         * @property {string|null} [requestingUserId] KickPlayerCoopRequest requestingUserId
         * @property {number|null} [clientVersion] KickPlayerCoopRequest clientVersion
         */

        /**
         * Constructs a new KickPlayerCoopRequest.
         * @memberof ei
         * @classdesc Represents a KickPlayerCoopRequest.
         * @implements IKickPlayerCoopRequest
         * @constructor
         * @param {ei.IKickPlayerCoopRequest=} [properties] Properties to set
         */
        function KickPlayerCoopRequest(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * KickPlayerCoopRequest rinfo.
         * @member {ei.IBasicRequestInfo|null|undefined} rinfo
         * @memberof ei.KickPlayerCoopRequest
         * @instance
         */
        KickPlayerCoopRequest.prototype.rinfo = null;

        /**
         * KickPlayerCoopRequest contractIdentifier.
         * @member {string} contractIdentifier
         * @memberof ei.KickPlayerCoopRequest
         * @instance
         */
        KickPlayerCoopRequest.prototype.contractIdentifier = "";

        /**
         * KickPlayerCoopRequest coopIdentifier.
         * @member {string} coopIdentifier
         * @memberof ei.KickPlayerCoopRequest
         * @instance
         */
        KickPlayerCoopRequest.prototype.coopIdentifier = "";

        /**
         * KickPlayerCoopRequest playerIdentifier.
         * @member {string} playerIdentifier
         * @memberof ei.KickPlayerCoopRequest
         * @instance
         */
        KickPlayerCoopRequest.prototype.playerIdentifier = "";

        /**
         * KickPlayerCoopRequest requestingUserId.
         * @member {string} requestingUserId
         * @memberof ei.KickPlayerCoopRequest
         * @instance
         */
        KickPlayerCoopRequest.prototype.requestingUserId = "";

        /**
         * KickPlayerCoopRequest clientVersion.
         * @member {number} clientVersion
         * @memberof ei.KickPlayerCoopRequest
         * @instance
         */
        KickPlayerCoopRequest.prototype.clientVersion = 0;

        /**
         * Creates a new KickPlayerCoopRequest instance using the specified properties.
         * @function create
         * @memberof ei.KickPlayerCoopRequest
         * @static
         * @param {ei.IKickPlayerCoopRequest=} [properties] Properties to set
         * @returns {ei.KickPlayerCoopRequest} KickPlayerCoopRequest instance
         */
        KickPlayerCoopRequest.create = function create(properties) {
            return new KickPlayerCoopRequest(properties);
        };

        /**
         * Encodes the specified KickPlayerCoopRequest message. Does not implicitly {@link ei.KickPlayerCoopRequest.verify|verify} messages.
         * @function encode
         * @memberof ei.KickPlayerCoopRequest
         * @static
         * @param {ei.IKickPlayerCoopRequest} message KickPlayerCoopRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        KickPlayerCoopRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.contractIdentifier != null && Object.hasOwnProperty.call(message, "contractIdentifier"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.contractIdentifier);
            if (message.coopIdentifier != null && Object.hasOwnProperty.call(message, "coopIdentifier"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.coopIdentifier);
            if (message.playerIdentifier != null && Object.hasOwnProperty.call(message, "playerIdentifier"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.playerIdentifier);
            if (message.requestingUserId != null && Object.hasOwnProperty.call(message, "requestingUserId"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.requestingUserId);
            if (message.clientVersion != null && Object.hasOwnProperty.call(message, "clientVersion"))
                writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.clientVersion);
            if (message.rinfo != null && Object.hasOwnProperty.call(message, "rinfo"))
                $root.ei.BasicRequestInfo.encode(message.rinfo, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified KickPlayerCoopRequest message, length delimited. Does not implicitly {@link ei.KickPlayerCoopRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ei.KickPlayerCoopRequest
         * @static
         * @param {ei.IKickPlayerCoopRequest} message KickPlayerCoopRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        KickPlayerCoopRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a KickPlayerCoopRequest message from the specified reader or buffer.
         * @function decode
         * @memberof ei.KickPlayerCoopRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ei.KickPlayerCoopRequest} KickPlayerCoopRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        KickPlayerCoopRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ei.KickPlayerCoopRequest();
            while (reader.pos < end) {
                let tag = reader.uint32();
                switch (tag >>> 3) {
                case 8:
                    message.rinfo = $root.ei.BasicRequestInfo.decode(reader, reader.uint32());
                    break;
                case 1:
                    message.contractIdentifier = reader.string();
                    break;
                case 2:
                    message.coopIdentifier = reader.string();
                    break;
                case 3:
                    message.playerIdentifier = reader.string();
                    break;
                case 4:
                    message.requestingUserId = reader.string();
                    break;
                case 7:
                    message.clientVersion = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a KickPlayerCoopRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ei.KickPlayerCoopRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ei.KickPlayerCoopRequest} KickPlayerCoopRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        KickPlayerCoopRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a KickPlayerCoopRequest message.
         * @function verify
         * @memberof ei.KickPlayerCoopRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        KickPlayerCoopRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.rinfo != null && message.hasOwnProperty("rinfo")) {
                let error = $root.ei.BasicRequestInfo.verify(message.rinfo);
                if (error)
                    return "rinfo." + error;
            }
            if (message.contractIdentifier != null && message.hasOwnProperty("contractIdentifier"))
                if (!$util.isString(message.contractIdentifier))
                    return "contractIdentifier: string expected";
            if (message.coopIdentifier != null && message.hasOwnProperty("coopIdentifier"))
                if (!$util.isString(message.coopIdentifier))
                    return "coopIdentifier: string expected";
            if (message.playerIdentifier != null && message.hasOwnProperty("playerIdentifier"))
                if (!$util.isString(message.playerIdentifier))
                    return "playerIdentifier: string expected";
            if (message.requestingUserId != null && message.hasOwnProperty("requestingUserId"))
                if (!$util.isString(message.requestingUserId))
                    return "requestingUserId: string expected";
            if (message.clientVersion != null && message.hasOwnProperty("clientVersion"))
                if (!$util.isInteger(message.clientVersion))
                    return "clientVersion: integer expected";
            return null;
        };

        /**
         * Creates a KickPlayerCoopRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ei.KickPlayerCoopRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ei.KickPlayerCoopRequest} KickPlayerCoopRequest
         */
        KickPlayerCoopRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.ei.KickPlayerCoopRequest)
                return object;
            let message = new $root.ei.KickPlayerCoopRequest();
            if (object.rinfo != null) {
                if (typeof object.rinfo !== "object")
                    throw TypeError(".ei.KickPlayerCoopRequest.rinfo: object expected");
                message.rinfo = $root.ei.BasicRequestInfo.fromObject(object.rinfo);
            }
            if (object.contractIdentifier != null)
                message.contractIdentifier = String(object.contractIdentifier);
            if (object.coopIdentifier != null)
                message.coopIdentifier = String(object.coopIdentifier);
            if (object.playerIdentifier != null)
                message.playerIdentifier = String(object.playerIdentifier);
            if (object.requestingUserId != null)
                message.requestingUserId = String(object.requestingUserId);
            if (object.clientVersion != null)
                message.clientVersion = object.clientVersion >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a KickPlayerCoopRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ei.KickPlayerCoopRequest
         * @static
         * @param {ei.KickPlayerCoopRequest} message KickPlayerCoopRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        KickPlayerCoopRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.defaults) {
                object.contractIdentifier = "";
                object.coopIdentifier = "";
                object.playerIdentifier = "";
                object.requestingUserId = "";
                object.clientVersion = 0;
                object.rinfo = null;
            }
            if (message.contractIdentifier != null && message.hasOwnProperty("contractIdentifier"))
                object.contractIdentifier = message.contractIdentifier;
            if (message.coopIdentifier != null && message.hasOwnProperty("coopIdentifier"))
                object.coopIdentifier = message.coopIdentifier;
            if (message.playerIdentifier != null && message.hasOwnProperty("playerIdentifier"))
                object.playerIdentifier = message.playerIdentifier;
            if (message.requestingUserId != null && message.hasOwnProperty("requestingUserId"))
                object.requestingUserId = message.requestingUserId;
            if (message.clientVersion != null && message.hasOwnProperty("clientVersion"))
                object.clientVersion = message.clientVersion;
            if (message.rinfo != null && message.hasOwnProperty("rinfo"))
                object.rinfo = $root.ei.BasicRequestInfo.toObject(message.rinfo, options);
            return object;
        };

        /**
         * Converts this KickPlayerCoopRequest to JSON.
         * @function toJSON
         * @memberof ei.KickPlayerCoopRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        KickPlayerCoopRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return KickPlayerCoopRequest;
    })();

    ei.ContractCoopStatusUpdateRequest = (function() {

        /**
         * Properties of a ContractCoopStatusUpdateRequest.
         * @memberof ei
         * @interface IContractCoopStatusUpdateRequest
         * @property {ei.IBasicRequestInfo|null} [rinfo] ContractCoopStatusUpdateRequest rinfo
         * @property {string|null} [userId] ContractCoopStatusUpdateRequest userId
         * @property {string|null} [contractIdentifier] ContractCoopStatusUpdateRequest contractIdentifier
         * @property {string|null} [coopIdentifier] ContractCoopStatusUpdateRequest coopIdentifier
         * @property {string|null} [pushUserId] ContractCoopStatusUpdateRequest pushUserId
         * @property {number|null} [amount] ContractCoopStatusUpdateRequest amount
         * @property {number|null} [rate] ContractCoopStatusUpdateRequest rate
         * @property {number|null} [timeCheatsDetected] ContractCoopStatusUpdateRequest timeCheatsDetected
         * @property {number|null} [soulPower] ContractCoopStatusUpdateRequest soulPower
         * @property {number|null} [boostTokens] ContractCoopStatusUpdateRequest boostTokens
         * @property {number|null} [eggLayingRateBuff] ContractCoopStatusUpdateRequest eggLayingRateBuff
         * @property {number|null} [earningsBuff] ContractCoopStatusUpdateRequest earningsBuff
         */

        /**
         * Constructs a new ContractCoopStatusUpdateRequest.
         * @memberof ei
         * @classdesc Represents a ContractCoopStatusUpdateRequest.
         * @implements IContractCoopStatusUpdateRequest
         * @constructor
         * @param {ei.IContractCoopStatusUpdateRequest=} [properties] Properties to set
         */
        function ContractCoopStatusUpdateRequest(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ContractCoopStatusUpdateRequest rinfo.
         * @member {ei.IBasicRequestInfo|null|undefined} rinfo
         * @memberof ei.ContractCoopStatusUpdateRequest
         * @instance
         */
        ContractCoopStatusUpdateRequest.prototype.rinfo = null;

        /**
         * ContractCoopStatusUpdateRequest userId.
         * @member {string} userId
         * @memberof ei.ContractCoopStatusUpdateRequest
         * @instance
         */
        ContractCoopStatusUpdateRequest.prototype.userId = "";

        /**
         * ContractCoopStatusUpdateRequest contractIdentifier.
         * @member {string} contractIdentifier
         * @memberof ei.ContractCoopStatusUpdateRequest
         * @instance
         */
        ContractCoopStatusUpdateRequest.prototype.contractIdentifier = "";

        /**
         * ContractCoopStatusUpdateRequest coopIdentifier.
         * @member {string} coopIdentifier
         * @memberof ei.ContractCoopStatusUpdateRequest
         * @instance
         */
        ContractCoopStatusUpdateRequest.prototype.coopIdentifier = "";

        /**
         * ContractCoopStatusUpdateRequest pushUserId.
         * @member {string} pushUserId
         * @memberof ei.ContractCoopStatusUpdateRequest
         * @instance
         */
        ContractCoopStatusUpdateRequest.prototype.pushUserId = "";

        /**
         * ContractCoopStatusUpdateRequest amount.
         * @member {number} amount
         * @memberof ei.ContractCoopStatusUpdateRequest
         * @instance
         */
        ContractCoopStatusUpdateRequest.prototype.amount = 0;

        /**
         * ContractCoopStatusUpdateRequest rate.
         * @member {number} rate
         * @memberof ei.ContractCoopStatusUpdateRequest
         * @instance
         */
        ContractCoopStatusUpdateRequest.prototype.rate = 0;

        /**
         * ContractCoopStatusUpdateRequest timeCheatsDetected.
         * @member {number} timeCheatsDetected
         * @memberof ei.ContractCoopStatusUpdateRequest
         * @instance
         */
        ContractCoopStatusUpdateRequest.prototype.timeCheatsDetected = 0;

        /**
         * ContractCoopStatusUpdateRequest soulPower.
         * @member {number} soulPower
         * @memberof ei.ContractCoopStatusUpdateRequest
         * @instance
         */
        ContractCoopStatusUpdateRequest.prototype.soulPower = 0;

        /**
         * ContractCoopStatusUpdateRequest boostTokens.
         * @member {number} boostTokens
         * @memberof ei.ContractCoopStatusUpdateRequest
         * @instance
         */
        ContractCoopStatusUpdateRequest.prototype.boostTokens = 0;

        /**
         * ContractCoopStatusUpdateRequest eggLayingRateBuff.
         * @member {number} eggLayingRateBuff
         * @memberof ei.ContractCoopStatusUpdateRequest
         * @instance
         */
        ContractCoopStatusUpdateRequest.prototype.eggLayingRateBuff = 1;

        /**
         * ContractCoopStatusUpdateRequest earningsBuff.
         * @member {number} earningsBuff
         * @memberof ei.ContractCoopStatusUpdateRequest
         * @instance
         */
        ContractCoopStatusUpdateRequest.prototype.earningsBuff = 1;

        /**
         * Creates a new ContractCoopStatusUpdateRequest instance using the specified properties.
         * @function create
         * @memberof ei.ContractCoopStatusUpdateRequest
         * @static
         * @param {ei.IContractCoopStatusUpdateRequest=} [properties] Properties to set
         * @returns {ei.ContractCoopStatusUpdateRequest} ContractCoopStatusUpdateRequest instance
         */
        ContractCoopStatusUpdateRequest.create = function create(properties) {
            return new ContractCoopStatusUpdateRequest(properties);
        };

        /**
         * Encodes the specified ContractCoopStatusUpdateRequest message. Does not implicitly {@link ei.ContractCoopStatusUpdateRequest.verify|verify} messages.
         * @function encode
         * @memberof ei.ContractCoopStatusUpdateRequest
         * @static
         * @param {ei.IContractCoopStatusUpdateRequest} message ContractCoopStatusUpdateRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ContractCoopStatusUpdateRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userId != null && Object.hasOwnProperty.call(message, "userId"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);
            if (message.contractIdentifier != null && Object.hasOwnProperty.call(message, "contractIdentifier"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.contractIdentifier);
            if (message.coopIdentifier != null && Object.hasOwnProperty.call(message, "coopIdentifier"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.coopIdentifier);
            if (message.amount != null && Object.hasOwnProperty.call(message, "amount"))
                writer.uint32(/* id 4, wireType 1 =*/33).double(message.amount);
            if (message.rate != null && Object.hasOwnProperty.call(message, "rate"))
                writer.uint32(/* id 5, wireType 1 =*/41).double(message.rate);
            if (message.timeCheatsDetected != null && Object.hasOwnProperty.call(message, "timeCheatsDetected"))
                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.timeCheatsDetected);
            if (message.soulPower != null && Object.hasOwnProperty.call(message, "soulPower"))
                writer.uint32(/* id 7, wireType 1 =*/57).double(message.soulPower);
            if (message.pushUserId != null && Object.hasOwnProperty.call(message, "pushUserId"))
                writer.uint32(/* id 8, wireType 2 =*/66).string(message.pushUserId);
            if (message.boostTokens != null && Object.hasOwnProperty.call(message, "boostTokens"))
                writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.boostTokens);
            if (message.eggLayingRateBuff != null && Object.hasOwnProperty.call(message, "eggLayingRateBuff"))
                writer.uint32(/* id 10, wireType 1 =*/81).double(message.eggLayingRateBuff);
            if (message.earningsBuff != null && Object.hasOwnProperty.call(message, "earningsBuff"))
                writer.uint32(/* id 11, wireType 1 =*/89).double(message.earningsBuff);
            if (message.rinfo != null && Object.hasOwnProperty.call(message, "rinfo"))
                $root.ei.BasicRequestInfo.encode(message.rinfo, writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ContractCoopStatusUpdateRequest message, length delimited. Does not implicitly {@link ei.ContractCoopStatusUpdateRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ei.ContractCoopStatusUpdateRequest
         * @static
         * @param {ei.IContractCoopStatusUpdateRequest} message ContractCoopStatusUpdateRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ContractCoopStatusUpdateRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ContractCoopStatusUpdateRequest message from the specified reader or buffer.
         * @function decode
         * @memberof ei.ContractCoopStatusUpdateRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ei.ContractCoopStatusUpdateRequest} ContractCoopStatusUpdateRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ContractCoopStatusUpdateRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ei.ContractCoopStatusUpdateRequest();
            while (reader.pos < end) {
                let tag = reader.uint32();
                switch (tag >>> 3) {
                case 12:
                    message.rinfo = $root.ei.BasicRequestInfo.decode(reader, reader.uint32());
                    break;
                case 1:
                    message.userId = reader.string();
                    break;
                case 2:
                    message.contractIdentifier = reader.string();
                    break;
                case 3:
                    message.coopIdentifier = reader.string();
                    break;
                case 8:
                    message.pushUserId = reader.string();
                    break;
                case 4:
                    message.amount = reader.double();
                    break;
                case 5:
                    message.rate = reader.double();
                    break;
                case 6:
                    message.timeCheatsDetected = reader.uint32();
                    break;
                case 7:
                    message.soulPower = reader.double();
                    break;
                case 9:
                    message.boostTokens = reader.uint32();
                    break;
                case 10:
                    message.eggLayingRateBuff = reader.double();
                    break;
                case 11:
                    message.earningsBuff = reader.double();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ContractCoopStatusUpdateRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ei.ContractCoopStatusUpdateRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ei.ContractCoopStatusUpdateRequest} ContractCoopStatusUpdateRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ContractCoopStatusUpdateRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ContractCoopStatusUpdateRequest message.
         * @function verify
         * @memberof ei.ContractCoopStatusUpdateRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ContractCoopStatusUpdateRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.rinfo != null && message.hasOwnProperty("rinfo")) {
                let error = $root.ei.BasicRequestInfo.verify(message.rinfo);
                if (error)
                    return "rinfo." + error;
            }
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isString(message.userId))
                    return "userId: string expected";
            if (message.contractIdentifier != null && message.hasOwnProperty("contractIdentifier"))
                if (!$util.isString(message.contractIdentifier))
                    return "contractIdentifier: string expected";
            if (message.coopIdentifier != null && message.hasOwnProperty("coopIdentifier"))
                if (!$util.isString(message.coopIdentifier))
                    return "coopIdentifier: string expected";
            if (message.pushUserId != null && message.hasOwnProperty("pushUserId"))
                if (!$util.isString(message.pushUserId))
                    return "pushUserId: string expected";
            if (message.amount != null && message.hasOwnProperty("amount"))
                if (typeof message.amount !== "number")
                    return "amount: number expected";
            if (message.rate != null && message.hasOwnProperty("rate"))
                if (typeof message.rate !== "number")
                    return "rate: number expected";
            if (message.timeCheatsDetected != null && message.hasOwnProperty("timeCheatsDetected"))
                if (!$util.isInteger(message.timeCheatsDetected))
                    return "timeCheatsDetected: integer expected";
            if (message.soulPower != null && message.hasOwnProperty("soulPower"))
                if (typeof message.soulPower !== "number")
                    return "soulPower: number expected";
            if (message.boostTokens != null && message.hasOwnProperty("boostTokens"))
                if (!$util.isInteger(message.boostTokens))
                    return "boostTokens: integer expected";
            if (message.eggLayingRateBuff != null && message.hasOwnProperty("eggLayingRateBuff"))
                if (typeof message.eggLayingRateBuff !== "number")
                    return "eggLayingRateBuff: number expected";
            if (message.earningsBuff != null && message.hasOwnProperty("earningsBuff"))
                if (typeof message.earningsBuff !== "number")
                    return "earningsBuff: number expected";
            return null;
        };

        /**
         * Creates a ContractCoopStatusUpdateRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ei.ContractCoopStatusUpdateRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ei.ContractCoopStatusUpdateRequest} ContractCoopStatusUpdateRequest
         */
        ContractCoopStatusUpdateRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.ei.ContractCoopStatusUpdateRequest)
                return object;
            let message = new $root.ei.ContractCoopStatusUpdateRequest();
            if (object.rinfo != null) {
                if (typeof object.rinfo !== "object")
                    throw TypeError(".ei.ContractCoopStatusUpdateRequest.rinfo: object expected");
                message.rinfo = $root.ei.BasicRequestInfo.fromObject(object.rinfo);
            }
            if (object.userId != null)
                message.userId = String(object.userId);
            if (object.contractIdentifier != null)
                message.contractIdentifier = String(object.contractIdentifier);
            if (object.coopIdentifier != null)
                message.coopIdentifier = String(object.coopIdentifier);
            if (object.pushUserId != null)
                message.pushUserId = String(object.pushUserId);
            if (object.amount != null)
                message.amount = Number(object.amount);
            if (object.rate != null)
                message.rate = Number(object.rate);
            if (object.timeCheatsDetected != null)
                message.timeCheatsDetected = object.timeCheatsDetected >>> 0;
            if (object.soulPower != null)
                message.soulPower = Number(object.soulPower);
            if (object.boostTokens != null)
                message.boostTokens = object.boostTokens >>> 0;
            if (object.eggLayingRateBuff != null)
                message.eggLayingRateBuff = Number(object.eggLayingRateBuff);
            if (object.earningsBuff != null)
                message.earningsBuff = Number(object.earningsBuff);
            return message;
        };

        /**
         * Creates a plain object from a ContractCoopStatusUpdateRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ei.ContractCoopStatusUpdateRequest
         * @static
         * @param {ei.ContractCoopStatusUpdateRequest} message ContractCoopStatusUpdateRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ContractCoopStatusUpdateRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.defaults) {
                object.userId = "";
                object.contractIdentifier = "";
                object.coopIdentifier = "";
                object.amount = 0;
                object.rate = 0;
                object.timeCheatsDetected = 0;
                object.soulPower = 0;
                object.pushUserId = "";
                object.boostTokens = 0;
                object.eggLayingRateBuff = 1;
                object.earningsBuff = 1;
                object.rinfo = null;
            }
            if (message.userId != null && message.hasOwnProperty("userId"))
                object.userId = message.userId;
            if (message.contractIdentifier != null && message.hasOwnProperty("contractIdentifier"))
                object.contractIdentifier = message.contractIdentifier;
            if (message.coopIdentifier != null && message.hasOwnProperty("coopIdentifier"))
                object.coopIdentifier = message.coopIdentifier;
            if (message.amount != null && message.hasOwnProperty("amount"))
                object.amount = options.json && !isFinite(message.amount) ? String(message.amount) : message.amount;
            if (message.rate != null && message.hasOwnProperty("rate"))
                object.rate = options.json && !isFinite(message.rate) ? String(message.rate) : message.rate;
            if (message.timeCheatsDetected != null && message.hasOwnProperty("timeCheatsDetected"))
                object.timeCheatsDetected = message.timeCheatsDetected;
            if (message.soulPower != null && message.hasOwnProperty("soulPower"))
                object.soulPower = options.json && !isFinite(message.soulPower) ? String(message.soulPower) : message.soulPower;
            if (message.pushUserId != null && message.hasOwnProperty("pushUserId"))
                object.pushUserId = message.pushUserId;
            if (message.boostTokens != null && message.hasOwnProperty("boostTokens"))
                object.boostTokens = message.boostTokens;
            if (message.eggLayingRateBuff != null && message.hasOwnProperty("eggLayingRateBuff"))
                object.eggLayingRateBuff = options.json && !isFinite(message.eggLayingRateBuff) ? String(message.eggLayingRateBuff) : message.eggLayingRateBuff;
            if (message.earningsBuff != null && message.hasOwnProperty("earningsBuff"))
                object.earningsBuff = options.json && !isFinite(message.earningsBuff) ? String(message.earningsBuff) : message.earningsBuff;
            if (message.rinfo != null && message.hasOwnProperty("rinfo"))
                object.rinfo = $root.ei.BasicRequestInfo.toObject(message.rinfo, options);
            return object;
        };

        /**
         * Converts this ContractCoopStatusUpdateRequest to JSON.
         * @function toJSON
         * @memberof ei.ContractCoopStatusUpdateRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ContractCoopStatusUpdateRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ContractCoopStatusUpdateRequest;
    })();

    ei.ContractCoopStatusUpdateResponse = (function() {

        /**
         * Properties of a ContractCoopStatusUpdateResponse.
         * @memberof ei
         * @interface IContractCoopStatusUpdateResponse
         * @property {boolean|null} [finalized] ContractCoopStatusUpdateResponse finalized
         */

        /**
         * Constructs a new ContractCoopStatusUpdateResponse.
         * @memberof ei
         * @classdesc Represents a ContractCoopStatusUpdateResponse.
         * @implements IContractCoopStatusUpdateResponse
         * @constructor
         * @param {ei.IContractCoopStatusUpdateResponse=} [properties] Properties to set
         */
        function ContractCoopStatusUpdateResponse(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ContractCoopStatusUpdateResponse finalized.
         * @member {boolean} finalized
         * @memberof ei.ContractCoopStatusUpdateResponse
         * @instance
         */
        ContractCoopStatusUpdateResponse.prototype.finalized = false;

        /**
         * Creates a new ContractCoopStatusUpdateResponse instance using the specified properties.
         * @function create
         * @memberof ei.ContractCoopStatusUpdateResponse
         * @static
         * @param {ei.IContractCoopStatusUpdateResponse=} [properties] Properties to set
         * @returns {ei.ContractCoopStatusUpdateResponse} ContractCoopStatusUpdateResponse instance
         */
        ContractCoopStatusUpdateResponse.create = function create(properties) {
            return new ContractCoopStatusUpdateResponse(properties);
        };

        /**
         * Encodes the specified ContractCoopStatusUpdateResponse message. Does not implicitly {@link ei.ContractCoopStatusUpdateResponse.verify|verify} messages.
         * @function encode
         * @memberof ei.ContractCoopStatusUpdateResponse
         * @static
         * @param {ei.IContractCoopStatusUpdateResponse} message ContractCoopStatusUpdateResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ContractCoopStatusUpdateResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.finalized != null && Object.hasOwnProperty.call(message, "finalized"))
                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.finalized);
            return writer;
        };

        /**
         * Encodes the specified ContractCoopStatusUpdateResponse message, length delimited. Does not implicitly {@link ei.ContractCoopStatusUpdateResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ei.ContractCoopStatusUpdateResponse
         * @static
         * @param {ei.IContractCoopStatusUpdateResponse} message ContractCoopStatusUpdateResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ContractCoopStatusUpdateResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ContractCoopStatusUpdateResponse message from the specified reader or buffer.
         * @function decode
         * @memberof ei.ContractCoopStatusUpdateResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ei.ContractCoopStatusUpdateResponse} ContractCoopStatusUpdateResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ContractCoopStatusUpdateResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ei.ContractCoopStatusUpdateResponse();
            while (reader.pos < end) {
                let tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.finalized = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ContractCoopStatusUpdateResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ei.ContractCoopStatusUpdateResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ei.ContractCoopStatusUpdateResponse} ContractCoopStatusUpdateResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ContractCoopStatusUpdateResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ContractCoopStatusUpdateResponse message.
         * @function verify
         * @memberof ei.ContractCoopStatusUpdateResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ContractCoopStatusUpdateResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.finalized != null && message.hasOwnProperty("finalized"))
                if (typeof message.finalized !== "boolean")
                    return "finalized: boolean expected";
            return null;
        };

        /**
         * Creates a ContractCoopStatusUpdateResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ei.ContractCoopStatusUpdateResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ei.ContractCoopStatusUpdateResponse} ContractCoopStatusUpdateResponse
         */
        ContractCoopStatusUpdateResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.ei.ContractCoopStatusUpdateResponse)
                return object;
            let message = new $root.ei.ContractCoopStatusUpdateResponse();
            if (object.finalized != null)
                message.finalized = Boolean(object.finalized);
            return message;
        };

        /**
         * Creates a plain object from a ContractCoopStatusUpdateResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ei.ContractCoopStatusUpdateResponse
         * @static
         * @param {ei.ContractCoopStatusUpdateResponse} message ContractCoopStatusUpdateResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ContractCoopStatusUpdateResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.defaults)
                object.finalized = false;
            if (message.finalized != null && message.hasOwnProperty("finalized"))
                object.finalized = message.finalized;
            return object;
        };

        /**
         * Converts this ContractCoopStatusUpdateResponse to JSON.
         * @function toJSON
         * @memberof ei.ContractCoopStatusUpdateResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ContractCoopStatusUpdateResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ContractCoopStatusUpdateResponse;
    })();

    ei.CoopBuffState = (function() {

        /**
         * Properties of a CoopBuffState.
         * @memberof ei
         * @interface ICoopBuffState
         * @property {number|null} [eggLayingRate] CoopBuffState eggLayingRate
         * @property {number|null} [earnings] CoopBuffState earnings
         * @property {number|null} [serverTimestamp] CoopBuffState serverTimestamp
         */

        /**
         * Constructs a new CoopBuffState.
         * @memberof ei
         * @classdesc Represents a CoopBuffState.
         * @implements ICoopBuffState
         * @constructor
         * @param {ei.ICoopBuffState=} [properties] Properties to set
         */
        function CoopBuffState(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CoopBuffState eggLayingRate.
         * @member {number} eggLayingRate
         * @memberof ei.CoopBuffState
         * @instance
         */
        CoopBuffState.prototype.eggLayingRate = 1;

        /**
         * CoopBuffState earnings.
         * @member {number} earnings
         * @memberof ei.CoopBuffState
         * @instance
         */
        CoopBuffState.prototype.earnings = 1;

        /**
         * CoopBuffState serverTimestamp.
         * @member {number} serverTimestamp
         * @memberof ei.CoopBuffState
         * @instance
         */
        CoopBuffState.prototype.serverTimestamp = 0;

        /**
         * Creates a new CoopBuffState instance using the specified properties.
         * @function create
         * @memberof ei.CoopBuffState
         * @static
         * @param {ei.ICoopBuffState=} [properties] Properties to set
         * @returns {ei.CoopBuffState} CoopBuffState instance
         */
        CoopBuffState.create = function create(properties) {
            return new CoopBuffState(properties);
        };

        /**
         * Encodes the specified CoopBuffState message. Does not implicitly {@link ei.CoopBuffState.verify|verify} messages.
         * @function encode
         * @memberof ei.CoopBuffState
         * @static
         * @param {ei.ICoopBuffState} message CoopBuffState message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CoopBuffState.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.eggLayingRate != null && Object.hasOwnProperty.call(message, "eggLayingRate"))
                writer.uint32(/* id 1, wireType 1 =*/9).double(message.eggLayingRate);
            if (message.earnings != null && Object.hasOwnProperty.call(message, "earnings"))
                writer.uint32(/* id 2, wireType 1 =*/17).double(message.earnings);
            if (message.serverTimestamp != null && Object.hasOwnProperty.call(message, "serverTimestamp"))
                writer.uint32(/* id 3, wireType 1 =*/25).double(message.serverTimestamp);
            return writer;
        };

        /**
         * Encodes the specified CoopBuffState message, length delimited. Does not implicitly {@link ei.CoopBuffState.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ei.CoopBuffState
         * @static
         * @param {ei.ICoopBuffState} message CoopBuffState message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CoopBuffState.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CoopBuffState message from the specified reader or buffer.
         * @function decode
         * @memberof ei.CoopBuffState
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ei.CoopBuffState} CoopBuffState
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CoopBuffState.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ei.CoopBuffState();
            while (reader.pos < end) {
                let tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.eggLayingRate = reader.double();
                    break;
                case 2:
                    message.earnings = reader.double();
                    break;
                case 3:
                    message.serverTimestamp = reader.double();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a CoopBuffState message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ei.CoopBuffState
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ei.CoopBuffState} CoopBuffState
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CoopBuffState.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CoopBuffState message.
         * @function verify
         * @memberof ei.CoopBuffState
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CoopBuffState.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.eggLayingRate != null && message.hasOwnProperty("eggLayingRate"))
                if (typeof message.eggLayingRate !== "number")
                    return "eggLayingRate: number expected";
            if (message.earnings != null && message.hasOwnProperty("earnings"))
                if (typeof message.earnings !== "number")
                    return "earnings: number expected";
            if (message.serverTimestamp != null && message.hasOwnProperty("serverTimestamp"))
                if (typeof message.serverTimestamp !== "number")
                    return "serverTimestamp: number expected";
            return null;
        };

        /**
         * Creates a CoopBuffState message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ei.CoopBuffState
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ei.CoopBuffState} CoopBuffState
         */
        CoopBuffState.fromObject = function fromObject(object) {
            if (object instanceof $root.ei.CoopBuffState)
                return object;
            let message = new $root.ei.CoopBuffState();
            if (object.eggLayingRate != null)
                message.eggLayingRate = Number(object.eggLayingRate);
            if (object.earnings != null)
                message.earnings = Number(object.earnings);
            if (object.serverTimestamp != null)
                message.serverTimestamp = Number(object.serverTimestamp);
            return message;
        };

        /**
         * Creates a plain object from a CoopBuffState message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ei.CoopBuffState
         * @static
         * @param {ei.CoopBuffState} message CoopBuffState
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CoopBuffState.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.defaults) {
                object.eggLayingRate = 1;
                object.earnings = 1;
                object.serverTimestamp = 0;
            }
            if (message.eggLayingRate != null && message.hasOwnProperty("eggLayingRate"))
                object.eggLayingRate = options.json && !isFinite(message.eggLayingRate) ? String(message.eggLayingRate) : message.eggLayingRate;
            if (message.earnings != null && message.hasOwnProperty("earnings"))
                object.earnings = options.json && !isFinite(message.earnings) ? String(message.earnings) : message.earnings;
            if (message.serverTimestamp != null && message.hasOwnProperty("serverTimestamp"))
                object.serverTimestamp = options.json && !isFinite(message.serverTimestamp) ? String(message.serverTimestamp) : message.serverTimestamp;
            return object;
        };

        /**
         * Converts this CoopBuffState to JSON.
         * @function toJSON
         * @memberof ei.CoopBuffState
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CoopBuffState.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CoopBuffState;
    })();

    ei.CoopBuffHistory = (function() {

        /**
         * Properties of a CoopBuffHistory.
         * @memberof ei
         * @interface ICoopBuffHistory
         * @property {Array.<ei.ICoopBuffState>|null} [history] CoopBuffHistory history
         */

        /**
         * Constructs a new CoopBuffHistory.
         * @memberof ei
         * @classdesc Represents a CoopBuffHistory.
         * @implements ICoopBuffHistory
         * @constructor
         * @param {ei.ICoopBuffHistory=} [properties] Properties to set
         */
        function CoopBuffHistory(properties) {
            this.history = [];
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CoopBuffHistory history.
         * @member {Array.<ei.ICoopBuffState>} history
         * @memberof ei.CoopBuffHistory
         * @instance
         */
        CoopBuffHistory.prototype.history = $util.emptyArray;

        /**
         * Creates a new CoopBuffHistory instance using the specified properties.
         * @function create
         * @memberof ei.CoopBuffHistory
         * @static
         * @param {ei.ICoopBuffHistory=} [properties] Properties to set
         * @returns {ei.CoopBuffHistory} CoopBuffHistory instance
         */
        CoopBuffHistory.create = function create(properties) {
            return new CoopBuffHistory(properties);
        };

        /**
         * Encodes the specified CoopBuffHistory message. Does not implicitly {@link ei.CoopBuffHistory.verify|verify} messages.
         * @function encode
         * @memberof ei.CoopBuffHistory
         * @static
         * @param {ei.ICoopBuffHistory} message CoopBuffHistory message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CoopBuffHistory.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.history != null && message.history.length)
                for (let i = 0; i < message.history.length; ++i)
                    $root.ei.CoopBuffState.encode(message.history[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified CoopBuffHistory message, length delimited. Does not implicitly {@link ei.CoopBuffHistory.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ei.CoopBuffHistory
         * @static
         * @param {ei.ICoopBuffHistory} message CoopBuffHistory message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CoopBuffHistory.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CoopBuffHistory message from the specified reader or buffer.
         * @function decode
         * @memberof ei.CoopBuffHistory
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ei.CoopBuffHistory} CoopBuffHistory
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CoopBuffHistory.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ei.CoopBuffHistory();
            while (reader.pos < end) {
                let tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.history && message.history.length))
                        message.history = [];
                    message.history.push($root.ei.CoopBuffState.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a CoopBuffHistory message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ei.CoopBuffHistory
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ei.CoopBuffHistory} CoopBuffHistory
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CoopBuffHistory.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CoopBuffHistory message.
         * @function verify
         * @memberof ei.CoopBuffHistory
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CoopBuffHistory.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.history != null && message.hasOwnProperty("history")) {
                if (!Array.isArray(message.history))
                    return "history: array expected";
                for (let i = 0; i < message.history.length; ++i) {
                    let error = $root.ei.CoopBuffState.verify(message.history[i]);
                    if (error)
                        return "history." + error;
                }
            }
            return null;
        };

        /**
         * Creates a CoopBuffHistory message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ei.CoopBuffHistory
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ei.CoopBuffHistory} CoopBuffHistory
         */
        CoopBuffHistory.fromObject = function fromObject(object) {
            if (object instanceof $root.ei.CoopBuffHistory)
                return object;
            let message = new $root.ei.CoopBuffHistory();
            if (object.history) {
                if (!Array.isArray(object.history))
                    throw TypeError(".ei.CoopBuffHistory.history: array expected");
                message.history = [];
                for (let i = 0; i < object.history.length; ++i) {
                    if (typeof object.history[i] !== "object")
                        throw TypeError(".ei.CoopBuffHistory.history: object expected");
                    message.history[i] = $root.ei.CoopBuffState.fromObject(object.history[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a CoopBuffHistory message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ei.CoopBuffHistory
         * @static
         * @param {ei.CoopBuffHistory} message CoopBuffHistory
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CoopBuffHistory.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.arrays || options.defaults)
                object.history = [];
            if (message.history && message.history.length) {
                object.history = [];
                for (let j = 0; j < message.history.length; ++j)
                    object.history[j] = $root.ei.CoopBuffState.toObject(message.history[j], options);
            }
            return object;
        };

        /**
         * Converts this CoopBuffHistory to JSON.
         * @function toJSON
         * @memberof ei.CoopBuffHistory
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CoopBuffHistory.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CoopBuffHistory;
    })();

    ei.UserDataInfoRequest = (function() {

        /**
         * Properties of a UserDataInfoRequest.
         * @memberof ei
         * @interface IUserDataInfoRequest
         * @property {ei.IBasicRequestInfo|null} [rinfo] UserDataInfoRequest rinfo
         * @property {string|null} [userId] UserDataInfoRequest userId
         * @property {string|null} [deviceId] UserDataInfoRequest deviceId
         * @property {number|Long|null} [backupChecksum] UserDataInfoRequest backupChecksum
         */

        /**
         * Constructs a new UserDataInfoRequest.
         * @memberof ei
         * @classdesc Represents a UserDataInfoRequest.
         * @implements IUserDataInfoRequest
         * @constructor
         * @param {ei.IUserDataInfoRequest=} [properties] Properties to set
         */
        function UserDataInfoRequest(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * UserDataInfoRequest rinfo.
         * @member {ei.IBasicRequestInfo|null|undefined} rinfo
         * @memberof ei.UserDataInfoRequest
         * @instance
         */
        UserDataInfoRequest.prototype.rinfo = null;

        /**
         * UserDataInfoRequest userId.
         * @member {string} userId
         * @memberof ei.UserDataInfoRequest
         * @instance
         */
        UserDataInfoRequest.prototype.userId = "";

        /**
         * UserDataInfoRequest deviceId.
         * @member {string} deviceId
         * @memberof ei.UserDataInfoRequest
         * @instance
         */
        UserDataInfoRequest.prototype.deviceId = "";

        /**
         * UserDataInfoRequest backupChecksum.
         * @member {number|Long} backupChecksum
         * @memberof ei.UserDataInfoRequest
         * @instance
         */
        UserDataInfoRequest.prototype.backupChecksum = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new UserDataInfoRequest instance using the specified properties.
         * @function create
         * @memberof ei.UserDataInfoRequest
         * @static
         * @param {ei.IUserDataInfoRequest=} [properties] Properties to set
         * @returns {ei.UserDataInfoRequest} UserDataInfoRequest instance
         */
        UserDataInfoRequest.create = function create(properties) {
            return new UserDataInfoRequest(properties);
        };

        /**
         * Encodes the specified UserDataInfoRequest message. Does not implicitly {@link ei.UserDataInfoRequest.verify|verify} messages.
         * @function encode
         * @memberof ei.UserDataInfoRequest
         * @static
         * @param {ei.IUserDataInfoRequest} message UserDataInfoRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        UserDataInfoRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userId != null && Object.hasOwnProperty.call(message, "userId"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);
            if (message.deviceId != null && Object.hasOwnProperty.call(message, "deviceId"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.deviceId);
            if (message.backupChecksum != null && Object.hasOwnProperty.call(message, "backupChecksum"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.backupChecksum);
            if (message.rinfo != null && Object.hasOwnProperty.call(message, "rinfo"))
                $root.ei.BasicRequestInfo.encode(message.rinfo, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified UserDataInfoRequest message, length delimited. Does not implicitly {@link ei.UserDataInfoRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ei.UserDataInfoRequest
         * @static
         * @param {ei.IUserDataInfoRequest} message UserDataInfoRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        UserDataInfoRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a UserDataInfoRequest message from the specified reader or buffer.
         * @function decode
         * @memberof ei.UserDataInfoRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ei.UserDataInfoRequest} UserDataInfoRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        UserDataInfoRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ei.UserDataInfoRequest();
            while (reader.pos < end) {
                let tag = reader.uint32();
                switch (tag >>> 3) {
                case 4:
                    message.rinfo = $root.ei.BasicRequestInfo.decode(reader, reader.uint32());
                    break;
                case 1:
                    message.userId = reader.string();
                    break;
                case 2:
                    message.deviceId = reader.string();
                    break;
                case 3:
                    message.backupChecksum = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a UserDataInfoRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ei.UserDataInfoRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ei.UserDataInfoRequest} UserDataInfoRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        UserDataInfoRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a UserDataInfoRequest message.
         * @function verify
         * @memberof ei.UserDataInfoRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        UserDataInfoRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.rinfo != null && message.hasOwnProperty("rinfo")) {
                let error = $root.ei.BasicRequestInfo.verify(message.rinfo);
                if (error)
                    return "rinfo." + error;
            }
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isString(message.userId))
                    return "userId: string expected";
            if (message.deviceId != null && message.hasOwnProperty("deviceId"))
                if (!$util.isString(message.deviceId))
                    return "deviceId: string expected";
            if (message.backupChecksum != null && message.hasOwnProperty("backupChecksum"))
                if (!$util.isInteger(message.backupChecksum) && !(message.backupChecksum && $util.isInteger(message.backupChecksum.low) && $util.isInteger(message.backupChecksum.high)))
                    return "backupChecksum: integer|Long expected";
            return null;
        };

        /**
         * Creates a UserDataInfoRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ei.UserDataInfoRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ei.UserDataInfoRequest} UserDataInfoRequest
         */
        UserDataInfoRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.ei.UserDataInfoRequest)
                return object;
            let message = new $root.ei.UserDataInfoRequest();
            if (object.rinfo != null) {
                if (typeof object.rinfo !== "object")
                    throw TypeError(".ei.UserDataInfoRequest.rinfo: object expected");
                message.rinfo = $root.ei.BasicRequestInfo.fromObject(object.rinfo);
            }
            if (object.userId != null)
                message.userId = String(object.userId);
            if (object.deviceId != null)
                message.deviceId = String(object.deviceId);
            if (object.backupChecksum != null)
                if ($util.Long)
                    (message.backupChecksum = $util.Long.fromValue(object.backupChecksum)).unsigned = true;
                else if (typeof object.backupChecksum === "string")
                    message.backupChecksum = parseInt(object.backupChecksum, 10);
                else if (typeof object.backupChecksum === "number")
                    message.backupChecksum = object.backupChecksum;
                else if (typeof object.backupChecksum === "object")
                    message.backupChecksum = new $util.LongBits(object.backupChecksum.low >>> 0, object.backupChecksum.high >>> 0).toNumber(true);
            return message;
        };

        /**
         * Creates a plain object from a UserDataInfoRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ei.UserDataInfoRequest
         * @static
         * @param {ei.UserDataInfoRequest} message UserDataInfoRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        UserDataInfoRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.defaults) {
                object.userId = "";
                object.deviceId = "";
                if ($util.Long) {
                    let long = new $util.Long(0, 0, true);
                    object.backupChecksum = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.backupChecksum = options.longs === String ? "0" : 0;
                object.rinfo = null;
            }
            if (message.userId != null && message.hasOwnProperty("userId"))
                object.userId = message.userId;
            if (message.deviceId != null && message.hasOwnProperty("deviceId"))
                object.deviceId = message.deviceId;
            if (message.backupChecksum != null && message.hasOwnProperty("backupChecksum"))
                if (typeof message.backupChecksum === "number")
                    object.backupChecksum = options.longs === String ? String(message.backupChecksum) : message.backupChecksum;
                else
                    object.backupChecksum = options.longs === String ? $util.Long.prototype.toString.call(message.backupChecksum) : options.longs === Number ? new $util.LongBits(message.backupChecksum.low >>> 0, message.backupChecksum.high >>> 0).toNumber(true) : message.backupChecksum;
            if (message.rinfo != null && message.hasOwnProperty("rinfo"))
                object.rinfo = $root.ei.BasicRequestInfo.toObject(message.rinfo, options);
            return object;
        };

        /**
         * Converts this UserDataInfoRequest to JSON.
         * @function toJSON
         * @memberof ei.UserDataInfoRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        UserDataInfoRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return UserDataInfoRequest;
    })();

    ei.UserDataInfoResponse = (function() {

        /**
         * Properties of a UserDataInfoResponse.
         * @memberof ei
         * @interface IUserDataInfoResponse
         * @property {number|Long|null} [backupChecksum] UserDataInfoResponse backupChecksum
         * @property {number|null} [backupTotalCash] UserDataInfoResponse backupTotalCash
         * @property {Array.<string>|null} [coopMemberships] UserDataInfoResponse coopMemberships
         */

        /**
         * Constructs a new UserDataInfoResponse.
         * @memberof ei
         * @classdesc Represents a UserDataInfoResponse.
         * @implements IUserDataInfoResponse
         * @constructor
         * @param {ei.IUserDataInfoResponse=} [properties] Properties to set
         */
        function UserDataInfoResponse(properties) {
            this.coopMemberships = [];
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * UserDataInfoResponse backupChecksum.
         * @member {number|Long} backupChecksum
         * @memberof ei.UserDataInfoResponse
         * @instance
         */
        UserDataInfoResponse.prototype.backupChecksum = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * UserDataInfoResponse backupTotalCash.
         * @member {number} backupTotalCash
         * @memberof ei.UserDataInfoResponse
         * @instance
         */
        UserDataInfoResponse.prototype.backupTotalCash = 0;

        /**
         * UserDataInfoResponse coopMemberships.
         * @member {Array.<string>} coopMemberships
         * @memberof ei.UserDataInfoResponse
         * @instance
         */
        UserDataInfoResponse.prototype.coopMemberships = $util.emptyArray;

        /**
         * Creates a new UserDataInfoResponse instance using the specified properties.
         * @function create
         * @memberof ei.UserDataInfoResponse
         * @static
         * @param {ei.IUserDataInfoResponse=} [properties] Properties to set
         * @returns {ei.UserDataInfoResponse} UserDataInfoResponse instance
         */
        UserDataInfoResponse.create = function create(properties) {
            return new UserDataInfoResponse(properties);
        };

        /**
         * Encodes the specified UserDataInfoResponse message. Does not implicitly {@link ei.UserDataInfoResponse.verify|verify} messages.
         * @function encode
         * @memberof ei.UserDataInfoResponse
         * @static
         * @param {ei.IUserDataInfoResponse} message UserDataInfoResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        UserDataInfoResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.backupChecksum != null && Object.hasOwnProperty.call(message, "backupChecksum"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.backupChecksum);
            if (message.backupTotalCash != null && Object.hasOwnProperty.call(message, "backupTotalCash"))
                writer.uint32(/* id 2, wireType 1 =*/17).double(message.backupTotalCash);
            if (message.coopMemberships != null && message.coopMemberships.length)
                for (let i = 0; i < message.coopMemberships.length; ++i)
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.coopMemberships[i]);
            return writer;
        };

        /**
         * Encodes the specified UserDataInfoResponse message, length delimited. Does not implicitly {@link ei.UserDataInfoResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ei.UserDataInfoResponse
         * @static
         * @param {ei.IUserDataInfoResponse} message UserDataInfoResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        UserDataInfoResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a UserDataInfoResponse message from the specified reader or buffer.
         * @function decode
         * @memberof ei.UserDataInfoResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ei.UserDataInfoResponse} UserDataInfoResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        UserDataInfoResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ei.UserDataInfoResponse();
            while (reader.pos < end) {
                let tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.backupChecksum = reader.uint64();
                    break;
                case 2:
                    message.backupTotalCash = reader.double();
                    break;
                case 3:
                    if (!(message.coopMemberships && message.coopMemberships.length))
                        message.coopMemberships = [];
                    message.coopMemberships.push(reader.string());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a UserDataInfoResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ei.UserDataInfoResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ei.UserDataInfoResponse} UserDataInfoResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        UserDataInfoResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a UserDataInfoResponse message.
         * @function verify
         * @memberof ei.UserDataInfoResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        UserDataInfoResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.backupChecksum != null && message.hasOwnProperty("backupChecksum"))
                if (!$util.isInteger(message.backupChecksum) && !(message.backupChecksum && $util.isInteger(message.backupChecksum.low) && $util.isInteger(message.backupChecksum.high)))
                    return "backupChecksum: integer|Long expected";
            if (message.backupTotalCash != null && message.hasOwnProperty("backupTotalCash"))
                if (typeof message.backupTotalCash !== "number")
                    return "backupTotalCash: number expected";
            if (message.coopMemberships != null && message.hasOwnProperty("coopMemberships")) {
                if (!Array.isArray(message.coopMemberships))
                    return "coopMemberships: array expected";
                for (let i = 0; i < message.coopMemberships.length; ++i)
                    if (!$util.isString(message.coopMemberships[i]))
                        return "coopMemberships: string[] expected";
            }
            return null;
        };

        /**
         * Creates a UserDataInfoResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ei.UserDataInfoResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ei.UserDataInfoResponse} UserDataInfoResponse
         */
        UserDataInfoResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.ei.UserDataInfoResponse)
                return object;
            let message = new $root.ei.UserDataInfoResponse();
            if (object.backupChecksum != null)
                if ($util.Long)
                    (message.backupChecksum = $util.Long.fromValue(object.backupChecksum)).unsigned = true;
                else if (typeof object.backupChecksum === "string")
                    message.backupChecksum = parseInt(object.backupChecksum, 10);
                else if (typeof object.backupChecksum === "number")
                    message.backupChecksum = object.backupChecksum;
                else if (typeof object.backupChecksum === "object")
                    message.backupChecksum = new $util.LongBits(object.backupChecksum.low >>> 0, object.backupChecksum.high >>> 0).toNumber(true);
            if (object.backupTotalCash != null)
                message.backupTotalCash = Number(object.backupTotalCash);
            if (object.coopMemberships) {
                if (!Array.isArray(object.coopMemberships))
                    throw TypeError(".ei.UserDataInfoResponse.coopMemberships: array expected");
                message.coopMemberships = [];
                for (let i = 0; i < object.coopMemberships.length; ++i)
                    message.coopMemberships[i] = String(object.coopMemberships[i]);
            }
            return message;
        };

        /**
         * Creates a plain object from a UserDataInfoResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ei.UserDataInfoResponse
         * @static
         * @param {ei.UserDataInfoResponse} message UserDataInfoResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        UserDataInfoResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.arrays || options.defaults)
                object.coopMemberships = [];
            if (options.defaults) {
                if ($util.Long) {
                    let long = new $util.Long(0, 0, true);
                    object.backupChecksum = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.backupChecksum = options.longs === String ? "0" : 0;
                object.backupTotalCash = 0;
            }
            if (message.backupChecksum != null && message.hasOwnProperty("backupChecksum"))
                if (typeof message.backupChecksum === "number")
                    object.backupChecksum = options.longs === String ? String(message.backupChecksum) : message.backupChecksum;
                else
                    object.backupChecksum = options.longs === String ? $util.Long.prototype.toString.call(message.backupChecksum) : options.longs === Number ? new $util.LongBits(message.backupChecksum.low >>> 0, message.backupChecksum.high >>> 0).toNumber(true) : message.backupChecksum;
            if (message.backupTotalCash != null && message.hasOwnProperty("backupTotalCash"))
                object.backupTotalCash = options.json && !isFinite(message.backupTotalCash) ? String(message.backupTotalCash) : message.backupTotalCash;
            if (message.coopMemberships && message.coopMemberships.length) {
                object.coopMemberships = [];
                for (let j = 0; j < message.coopMemberships.length; ++j)
                    object.coopMemberships[j] = message.coopMemberships[j];
            }
            return object;
        };

        /**
         * Converts this UserDataInfoResponse to JSON.
         * @function toJSON
         * @memberof ei.UserDataInfoResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        UserDataInfoResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return UserDataInfoResponse;
    })();

    ei.ClearAllUserDataRequest = (function() {

        /**
         * Properties of a ClearAllUserDataRequest.
         * @memberof ei
         * @interface IClearAllUserDataRequest
         * @property {ei.IBasicRequestInfo|null} [rinfo] ClearAllUserDataRequest rinfo
         * @property {string|null} [userId] ClearAllUserDataRequest userId
         * @property {string|null} [deviceId] ClearAllUserDataRequest deviceId
         * @property {number|Long|null} [backupChecksum] ClearAllUserDataRequest backupChecksum
         */

        /**
         * Constructs a new ClearAllUserDataRequest.
         * @memberof ei
         * @classdesc Represents a ClearAllUserDataRequest.
         * @implements IClearAllUserDataRequest
         * @constructor
         * @param {ei.IClearAllUserDataRequest=} [properties] Properties to set
         */
        function ClearAllUserDataRequest(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ClearAllUserDataRequest rinfo.
         * @member {ei.IBasicRequestInfo|null|undefined} rinfo
         * @memberof ei.ClearAllUserDataRequest
         * @instance
         */
        ClearAllUserDataRequest.prototype.rinfo = null;

        /**
         * ClearAllUserDataRequest userId.
         * @member {string} userId
         * @memberof ei.ClearAllUserDataRequest
         * @instance
         */
        ClearAllUserDataRequest.prototype.userId = "";

        /**
         * ClearAllUserDataRequest deviceId.
         * @member {string} deviceId
         * @memberof ei.ClearAllUserDataRequest
         * @instance
         */
        ClearAllUserDataRequest.prototype.deviceId = "";

        /**
         * ClearAllUserDataRequest backupChecksum.
         * @member {number|Long} backupChecksum
         * @memberof ei.ClearAllUserDataRequest
         * @instance
         */
        ClearAllUserDataRequest.prototype.backupChecksum = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new ClearAllUserDataRequest instance using the specified properties.
         * @function create
         * @memberof ei.ClearAllUserDataRequest
         * @static
         * @param {ei.IClearAllUserDataRequest=} [properties] Properties to set
         * @returns {ei.ClearAllUserDataRequest} ClearAllUserDataRequest instance
         */
        ClearAllUserDataRequest.create = function create(properties) {
            return new ClearAllUserDataRequest(properties);
        };

        /**
         * Encodes the specified ClearAllUserDataRequest message. Does not implicitly {@link ei.ClearAllUserDataRequest.verify|verify} messages.
         * @function encode
         * @memberof ei.ClearAllUserDataRequest
         * @static
         * @param {ei.IClearAllUserDataRequest} message ClearAllUserDataRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ClearAllUserDataRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userId != null && Object.hasOwnProperty.call(message, "userId"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);
            if (message.deviceId != null && Object.hasOwnProperty.call(message, "deviceId"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.deviceId);
            if (message.backupChecksum != null && Object.hasOwnProperty.call(message, "backupChecksum"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.backupChecksum);
            if (message.rinfo != null && Object.hasOwnProperty.call(message, "rinfo"))
                $root.ei.BasicRequestInfo.encode(message.rinfo, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ClearAllUserDataRequest message, length delimited. Does not implicitly {@link ei.ClearAllUserDataRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ei.ClearAllUserDataRequest
         * @static
         * @param {ei.IClearAllUserDataRequest} message ClearAllUserDataRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ClearAllUserDataRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ClearAllUserDataRequest message from the specified reader or buffer.
         * @function decode
         * @memberof ei.ClearAllUserDataRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ei.ClearAllUserDataRequest} ClearAllUserDataRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ClearAllUserDataRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ei.ClearAllUserDataRequest();
            while (reader.pos < end) {
                let tag = reader.uint32();
                switch (tag >>> 3) {
                case 4:
                    message.rinfo = $root.ei.BasicRequestInfo.decode(reader, reader.uint32());
                    break;
                case 1:
                    message.userId = reader.string();
                    break;
                case 2:
                    message.deviceId = reader.string();
                    break;
                case 3:
                    message.backupChecksum = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ClearAllUserDataRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ei.ClearAllUserDataRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ei.ClearAllUserDataRequest} ClearAllUserDataRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ClearAllUserDataRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ClearAllUserDataRequest message.
         * @function verify
         * @memberof ei.ClearAllUserDataRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ClearAllUserDataRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.rinfo != null && message.hasOwnProperty("rinfo")) {
                let error = $root.ei.BasicRequestInfo.verify(message.rinfo);
                if (error)
                    return "rinfo." + error;
            }
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isString(message.userId))
                    return "userId: string expected";
            if (message.deviceId != null && message.hasOwnProperty("deviceId"))
                if (!$util.isString(message.deviceId))
                    return "deviceId: string expected";
            if (message.backupChecksum != null && message.hasOwnProperty("backupChecksum"))
                if (!$util.isInteger(message.backupChecksum) && !(message.backupChecksum && $util.isInteger(message.backupChecksum.low) && $util.isInteger(message.backupChecksum.high)))
                    return "backupChecksum: integer|Long expected";
            return null;
        };

        /**
         * Creates a ClearAllUserDataRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ei.ClearAllUserDataRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ei.ClearAllUserDataRequest} ClearAllUserDataRequest
         */
        ClearAllUserDataRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.ei.ClearAllUserDataRequest)
                return object;
            let message = new $root.ei.ClearAllUserDataRequest();
            if (object.rinfo != null) {
                if (typeof object.rinfo !== "object")
                    throw TypeError(".ei.ClearAllUserDataRequest.rinfo: object expected");
                message.rinfo = $root.ei.BasicRequestInfo.fromObject(object.rinfo);
            }
            if (object.userId != null)
                message.userId = String(object.userId);
            if (object.deviceId != null)
                message.deviceId = String(object.deviceId);
            if (object.backupChecksum != null)
                if ($util.Long)
                    (message.backupChecksum = $util.Long.fromValue(object.backupChecksum)).unsigned = true;
                else if (typeof object.backupChecksum === "string")
                    message.backupChecksum = parseInt(object.backupChecksum, 10);
                else if (typeof object.backupChecksum === "number")
                    message.backupChecksum = object.backupChecksum;
                else if (typeof object.backupChecksum === "object")
                    message.backupChecksum = new $util.LongBits(object.backupChecksum.low >>> 0, object.backupChecksum.high >>> 0).toNumber(true);
            return message;
        };

        /**
         * Creates a plain object from a ClearAllUserDataRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ei.ClearAllUserDataRequest
         * @static
         * @param {ei.ClearAllUserDataRequest} message ClearAllUserDataRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ClearAllUserDataRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.defaults) {
                object.userId = "";
                object.deviceId = "";
                if ($util.Long) {
                    let long = new $util.Long(0, 0, true);
                    object.backupChecksum = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.backupChecksum = options.longs === String ? "0" : 0;
                object.rinfo = null;
            }
            if (message.userId != null && message.hasOwnProperty("userId"))
                object.userId = message.userId;
            if (message.deviceId != null && message.hasOwnProperty("deviceId"))
                object.deviceId = message.deviceId;
            if (message.backupChecksum != null && message.hasOwnProperty("backupChecksum"))
                if (typeof message.backupChecksum === "number")
                    object.backupChecksum = options.longs === String ? String(message.backupChecksum) : message.backupChecksum;
                else
                    object.backupChecksum = options.longs === String ? $util.Long.prototype.toString.call(message.backupChecksum) : options.longs === Number ? new $util.LongBits(message.backupChecksum.low >>> 0, message.backupChecksum.high >>> 0).toNumber(true) : message.backupChecksum;
            if (message.rinfo != null && message.hasOwnProperty("rinfo"))
                object.rinfo = $root.ei.BasicRequestInfo.toObject(message.rinfo, options);
            return object;
        };

        /**
         * Converts this ClearAllUserDataRequest to JSON.
         * @function toJSON
         * @memberof ei.ClearAllUserDataRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ClearAllUserDataRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ClearAllUserDataRequest;
    })();

    ei.ServerGift = (function() {

        /**
         * Properties of a ServerGift.
         * @memberof ei
         * @interface IServerGift
         * @property {string|null} [userId] ServerGift userId
         * @property {ei.RewardType|null} [rewardType] ServerGift rewardType
         * @property {string|null} [rewardSubType] ServerGift rewardSubType
         * @property {number|null} [rewardAmount] ServerGift rewardAmount
         */

        /**
         * Constructs a new ServerGift.
         * @memberof ei
         * @classdesc Represents a ServerGift.
         * @implements IServerGift
         * @constructor
         * @param {ei.IServerGift=} [properties] Properties to set
         */
        function ServerGift(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ServerGift userId.
         * @member {string} userId
         * @memberof ei.ServerGift
         * @instance
         */
        ServerGift.prototype.userId = "";

        /**
         * ServerGift rewardType.
         * @member {ei.RewardType} rewardType
         * @memberof ei.ServerGift
         * @instance
         */
        ServerGift.prototype.rewardType = 1;

        /**
         * ServerGift rewardSubType.
         * @member {string} rewardSubType
         * @memberof ei.ServerGift
         * @instance
         */
        ServerGift.prototype.rewardSubType = "";

        /**
         * ServerGift rewardAmount.
         * @member {number} rewardAmount
         * @memberof ei.ServerGift
         * @instance
         */
        ServerGift.prototype.rewardAmount = 0;

        /**
         * Creates a new ServerGift instance using the specified properties.
         * @function create
         * @memberof ei.ServerGift
         * @static
         * @param {ei.IServerGift=} [properties] Properties to set
         * @returns {ei.ServerGift} ServerGift instance
         */
        ServerGift.create = function create(properties) {
            return new ServerGift(properties);
        };

        /**
         * Encodes the specified ServerGift message. Does not implicitly {@link ei.ServerGift.verify|verify} messages.
         * @function encode
         * @memberof ei.ServerGift
         * @static
         * @param {ei.IServerGift} message ServerGift message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ServerGift.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userId != null && Object.hasOwnProperty.call(message, "userId"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);
            if (message.rewardType != null && Object.hasOwnProperty.call(message, "rewardType"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.rewardType);
            if (message.rewardSubType != null && Object.hasOwnProperty.call(message, "rewardSubType"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.rewardSubType);
            if (message.rewardAmount != null && Object.hasOwnProperty.call(message, "rewardAmount"))
                writer.uint32(/* id 5, wireType 1 =*/41).double(message.rewardAmount);
            return writer;
        };

        /**
         * Encodes the specified ServerGift message, length delimited. Does not implicitly {@link ei.ServerGift.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ei.ServerGift
         * @static
         * @param {ei.IServerGift} message ServerGift message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ServerGift.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ServerGift message from the specified reader or buffer.
         * @function decode
         * @memberof ei.ServerGift
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ei.ServerGift} ServerGift
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ServerGift.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ei.ServerGift();
            while (reader.pos < end) {
                let tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.userId = reader.string();
                    break;
                case 3:
                    message.rewardType = reader.int32();
                    break;
                case 4:
                    message.rewardSubType = reader.string();
                    break;
                case 5:
                    message.rewardAmount = reader.double();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ServerGift message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ei.ServerGift
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ei.ServerGift} ServerGift
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ServerGift.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ServerGift message.
         * @function verify
         * @memberof ei.ServerGift
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ServerGift.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isString(message.userId))
                    return "userId: string expected";
            if (message.rewardType != null && message.hasOwnProperty("rewardType"))
                switch (message.rewardType) {
                default:
                    return "rewardType: enum value expected";
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                case 100:
                    break;
                }
            if (message.rewardSubType != null && message.hasOwnProperty("rewardSubType"))
                if (!$util.isString(message.rewardSubType))
                    return "rewardSubType: string expected";
            if (message.rewardAmount != null && message.hasOwnProperty("rewardAmount"))
                if (typeof message.rewardAmount !== "number")
                    return "rewardAmount: number expected";
            return null;
        };

        /**
         * Creates a ServerGift message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ei.ServerGift
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ei.ServerGift} ServerGift
         */
        ServerGift.fromObject = function fromObject(object) {
            if (object instanceof $root.ei.ServerGift)
                return object;
            let message = new $root.ei.ServerGift();
            if (object.userId != null)
                message.userId = String(object.userId);
            switch (object.rewardType) {
            case "CASH":
            case 1:
                message.rewardType = 1;
                break;
            case "GOLD":
            case 2:
                message.rewardType = 2;
                break;
            case "SOUL_EGGS":
            case 3:
                message.rewardType = 3;
                break;
            case "EGGS_OF_PROPHECY":
            case 4:
                message.rewardType = 4;
                break;
            case "EPIC_RESEARCH_ITEM":
            case 5:
                message.rewardType = 5;
                break;
            case "PIGGY_FILL":
            case 6:
                message.rewardType = 6;
                break;
            case "PIGGY_MULTIPLIER":
            case 7:
                message.rewardType = 7;
                break;
            case "PIGGY_LEVEL_BUMP":
            case 8:
                message.rewardType = 8;
                break;
            case "BOOST":
            case 9:
                message.rewardType = 9;
                break;
            case "BOOST_TOKEN":
            case 10:
                message.rewardType = 10;
                break;
            case "UNKNOWN_REWARD":
            case 100:
                message.rewardType = 100;
                break;
            }
            if (object.rewardSubType != null)
                message.rewardSubType = String(object.rewardSubType);
            if (object.rewardAmount != null)
                message.rewardAmount = Number(object.rewardAmount);
            return message;
        };

        /**
         * Creates a plain object from a ServerGift message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ei.ServerGift
         * @static
         * @param {ei.ServerGift} message ServerGift
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ServerGift.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.defaults) {
                object.userId = "";
                object.rewardType = options.enums === String ? "CASH" : 1;
                object.rewardSubType = "";
                object.rewardAmount = 0;
            }
            if (message.userId != null && message.hasOwnProperty("userId"))
                object.userId = message.userId;
            if (message.rewardType != null && message.hasOwnProperty("rewardType"))
                object.rewardType = options.enums === String ? $root.ei.RewardType[message.rewardType] : message.rewardType;
            if (message.rewardSubType != null && message.hasOwnProperty("rewardSubType"))
                object.rewardSubType = message.rewardSubType;
            if (message.rewardAmount != null && message.hasOwnProperty("rewardAmount"))
                object.rewardAmount = options.json && !isFinite(message.rewardAmount) ? String(message.rewardAmount) : message.rewardAmount;
            return object;
        };

        /**
         * Converts this ServerGift to JSON.
         * @function toJSON
         * @memberof ei.ServerGift
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ServerGift.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ServerGift;
    })();

    ei.LiveConfig = (function() {

        /**
         * Properties of a LiveConfig.
         * @memberof ei
         * @interface ILiveConfig
         * @property {string|null} [configId] LiveConfig configId
         * @property {ei.LiveConfig.IBoostsConfig|null} [boostsConfig] LiveConfig boostsConfig
         */

        /**
         * Constructs a new LiveConfig.
         * @memberof ei
         * @classdesc Represents a LiveConfig.
         * @implements ILiveConfig
         * @constructor
         * @param {ei.ILiveConfig=} [properties] Properties to set
         */
        function LiveConfig(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * LiveConfig configId.
         * @member {string} configId
         * @memberof ei.LiveConfig
         * @instance
         */
        LiveConfig.prototype.configId = "";

        /**
         * LiveConfig boostsConfig.
         * @member {ei.LiveConfig.IBoostsConfig|null|undefined} boostsConfig
         * @memberof ei.LiveConfig
         * @instance
         */
        LiveConfig.prototype.boostsConfig = null;

        /**
         * Creates a new LiveConfig instance using the specified properties.
         * @function create
         * @memberof ei.LiveConfig
         * @static
         * @param {ei.ILiveConfig=} [properties] Properties to set
         * @returns {ei.LiveConfig} LiveConfig instance
         */
        LiveConfig.create = function create(properties) {
            return new LiveConfig(properties);
        };

        /**
         * Encodes the specified LiveConfig message. Does not implicitly {@link ei.LiveConfig.verify|verify} messages.
         * @function encode
         * @memberof ei.LiveConfig
         * @static
         * @param {ei.ILiveConfig} message LiveConfig message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        LiveConfig.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.configId != null && Object.hasOwnProperty.call(message, "configId"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.configId);
            if (message.boostsConfig != null && Object.hasOwnProperty.call(message, "boostsConfig"))
                $root.ei.LiveConfig.BoostsConfig.encode(message.boostsConfig, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified LiveConfig message, length delimited. Does not implicitly {@link ei.LiveConfig.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ei.LiveConfig
         * @static
         * @param {ei.ILiveConfig} message LiveConfig message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        LiveConfig.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a LiveConfig message from the specified reader or buffer.
         * @function decode
         * @memberof ei.LiveConfig
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ei.LiveConfig} LiveConfig
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        LiveConfig.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ei.LiveConfig();
            while (reader.pos < end) {
                let tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.configId = reader.string();
                    break;
                case 2:
                    message.boostsConfig = $root.ei.LiveConfig.BoostsConfig.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a LiveConfig message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ei.LiveConfig
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ei.LiveConfig} LiveConfig
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        LiveConfig.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a LiveConfig message.
         * @function verify
         * @memberof ei.LiveConfig
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        LiveConfig.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.configId != null && message.hasOwnProperty("configId"))
                if (!$util.isString(message.configId))
                    return "configId: string expected";
            if (message.boostsConfig != null && message.hasOwnProperty("boostsConfig")) {
                let error = $root.ei.LiveConfig.BoostsConfig.verify(message.boostsConfig);
                if (error)
                    return "boostsConfig." + error;
            }
            return null;
        };

        /**
         * Creates a LiveConfig message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ei.LiveConfig
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ei.LiveConfig} LiveConfig
         */
        LiveConfig.fromObject = function fromObject(object) {
            if (object instanceof $root.ei.LiveConfig)
                return object;
            let message = new $root.ei.LiveConfig();
            if (object.configId != null)
                message.configId = String(object.configId);
            if (object.boostsConfig != null) {
                if (typeof object.boostsConfig !== "object")
                    throw TypeError(".ei.LiveConfig.boostsConfig: object expected");
                message.boostsConfig = $root.ei.LiveConfig.BoostsConfig.fromObject(object.boostsConfig);
            }
            return message;
        };

        /**
         * Creates a plain object from a LiveConfig message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ei.LiveConfig
         * @static
         * @param {ei.LiveConfig} message LiveConfig
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        LiveConfig.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.defaults) {
                object.configId = "";
                object.boostsConfig = null;
            }
            if (message.configId != null && message.hasOwnProperty("configId"))
                object.configId = message.configId;
            if (message.boostsConfig != null && message.hasOwnProperty("boostsConfig"))
                object.boostsConfig = $root.ei.LiveConfig.BoostsConfig.toObject(message.boostsConfig, options);
            return object;
        };

        /**
         * Converts this LiveConfig to JSON.
         * @function toJSON
         * @memberof ei.LiveConfig
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        LiveConfig.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        LiveConfig.BoostsConfig = (function() {

            /**
             * Properties of a BoostsConfig.
             * @memberof ei.LiveConfig
             * @interface IBoostsConfig
             * @property {Array.<ei.LiveConfig.BoostsConfig.IItemConfig>|null} [itemConfigs] BoostsConfig itemConfigs
             */

            /**
             * Constructs a new BoostsConfig.
             * @memberof ei.LiveConfig
             * @classdesc Represents a BoostsConfig.
             * @implements IBoostsConfig
             * @constructor
             * @param {ei.LiveConfig.IBoostsConfig=} [properties] Properties to set
             */
            function BoostsConfig(properties) {
                this.itemConfigs = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * BoostsConfig itemConfigs.
             * @member {Array.<ei.LiveConfig.BoostsConfig.IItemConfig>} itemConfigs
             * @memberof ei.LiveConfig.BoostsConfig
             * @instance
             */
            BoostsConfig.prototype.itemConfigs = $util.emptyArray;

            /**
             * Creates a new BoostsConfig instance using the specified properties.
             * @function create
             * @memberof ei.LiveConfig.BoostsConfig
             * @static
             * @param {ei.LiveConfig.IBoostsConfig=} [properties] Properties to set
             * @returns {ei.LiveConfig.BoostsConfig} BoostsConfig instance
             */
            BoostsConfig.create = function create(properties) {
                return new BoostsConfig(properties);
            };

            /**
             * Encodes the specified BoostsConfig message. Does not implicitly {@link ei.LiveConfig.BoostsConfig.verify|verify} messages.
             * @function encode
             * @memberof ei.LiveConfig.BoostsConfig
             * @static
             * @param {ei.LiveConfig.IBoostsConfig} message BoostsConfig message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BoostsConfig.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.itemConfigs != null && message.itemConfigs.length)
                    for (let i = 0; i < message.itemConfigs.length; ++i)
                        $root.ei.LiveConfig.BoostsConfig.ItemConfig.encode(message.itemConfigs[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified BoostsConfig message, length delimited. Does not implicitly {@link ei.LiveConfig.BoostsConfig.verify|verify} messages.
             * @function encodeDelimited
             * @memberof ei.LiveConfig.BoostsConfig
             * @static
             * @param {ei.LiveConfig.IBoostsConfig} message BoostsConfig message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BoostsConfig.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a BoostsConfig message from the specified reader or buffer.
             * @function decode
             * @memberof ei.LiveConfig.BoostsConfig
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {ei.LiveConfig.BoostsConfig} BoostsConfig
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BoostsConfig.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ei.LiveConfig.BoostsConfig();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.itemConfigs && message.itemConfigs.length))
                            message.itemConfigs = [];
                        message.itemConfigs.push($root.ei.LiveConfig.BoostsConfig.ItemConfig.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a BoostsConfig message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof ei.LiveConfig.BoostsConfig
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {ei.LiveConfig.BoostsConfig} BoostsConfig
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BoostsConfig.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a BoostsConfig message.
             * @function verify
             * @memberof ei.LiveConfig.BoostsConfig
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            BoostsConfig.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.itemConfigs != null && message.hasOwnProperty("itemConfigs")) {
                    if (!Array.isArray(message.itemConfigs))
                        return "itemConfigs: array expected";
                    for (let i = 0; i < message.itemConfigs.length; ++i) {
                        let error = $root.ei.LiveConfig.BoostsConfig.ItemConfig.verify(message.itemConfigs[i]);
                        if (error)
                            return "itemConfigs." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a BoostsConfig message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof ei.LiveConfig.BoostsConfig
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {ei.LiveConfig.BoostsConfig} BoostsConfig
             */
            BoostsConfig.fromObject = function fromObject(object) {
                if (object instanceof $root.ei.LiveConfig.BoostsConfig)
                    return object;
                let message = new $root.ei.LiveConfig.BoostsConfig();
                if (object.itemConfigs) {
                    if (!Array.isArray(object.itemConfigs))
                        throw TypeError(".ei.LiveConfig.BoostsConfig.itemConfigs: array expected");
                    message.itemConfigs = [];
                    for (let i = 0; i < object.itemConfigs.length; ++i) {
                        if (typeof object.itemConfigs[i] !== "object")
                            throw TypeError(".ei.LiveConfig.BoostsConfig.itemConfigs: object expected");
                        message.itemConfigs[i] = $root.ei.LiveConfig.BoostsConfig.ItemConfig.fromObject(object.itemConfigs[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a BoostsConfig message. Also converts values to other types if specified.
             * @function toObject
             * @memberof ei.LiveConfig.BoostsConfig
             * @static
             * @param {ei.LiveConfig.BoostsConfig} message BoostsConfig
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            BoostsConfig.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.itemConfigs = [];
                if (message.itemConfigs && message.itemConfigs.length) {
                    object.itemConfigs = [];
                    for (let j = 0; j < message.itemConfigs.length; ++j)
                        object.itemConfigs[j] = $root.ei.LiveConfig.BoostsConfig.ItemConfig.toObject(message.itemConfigs[j], options);
                }
                return object;
            };

            /**
             * Converts this BoostsConfig to JSON.
             * @function toJSON
             * @memberof ei.LiveConfig.BoostsConfig
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            BoostsConfig.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            BoostsConfig.ItemConfig = (function() {

                /**
                 * Properties of an ItemConfig.
                 * @memberof ei.LiveConfig.BoostsConfig
                 * @interface IItemConfig
                 * @property {string|null} [boostId] ItemConfig boostId
                 * @property {number|null} [price] ItemConfig price
                 * @property {number|null} [tokenPrice] ItemConfig tokenPrice
                 * @property {number|null} [seRequired] ItemConfig seRequired
                 */

                /**
                 * Constructs a new ItemConfig.
                 * @memberof ei.LiveConfig.BoostsConfig
                 * @classdesc Represents an ItemConfig.
                 * @implements IItemConfig
                 * @constructor
                 * @param {ei.LiveConfig.BoostsConfig.IItemConfig=} [properties] Properties to set
                 */
                function ItemConfig(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * ItemConfig boostId.
                 * @member {string} boostId
                 * @memberof ei.LiveConfig.BoostsConfig.ItemConfig
                 * @instance
                 */
                ItemConfig.prototype.boostId = "";

                /**
                 * ItemConfig price.
                 * @member {number} price
                 * @memberof ei.LiveConfig.BoostsConfig.ItemConfig
                 * @instance
                 */
                ItemConfig.prototype.price = 0;

                /**
                 * ItemConfig tokenPrice.
                 * @member {number} tokenPrice
                 * @memberof ei.LiveConfig.BoostsConfig.ItemConfig
                 * @instance
                 */
                ItemConfig.prototype.tokenPrice = 0;

                /**
                 * ItemConfig seRequired.
                 * @member {number} seRequired
                 * @memberof ei.LiveConfig.BoostsConfig.ItemConfig
                 * @instance
                 */
                ItemConfig.prototype.seRequired = 0;

                /**
                 * Creates a new ItemConfig instance using the specified properties.
                 * @function create
                 * @memberof ei.LiveConfig.BoostsConfig.ItemConfig
                 * @static
                 * @param {ei.LiveConfig.BoostsConfig.IItemConfig=} [properties] Properties to set
                 * @returns {ei.LiveConfig.BoostsConfig.ItemConfig} ItemConfig instance
                 */
                ItemConfig.create = function create(properties) {
                    return new ItemConfig(properties);
                };

                /**
                 * Encodes the specified ItemConfig message. Does not implicitly {@link ei.LiveConfig.BoostsConfig.ItemConfig.verify|verify} messages.
                 * @function encode
                 * @memberof ei.LiveConfig.BoostsConfig.ItemConfig
                 * @static
                 * @param {ei.LiveConfig.BoostsConfig.IItemConfig} message ItemConfig message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ItemConfig.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.boostId != null && Object.hasOwnProperty.call(message, "boostId"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.boostId);
                    if (message.price != null && Object.hasOwnProperty.call(message, "price"))
                        writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.price);
                    if (message.tokenPrice != null && Object.hasOwnProperty.call(message, "tokenPrice"))
                        writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.tokenPrice);
                    if (message.seRequired != null && Object.hasOwnProperty.call(message, "seRequired"))
                        writer.uint32(/* id 4, wireType 1 =*/33).double(message.seRequired);
                    return writer;
                };

                /**
                 * Encodes the specified ItemConfig message, length delimited. Does not implicitly {@link ei.LiveConfig.BoostsConfig.ItemConfig.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof ei.LiveConfig.BoostsConfig.ItemConfig
                 * @static
                 * @param {ei.LiveConfig.BoostsConfig.IItemConfig} message ItemConfig message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ItemConfig.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes an ItemConfig message from the specified reader or buffer.
                 * @function decode
                 * @memberof ei.LiveConfig.BoostsConfig.ItemConfig
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {ei.LiveConfig.BoostsConfig.ItemConfig} ItemConfig
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ItemConfig.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ei.LiveConfig.BoostsConfig.ItemConfig();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.boostId = reader.string();
                            break;
                        case 2:
                            message.price = reader.uint32();
                            break;
                        case 3:
                            message.tokenPrice = reader.uint32();
                            break;
                        case 4:
                            message.seRequired = reader.double();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes an ItemConfig message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof ei.LiveConfig.BoostsConfig.ItemConfig
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {ei.LiveConfig.BoostsConfig.ItemConfig} ItemConfig
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ItemConfig.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies an ItemConfig message.
                 * @function verify
                 * @memberof ei.LiveConfig.BoostsConfig.ItemConfig
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ItemConfig.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.boostId != null && message.hasOwnProperty("boostId"))
                        if (!$util.isString(message.boostId))
                            return "boostId: string expected";
                    if (message.price != null && message.hasOwnProperty("price"))
                        if (!$util.isInteger(message.price))
                            return "price: integer expected";
                    if (message.tokenPrice != null && message.hasOwnProperty("tokenPrice"))
                        if (!$util.isInteger(message.tokenPrice))
                            return "tokenPrice: integer expected";
                    if (message.seRequired != null && message.hasOwnProperty("seRequired"))
                        if (typeof message.seRequired !== "number")
                            return "seRequired: number expected";
                    return null;
                };

                /**
                 * Creates an ItemConfig message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof ei.LiveConfig.BoostsConfig.ItemConfig
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {ei.LiveConfig.BoostsConfig.ItemConfig} ItemConfig
                 */
                ItemConfig.fromObject = function fromObject(object) {
                    if (object instanceof $root.ei.LiveConfig.BoostsConfig.ItemConfig)
                        return object;
                    let message = new $root.ei.LiveConfig.BoostsConfig.ItemConfig();
                    if (object.boostId != null)
                        message.boostId = String(object.boostId);
                    if (object.price != null)
                        message.price = object.price >>> 0;
                    if (object.tokenPrice != null)
                        message.tokenPrice = object.tokenPrice >>> 0;
                    if (object.seRequired != null)
                        message.seRequired = Number(object.seRequired);
                    return message;
                };

                /**
                 * Creates a plain object from an ItemConfig message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof ei.LiveConfig.BoostsConfig.ItemConfig
                 * @static
                 * @param {ei.LiveConfig.BoostsConfig.ItemConfig} message ItemConfig
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ItemConfig.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.boostId = "";
                        object.price = 0;
                        object.tokenPrice = 0;
                        object.seRequired = 0;
                    }
                    if (message.boostId != null && message.hasOwnProperty("boostId"))
                        object.boostId = message.boostId;
                    if (message.price != null && message.hasOwnProperty("price"))
                        object.price = message.price;
                    if (message.tokenPrice != null && message.hasOwnProperty("tokenPrice"))
                        object.tokenPrice = message.tokenPrice;
                    if (message.seRequired != null && message.hasOwnProperty("seRequired"))
                        object.seRequired = options.json && !isFinite(message.seRequired) ? String(message.seRequired) : message.seRequired;
                    return object;
                };

                /**
                 * Converts this ItemConfig to JSON.
                 * @function toJSON
                 * @memberof ei.LiveConfig.BoostsConfig.ItemConfig
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ItemConfig.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return ItemConfig;
            })();

            return BoostsConfig;
        })();

        return LiveConfig;
    })();

    ei.InGameMail = (function() {

        /**
         * Properties of an InGameMail.
         * @memberof ei
         * @interface IInGameMail
         * @property {string|null} [id] InGameMail id
         * @property {string|null} [title] InGameMail title
         * @property {string|null} [message] InGameMail message
         * @property {string|null} [action] InGameMail action
         * @property {string|null} [url] InGameMail url
         */

        /**
         * Constructs a new InGameMail.
         * @memberof ei
         * @classdesc Represents an InGameMail.
         * @implements IInGameMail
         * @constructor
         * @param {ei.IInGameMail=} [properties] Properties to set
         */
        function InGameMail(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * InGameMail id.
         * @member {string} id
         * @memberof ei.InGameMail
         * @instance
         */
        InGameMail.prototype.id = "";

        /**
         * InGameMail title.
         * @member {string} title
         * @memberof ei.InGameMail
         * @instance
         */
        InGameMail.prototype.title = "";

        /**
         * InGameMail message.
         * @member {string} message
         * @memberof ei.InGameMail
         * @instance
         */
        InGameMail.prototype.message = "";

        /**
         * InGameMail action.
         * @member {string} action
         * @memberof ei.InGameMail
         * @instance
         */
        InGameMail.prototype.action = "";

        /**
         * InGameMail url.
         * @member {string} url
         * @memberof ei.InGameMail
         * @instance
         */
        InGameMail.prototype.url = "";

        /**
         * Creates a new InGameMail instance using the specified properties.
         * @function create
         * @memberof ei.InGameMail
         * @static
         * @param {ei.IInGameMail=} [properties] Properties to set
         * @returns {ei.InGameMail} InGameMail instance
         */
        InGameMail.create = function create(properties) {
            return new InGameMail(properties);
        };

        /**
         * Encodes the specified InGameMail message. Does not implicitly {@link ei.InGameMail.verify|verify} messages.
         * @function encode
         * @memberof ei.InGameMail
         * @static
         * @param {ei.IInGameMail} message InGameMail message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        InGameMail.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);
            if (message.title != null && Object.hasOwnProperty.call(message, "title"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.title);
            if (message.message != null && Object.hasOwnProperty.call(message, "message"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.message);
            if (message.action != null && Object.hasOwnProperty.call(message, "action"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.action);
            if (message.url != null && Object.hasOwnProperty.call(message, "url"))
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.url);
            return writer;
        };

        /**
         * Encodes the specified InGameMail message, length delimited. Does not implicitly {@link ei.InGameMail.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ei.InGameMail
         * @static
         * @param {ei.IInGameMail} message InGameMail message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        InGameMail.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an InGameMail message from the specified reader or buffer.
         * @function decode
         * @memberof ei.InGameMail
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ei.InGameMail} InGameMail
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        InGameMail.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ei.InGameMail();
            while (reader.pos < end) {
                let tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.id = reader.string();
                    break;
                case 2:
                    message.title = reader.string();
                    break;
                case 3:
                    message.message = reader.string();
                    break;
                case 4:
                    message.action = reader.string();
                    break;
                case 5:
                    message.url = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an InGameMail message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ei.InGameMail
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ei.InGameMail} InGameMail
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        InGameMail.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an InGameMail message.
         * @function verify
         * @memberof ei.InGameMail
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        InGameMail.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.id != null && message.hasOwnProperty("id"))
                if (!$util.isString(message.id))
                    return "id: string expected";
            if (message.title != null && message.hasOwnProperty("title"))
                if (!$util.isString(message.title))
                    return "title: string expected";
            if (message.message != null && message.hasOwnProperty("message"))
                if (!$util.isString(message.message))
                    return "message: string expected";
            if (message.action != null && message.hasOwnProperty("action"))
                if (!$util.isString(message.action))
                    return "action: string expected";
            if (message.url != null && message.hasOwnProperty("url"))
                if (!$util.isString(message.url))
                    return "url: string expected";
            return null;
        };

        /**
         * Creates an InGameMail message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ei.InGameMail
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ei.InGameMail} InGameMail
         */
        InGameMail.fromObject = function fromObject(object) {
            if (object instanceof $root.ei.InGameMail)
                return object;
            let message = new $root.ei.InGameMail();
            if (object.id != null)
                message.id = String(object.id);
            if (object.title != null)
                message.title = String(object.title);
            if (object.message != null)
                message.message = String(object.message);
            if (object.action != null)
                message.action = String(object.action);
            if (object.url != null)
                message.url = String(object.url);
            return message;
        };

        /**
         * Creates a plain object from an InGameMail message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ei.InGameMail
         * @static
         * @param {ei.InGameMail} message InGameMail
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        InGameMail.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.defaults) {
                object.id = "";
                object.title = "";
                object.message = "";
                object.action = "";
                object.url = "";
            }
            if (message.id != null && message.hasOwnProperty("id"))
                object.id = message.id;
            if (message.title != null && message.hasOwnProperty("title"))
                object.title = message.title;
            if (message.message != null && message.hasOwnProperty("message"))
                object.message = message.message;
            if (message.action != null && message.hasOwnProperty("action"))
                object.action = message.action;
            if (message.url != null && message.hasOwnProperty("url"))
                object.url = message.url;
            return object;
        };

        /**
         * Converts this InGameMail to JSON.
         * @function toJSON
         * @memberof ei.InGameMail
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        InGameMail.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return InGameMail;
    })();

    ei.PeriodicalsResponse = (function() {

        /**
         * Properties of a PeriodicalsResponse.
         * @memberof ei
         * @interface IPeriodicalsResponse
         * @property {ei.ISalesInfo|null} [sales] PeriodicalsResponse sales
         * @property {ei.IEggIncCurrentEvents|null} [events] PeriodicalsResponse events
         * @property {ei.IContractsResponse|null} [contracts] PeriodicalsResponse contracts
         * @property {Array.<ei.IServerGift>|null} [gifts] PeriodicalsResponse gifts
         * @property {ei.ILiveConfig|null} [liveConfig] PeriodicalsResponse liveConfig
         * @property {Array.<ei.IInGameMail>|null} [mailBag] PeriodicalsResponse mailBag
         */

        /**
         * Constructs a new PeriodicalsResponse.
         * @memberof ei
         * @classdesc Represents a PeriodicalsResponse.
         * @implements IPeriodicalsResponse
         * @constructor
         * @param {ei.IPeriodicalsResponse=} [properties] Properties to set
         */
        function PeriodicalsResponse(properties) {
            this.gifts = [];
            this.mailBag = [];
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * PeriodicalsResponse sales.
         * @member {ei.ISalesInfo|null|undefined} sales
         * @memberof ei.PeriodicalsResponse
         * @instance
         */
        PeriodicalsResponse.prototype.sales = null;

        /**
         * PeriodicalsResponse events.
         * @member {ei.IEggIncCurrentEvents|null|undefined} events
         * @memberof ei.PeriodicalsResponse
         * @instance
         */
        PeriodicalsResponse.prototype.events = null;

        /**
         * PeriodicalsResponse contracts.
         * @member {ei.IContractsResponse|null|undefined} contracts
         * @memberof ei.PeriodicalsResponse
         * @instance
         */
        PeriodicalsResponse.prototype.contracts = null;

        /**
         * PeriodicalsResponse gifts.
         * @member {Array.<ei.IServerGift>} gifts
         * @memberof ei.PeriodicalsResponse
         * @instance
         */
        PeriodicalsResponse.prototype.gifts = $util.emptyArray;

        /**
         * PeriodicalsResponse liveConfig.
         * @member {ei.ILiveConfig|null|undefined} liveConfig
         * @memberof ei.PeriodicalsResponse
         * @instance
         */
        PeriodicalsResponse.prototype.liveConfig = null;

        /**
         * PeriodicalsResponse mailBag.
         * @member {Array.<ei.IInGameMail>} mailBag
         * @memberof ei.PeriodicalsResponse
         * @instance
         */
        PeriodicalsResponse.prototype.mailBag = $util.emptyArray;

        /**
         * Creates a new PeriodicalsResponse instance using the specified properties.
         * @function create
         * @memberof ei.PeriodicalsResponse
         * @static
         * @param {ei.IPeriodicalsResponse=} [properties] Properties to set
         * @returns {ei.PeriodicalsResponse} PeriodicalsResponse instance
         */
        PeriodicalsResponse.create = function create(properties) {
            return new PeriodicalsResponse(properties);
        };

        /**
         * Encodes the specified PeriodicalsResponse message. Does not implicitly {@link ei.PeriodicalsResponse.verify|verify} messages.
         * @function encode
         * @memberof ei.PeriodicalsResponse
         * @static
         * @param {ei.IPeriodicalsResponse} message PeriodicalsResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        PeriodicalsResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.sales != null && Object.hasOwnProperty.call(message, "sales"))
                $root.ei.SalesInfo.encode(message.sales, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.events != null && Object.hasOwnProperty.call(message, "events"))
                $root.ei.EggIncCurrentEvents.encode(message.events, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.contracts != null && Object.hasOwnProperty.call(message, "contracts"))
                $root.ei.ContractsResponse.encode(message.contracts, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.gifts != null && message.gifts.length)
                for (let i = 0; i < message.gifts.length; ++i)
                    $root.ei.ServerGift.encode(message.gifts[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            if (message.liveConfig != null && Object.hasOwnProperty.call(message, "liveConfig"))
                $root.ei.LiveConfig.encode(message.liveConfig, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
            if (message.mailBag != null && message.mailBag.length)
                for (let i = 0; i < message.mailBag.length; ++i)
                    $root.ei.InGameMail.encode(message.mailBag[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified PeriodicalsResponse message, length delimited. Does not implicitly {@link ei.PeriodicalsResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ei.PeriodicalsResponse
         * @static
         * @param {ei.IPeriodicalsResponse} message PeriodicalsResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        PeriodicalsResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a PeriodicalsResponse message from the specified reader or buffer.
         * @function decode
         * @memberof ei.PeriodicalsResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ei.PeriodicalsResponse} PeriodicalsResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        PeriodicalsResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ei.PeriodicalsResponse();
            while (reader.pos < end) {
                let tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.sales = $root.ei.SalesInfo.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.events = $root.ei.EggIncCurrentEvents.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.contracts = $root.ei.ContractsResponse.decode(reader, reader.uint32());
                    break;
                case 4:
                    if (!(message.gifts && message.gifts.length))
                        message.gifts = [];
                    message.gifts.push($root.ei.ServerGift.decode(reader, reader.uint32()));
                    break;
                case 5:
                    message.liveConfig = $root.ei.LiveConfig.decode(reader, reader.uint32());
                    break;
                case 6:
                    if (!(message.mailBag && message.mailBag.length))
                        message.mailBag = [];
                    message.mailBag.push($root.ei.InGameMail.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a PeriodicalsResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ei.PeriodicalsResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ei.PeriodicalsResponse} PeriodicalsResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        PeriodicalsResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a PeriodicalsResponse message.
         * @function verify
         * @memberof ei.PeriodicalsResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        PeriodicalsResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.sales != null && message.hasOwnProperty("sales")) {
                let error = $root.ei.SalesInfo.verify(message.sales);
                if (error)
                    return "sales." + error;
            }
            if (message.events != null && message.hasOwnProperty("events")) {
                let error = $root.ei.EggIncCurrentEvents.verify(message.events);
                if (error)
                    return "events." + error;
            }
            if (message.contracts != null && message.hasOwnProperty("contracts")) {
                let error = $root.ei.ContractsResponse.verify(message.contracts);
                if (error)
                    return "contracts." + error;
            }
            if (message.gifts != null && message.hasOwnProperty("gifts")) {
                if (!Array.isArray(message.gifts))
                    return "gifts: array expected";
                for (let i = 0; i < message.gifts.length; ++i) {
                    let error = $root.ei.ServerGift.verify(message.gifts[i]);
                    if (error)
                        return "gifts." + error;
                }
            }
            if (message.liveConfig != null && message.hasOwnProperty("liveConfig")) {
                let error = $root.ei.LiveConfig.verify(message.liveConfig);
                if (error)
                    return "liveConfig." + error;
            }
            if (message.mailBag != null && message.hasOwnProperty("mailBag")) {
                if (!Array.isArray(message.mailBag))
                    return "mailBag: array expected";
                for (let i = 0; i < message.mailBag.length; ++i) {
                    let error = $root.ei.InGameMail.verify(message.mailBag[i]);
                    if (error)
                        return "mailBag." + error;
                }
            }
            return null;
        };

        /**
         * Creates a PeriodicalsResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ei.PeriodicalsResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ei.PeriodicalsResponse} PeriodicalsResponse
         */
        PeriodicalsResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.ei.PeriodicalsResponse)
                return object;
            let message = new $root.ei.PeriodicalsResponse();
            if (object.sales != null) {
                if (typeof object.sales !== "object")
                    throw TypeError(".ei.PeriodicalsResponse.sales: object expected");
                message.sales = $root.ei.SalesInfo.fromObject(object.sales);
            }
            if (object.events != null) {
                if (typeof object.events !== "object")
                    throw TypeError(".ei.PeriodicalsResponse.events: object expected");
                message.events = $root.ei.EggIncCurrentEvents.fromObject(object.events);
            }
            if (object.contracts != null) {
                if (typeof object.contracts !== "object")
                    throw TypeError(".ei.PeriodicalsResponse.contracts: object expected");
                message.contracts = $root.ei.ContractsResponse.fromObject(object.contracts);
            }
            if (object.gifts) {
                if (!Array.isArray(object.gifts))
                    throw TypeError(".ei.PeriodicalsResponse.gifts: array expected");
                message.gifts = [];
                for (let i = 0; i < object.gifts.length; ++i) {
                    if (typeof object.gifts[i] !== "object")
                        throw TypeError(".ei.PeriodicalsResponse.gifts: object expected");
                    message.gifts[i] = $root.ei.ServerGift.fromObject(object.gifts[i]);
                }
            }
            if (object.liveConfig != null) {
                if (typeof object.liveConfig !== "object")
                    throw TypeError(".ei.PeriodicalsResponse.liveConfig: object expected");
                message.liveConfig = $root.ei.LiveConfig.fromObject(object.liveConfig);
            }
            if (object.mailBag) {
                if (!Array.isArray(object.mailBag))
                    throw TypeError(".ei.PeriodicalsResponse.mailBag: array expected");
                message.mailBag = [];
                for (let i = 0; i < object.mailBag.length; ++i) {
                    if (typeof object.mailBag[i] !== "object")
                        throw TypeError(".ei.PeriodicalsResponse.mailBag: object expected");
                    message.mailBag[i] = $root.ei.InGameMail.fromObject(object.mailBag[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a PeriodicalsResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ei.PeriodicalsResponse
         * @static
         * @param {ei.PeriodicalsResponse} message PeriodicalsResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        PeriodicalsResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.arrays || options.defaults) {
                object.gifts = [];
                object.mailBag = [];
            }
            if (options.defaults) {
                object.sales = null;
                object.events = null;
                object.contracts = null;
                object.liveConfig = null;
            }
            if (message.sales != null && message.hasOwnProperty("sales"))
                object.sales = $root.ei.SalesInfo.toObject(message.sales, options);
            if (message.events != null && message.hasOwnProperty("events"))
                object.events = $root.ei.EggIncCurrentEvents.toObject(message.events, options);
            if (message.contracts != null && message.hasOwnProperty("contracts"))
                object.contracts = $root.ei.ContractsResponse.toObject(message.contracts, options);
            if (message.gifts && message.gifts.length) {
                object.gifts = [];
                for (let j = 0; j < message.gifts.length; ++j)
                    object.gifts[j] = $root.ei.ServerGift.toObject(message.gifts[j], options);
            }
            if (message.liveConfig != null && message.hasOwnProperty("liveConfig"))
                object.liveConfig = $root.ei.LiveConfig.toObject(message.liveConfig, options);
            if (message.mailBag && message.mailBag.length) {
                object.mailBag = [];
                for (let j = 0; j < message.mailBag.length; ++j)
                    object.mailBag[j] = $root.ei.InGameMail.toObject(message.mailBag[j], options);
            }
            return object;
        };

        /**
         * Converts this PeriodicalsResponse to JSON.
         * @function toJSON
         * @memberof ei.PeriodicalsResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        PeriodicalsResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return PeriodicalsResponse;
    })();

    ei.GetPeriodicalsRequest = (function() {

        /**
         * Properties of a GetPeriodicalsRequest.
         * @memberof ei
         * @interface IGetPeriodicalsRequest
         * @property {ei.IBasicRequestInfo|null} [rinfo] GetPeriodicalsRequest rinfo
         * @property {string|null} [userId] GetPeriodicalsRequest userId
         * @property {boolean|null} [piggyFull] GetPeriodicalsRequest piggyFull
         * @property {boolean|null} [piggyFoundFull] GetPeriodicalsRequest piggyFoundFull
         * @property {number|null} [secondsFullRealtime] GetPeriodicalsRequest secondsFullRealtime
         * @property {number|null} [secondsFullGametime] GetPeriodicalsRequest secondsFullGametime
         * @property {number|null} [lostIncrements] GetPeriodicalsRequest lostIncrements
         * @property {number|null} [soulEggs] GetPeriodicalsRequest soulEggs
         * @property {number|null} [currentClientVersion] GetPeriodicalsRequest currentClientVersion
         * @property {boolean|null} [debug] GetPeriodicalsRequest debug
         */

        /**
         * Constructs a new GetPeriodicalsRequest.
         * @memberof ei
         * @classdesc Represents a GetPeriodicalsRequest.
         * @implements IGetPeriodicalsRequest
         * @constructor
         * @param {ei.IGetPeriodicalsRequest=} [properties] Properties to set
         */
        function GetPeriodicalsRequest(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GetPeriodicalsRequest rinfo.
         * @member {ei.IBasicRequestInfo|null|undefined} rinfo
         * @memberof ei.GetPeriodicalsRequest
         * @instance
         */
        GetPeriodicalsRequest.prototype.rinfo = null;

        /**
         * GetPeriodicalsRequest userId.
         * @member {string} userId
         * @memberof ei.GetPeriodicalsRequest
         * @instance
         */
        GetPeriodicalsRequest.prototype.userId = "";

        /**
         * GetPeriodicalsRequest piggyFull.
         * @member {boolean} piggyFull
         * @memberof ei.GetPeriodicalsRequest
         * @instance
         */
        GetPeriodicalsRequest.prototype.piggyFull = false;

        /**
         * GetPeriodicalsRequest piggyFoundFull.
         * @member {boolean} piggyFoundFull
         * @memberof ei.GetPeriodicalsRequest
         * @instance
         */
        GetPeriodicalsRequest.prototype.piggyFoundFull = false;

        /**
         * GetPeriodicalsRequest secondsFullRealtime.
         * @member {number} secondsFullRealtime
         * @memberof ei.GetPeriodicalsRequest
         * @instance
         */
        GetPeriodicalsRequest.prototype.secondsFullRealtime = 0;

        /**
         * GetPeriodicalsRequest secondsFullGametime.
         * @member {number} secondsFullGametime
         * @memberof ei.GetPeriodicalsRequest
         * @instance
         */
        GetPeriodicalsRequest.prototype.secondsFullGametime = 0;

        /**
         * GetPeriodicalsRequest lostIncrements.
         * @member {number} lostIncrements
         * @memberof ei.GetPeriodicalsRequest
         * @instance
         */
        GetPeriodicalsRequest.prototype.lostIncrements = 0;

        /**
         * GetPeriodicalsRequest soulEggs.
         * @member {number} soulEggs
         * @memberof ei.GetPeriodicalsRequest
         * @instance
         */
        GetPeriodicalsRequest.prototype.soulEggs = 0;

        /**
         * GetPeriodicalsRequest currentClientVersion.
         * @member {number} currentClientVersion
         * @memberof ei.GetPeriodicalsRequest
         * @instance
         */
        GetPeriodicalsRequest.prototype.currentClientVersion = 0;

        /**
         * GetPeriodicalsRequest debug.
         * @member {boolean} debug
         * @memberof ei.GetPeriodicalsRequest
         * @instance
         */
        GetPeriodicalsRequest.prototype.debug = false;

        /**
         * Creates a new GetPeriodicalsRequest instance using the specified properties.
         * @function create
         * @memberof ei.GetPeriodicalsRequest
         * @static
         * @param {ei.IGetPeriodicalsRequest=} [properties] Properties to set
         * @returns {ei.GetPeriodicalsRequest} GetPeriodicalsRequest instance
         */
        GetPeriodicalsRequest.create = function create(properties) {
            return new GetPeriodicalsRequest(properties);
        };

        /**
         * Encodes the specified GetPeriodicalsRequest message. Does not implicitly {@link ei.GetPeriodicalsRequest.verify|verify} messages.
         * @function encode
         * @memberof ei.GetPeriodicalsRequest
         * @static
         * @param {ei.IGetPeriodicalsRequest} message GetPeriodicalsRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GetPeriodicalsRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userId != null && Object.hasOwnProperty.call(message, "userId"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);
            if (message.piggyFull != null && Object.hasOwnProperty.call(message, "piggyFull"))
                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.piggyFull);
            if (message.piggyFoundFull != null && Object.hasOwnProperty.call(message, "piggyFoundFull"))
                writer.uint32(/* id 3, wireType 0 =*/24).bool(message.piggyFoundFull);
            if (message.secondsFullRealtime != null && Object.hasOwnProperty.call(message, "secondsFullRealtime"))
                writer.uint32(/* id 4, wireType 1 =*/33).double(message.secondsFullRealtime);
            if (message.secondsFullGametime != null && Object.hasOwnProperty.call(message, "secondsFullGametime"))
                writer.uint32(/* id 5, wireType 1 =*/41).double(message.secondsFullGametime);
            if (message.lostIncrements != null && Object.hasOwnProperty.call(message, "lostIncrements"))
                writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.lostIncrements);
            if (message.soulEggs != null && Object.hasOwnProperty.call(message, "soulEggs"))
                writer.uint32(/* id 8, wireType 1 =*/65).double(message.soulEggs);
            if (message.currentClientVersion != null && Object.hasOwnProperty.call(message, "currentClientVersion"))
                writer.uint32(/* id 10, wireType 0 =*/80).uint32(message.currentClientVersion);
            if (message.debug != null && Object.hasOwnProperty.call(message, "debug"))
                writer.uint32(/* id 11, wireType 0 =*/88).bool(message.debug);
            if (message.rinfo != null && Object.hasOwnProperty.call(message, "rinfo"))
                $root.ei.BasicRequestInfo.encode(message.rinfo, writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified GetPeriodicalsRequest message, length delimited. Does not implicitly {@link ei.GetPeriodicalsRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ei.GetPeriodicalsRequest
         * @static
         * @param {ei.IGetPeriodicalsRequest} message GetPeriodicalsRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GetPeriodicalsRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GetPeriodicalsRequest message from the specified reader or buffer.
         * @function decode
         * @memberof ei.GetPeriodicalsRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ei.GetPeriodicalsRequest} GetPeriodicalsRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GetPeriodicalsRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ei.GetPeriodicalsRequest();
            while (reader.pos < end) {
                let tag = reader.uint32();
                switch (tag >>> 3) {
                case 12:
                    message.rinfo = $root.ei.BasicRequestInfo.decode(reader, reader.uint32());
                    break;
                case 1:
                    message.userId = reader.string();
                    break;
                case 2:
                    message.piggyFull = reader.bool();
                    break;
                case 3:
                    message.piggyFoundFull = reader.bool();
                    break;
                case 4:
                    message.secondsFullRealtime = reader.double();
                    break;
                case 5:
                    message.secondsFullGametime = reader.double();
                    break;
                case 7:
                    message.lostIncrements = reader.uint32();
                    break;
                case 8:
                    message.soulEggs = reader.double();
                    break;
                case 10:
                    message.currentClientVersion = reader.uint32();
                    break;
                case 11:
                    message.debug = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GetPeriodicalsRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ei.GetPeriodicalsRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ei.GetPeriodicalsRequest} GetPeriodicalsRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GetPeriodicalsRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GetPeriodicalsRequest message.
         * @function verify
         * @memberof ei.GetPeriodicalsRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GetPeriodicalsRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.rinfo != null && message.hasOwnProperty("rinfo")) {
                let error = $root.ei.BasicRequestInfo.verify(message.rinfo);
                if (error)
                    return "rinfo." + error;
            }
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isString(message.userId))
                    return "userId: string expected";
            if (message.piggyFull != null && message.hasOwnProperty("piggyFull"))
                if (typeof message.piggyFull !== "boolean")
                    return "piggyFull: boolean expected";
            if (message.piggyFoundFull != null && message.hasOwnProperty("piggyFoundFull"))
                if (typeof message.piggyFoundFull !== "boolean")
                    return "piggyFoundFull: boolean expected";
            if (message.secondsFullRealtime != null && message.hasOwnProperty("secondsFullRealtime"))
                if (typeof message.secondsFullRealtime !== "number")
                    return "secondsFullRealtime: number expected";
            if (message.secondsFullGametime != null && message.hasOwnProperty("secondsFullGametime"))
                if (typeof message.secondsFullGametime !== "number")
                    return "secondsFullGametime: number expected";
            if (message.lostIncrements != null && message.hasOwnProperty("lostIncrements"))
                if (!$util.isInteger(message.lostIncrements))
                    return "lostIncrements: integer expected";
            if (message.soulEggs != null && message.hasOwnProperty("soulEggs"))
                if (typeof message.soulEggs !== "number")
                    return "soulEggs: number expected";
            if (message.currentClientVersion != null && message.hasOwnProperty("currentClientVersion"))
                if (!$util.isInteger(message.currentClientVersion))
                    return "currentClientVersion: integer expected";
            if (message.debug != null && message.hasOwnProperty("debug"))
                if (typeof message.debug !== "boolean")
                    return "debug: boolean expected";
            return null;
        };

        /**
         * Creates a GetPeriodicalsRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ei.GetPeriodicalsRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ei.GetPeriodicalsRequest} GetPeriodicalsRequest
         */
        GetPeriodicalsRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.ei.GetPeriodicalsRequest)
                return object;
            let message = new $root.ei.GetPeriodicalsRequest();
            if (object.rinfo != null) {
                if (typeof object.rinfo !== "object")
                    throw TypeError(".ei.GetPeriodicalsRequest.rinfo: object expected");
                message.rinfo = $root.ei.BasicRequestInfo.fromObject(object.rinfo);
            }
            if (object.userId != null)
                message.userId = String(object.userId);
            if (object.piggyFull != null)
                message.piggyFull = Boolean(object.piggyFull);
            if (object.piggyFoundFull != null)
                message.piggyFoundFull = Boolean(object.piggyFoundFull);
            if (object.secondsFullRealtime != null)
                message.secondsFullRealtime = Number(object.secondsFullRealtime);
            if (object.secondsFullGametime != null)
                message.secondsFullGametime = Number(object.secondsFullGametime);
            if (object.lostIncrements != null)
                message.lostIncrements = object.lostIncrements >>> 0;
            if (object.soulEggs != null)
                message.soulEggs = Number(object.soulEggs);
            if (object.currentClientVersion != null)
                message.currentClientVersion = object.currentClientVersion >>> 0;
            if (object.debug != null)
                message.debug = Boolean(object.debug);
            return message;
        };

        /**
         * Creates a plain object from a GetPeriodicalsRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ei.GetPeriodicalsRequest
         * @static
         * @param {ei.GetPeriodicalsRequest} message GetPeriodicalsRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GetPeriodicalsRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.defaults) {
                object.userId = "";
                object.piggyFull = false;
                object.piggyFoundFull = false;
                object.secondsFullRealtime = 0;
                object.secondsFullGametime = 0;
                object.lostIncrements = 0;
                object.soulEggs = 0;
                object.currentClientVersion = 0;
                object.debug = false;
                object.rinfo = null;
            }
            if (message.userId != null && message.hasOwnProperty("userId"))
                object.userId = message.userId;
            if (message.piggyFull != null && message.hasOwnProperty("piggyFull"))
                object.piggyFull = message.piggyFull;
            if (message.piggyFoundFull != null && message.hasOwnProperty("piggyFoundFull"))
                object.piggyFoundFull = message.piggyFoundFull;
            if (message.secondsFullRealtime != null && message.hasOwnProperty("secondsFullRealtime"))
                object.secondsFullRealtime = options.json && !isFinite(message.secondsFullRealtime) ? String(message.secondsFullRealtime) : message.secondsFullRealtime;
            if (message.secondsFullGametime != null && message.hasOwnProperty("secondsFullGametime"))
                object.secondsFullGametime = options.json && !isFinite(message.secondsFullGametime) ? String(message.secondsFullGametime) : message.secondsFullGametime;
            if (message.lostIncrements != null && message.hasOwnProperty("lostIncrements"))
                object.lostIncrements = message.lostIncrements;
            if (message.soulEggs != null && message.hasOwnProperty("soulEggs"))
                object.soulEggs = options.json && !isFinite(message.soulEggs) ? String(message.soulEggs) : message.soulEggs;
            if (message.currentClientVersion != null && message.hasOwnProperty("currentClientVersion"))
                object.currentClientVersion = message.currentClientVersion;
            if (message.debug != null && message.hasOwnProperty("debug"))
                object.debug = message.debug;
            if (message.rinfo != null && message.hasOwnProperty("rinfo"))
                object.rinfo = $root.ei.BasicRequestInfo.toObject(message.rinfo, options);
            return object;
        };

        /**
         * Converts this GetPeriodicalsRequest to JSON.
         * @function toJSON
         * @memberof ei.GetPeriodicalsRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GetPeriodicalsRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GetPeriodicalsRequest;
    })();

    ei.AdAttributionRawData = (function() {

        /**
         * Properties of an AdAttributionRawData.
         * @memberof ei
         * @interface IAdAttributionRawData
         * @property {string|null} [deviceAdId] AdAttributionRawData deviceAdId
         * @property {string|null} [userId] AdAttributionRawData userId
         * @property {string|null} [adNetwork] AdAttributionRawData adNetwork
         * @property {string|null} [jsonData] AdAttributionRawData jsonData
         */

        /**
         * Constructs a new AdAttributionRawData.
         * @memberof ei
         * @classdesc Represents an AdAttributionRawData.
         * @implements IAdAttributionRawData
         * @constructor
         * @param {ei.IAdAttributionRawData=} [properties] Properties to set
         */
        function AdAttributionRawData(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * AdAttributionRawData deviceAdId.
         * @member {string} deviceAdId
         * @memberof ei.AdAttributionRawData
         * @instance
         */
        AdAttributionRawData.prototype.deviceAdId = "";

        /**
         * AdAttributionRawData userId.
         * @member {string} userId
         * @memberof ei.AdAttributionRawData
         * @instance
         */
        AdAttributionRawData.prototype.userId = "";

        /**
         * AdAttributionRawData adNetwork.
         * @member {string} adNetwork
         * @memberof ei.AdAttributionRawData
         * @instance
         */
        AdAttributionRawData.prototype.adNetwork = "";

        /**
         * AdAttributionRawData jsonData.
         * @member {string} jsonData
         * @memberof ei.AdAttributionRawData
         * @instance
         */
        AdAttributionRawData.prototype.jsonData = "";

        /**
         * Creates a new AdAttributionRawData instance using the specified properties.
         * @function create
         * @memberof ei.AdAttributionRawData
         * @static
         * @param {ei.IAdAttributionRawData=} [properties] Properties to set
         * @returns {ei.AdAttributionRawData} AdAttributionRawData instance
         */
        AdAttributionRawData.create = function create(properties) {
            return new AdAttributionRawData(properties);
        };

        /**
         * Encodes the specified AdAttributionRawData message. Does not implicitly {@link ei.AdAttributionRawData.verify|verify} messages.
         * @function encode
         * @memberof ei.AdAttributionRawData
         * @static
         * @param {ei.IAdAttributionRawData} message AdAttributionRawData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        AdAttributionRawData.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.deviceAdId != null && Object.hasOwnProperty.call(message, "deviceAdId"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.deviceAdId);
            if (message.adNetwork != null && Object.hasOwnProperty.call(message, "adNetwork"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.adNetwork);
            if (message.jsonData != null && Object.hasOwnProperty.call(message, "jsonData"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.jsonData);
            if (message.userId != null && Object.hasOwnProperty.call(message, "userId"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.userId);
            return writer;
        };

        /**
         * Encodes the specified AdAttributionRawData message, length delimited. Does not implicitly {@link ei.AdAttributionRawData.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ei.AdAttributionRawData
         * @static
         * @param {ei.IAdAttributionRawData} message AdAttributionRawData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        AdAttributionRawData.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an AdAttributionRawData message from the specified reader or buffer.
         * @function decode
         * @memberof ei.AdAttributionRawData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ei.AdAttributionRawData} AdAttributionRawData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        AdAttributionRawData.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ei.AdAttributionRawData();
            while (reader.pos < end) {
                let tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.deviceAdId = reader.string();
                    break;
                case 4:
                    message.userId = reader.string();
                    break;
                case 2:
                    message.adNetwork = reader.string();
                    break;
                case 3:
                    message.jsonData = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an AdAttributionRawData message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ei.AdAttributionRawData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ei.AdAttributionRawData} AdAttributionRawData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        AdAttributionRawData.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an AdAttributionRawData message.
         * @function verify
         * @memberof ei.AdAttributionRawData
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        AdAttributionRawData.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.deviceAdId != null && message.hasOwnProperty("deviceAdId"))
                if (!$util.isString(message.deviceAdId))
                    return "deviceAdId: string expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isString(message.userId))
                    return "userId: string expected";
            if (message.adNetwork != null && message.hasOwnProperty("adNetwork"))
                if (!$util.isString(message.adNetwork))
                    return "adNetwork: string expected";
            if (message.jsonData != null && message.hasOwnProperty("jsonData"))
                if (!$util.isString(message.jsonData))
                    return "jsonData: string expected";
            return null;
        };

        /**
         * Creates an AdAttributionRawData message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ei.AdAttributionRawData
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ei.AdAttributionRawData} AdAttributionRawData
         */
        AdAttributionRawData.fromObject = function fromObject(object) {
            if (object instanceof $root.ei.AdAttributionRawData)
                return object;
            let message = new $root.ei.AdAttributionRawData();
            if (object.deviceAdId != null)
                message.deviceAdId = String(object.deviceAdId);
            if (object.userId != null)
                message.userId = String(object.userId);
            if (object.adNetwork != null)
                message.adNetwork = String(object.adNetwork);
            if (object.jsonData != null)
                message.jsonData = String(object.jsonData);
            return message;
        };

        /**
         * Creates a plain object from an AdAttributionRawData message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ei.AdAttributionRawData
         * @static
         * @param {ei.AdAttributionRawData} message AdAttributionRawData
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        AdAttributionRawData.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.defaults) {
                object.deviceAdId = "";
                object.adNetwork = "";
                object.jsonData = "";
                object.userId = "";
            }
            if (message.deviceAdId != null && message.hasOwnProperty("deviceAdId"))
                object.deviceAdId = message.deviceAdId;
            if (message.adNetwork != null && message.hasOwnProperty("adNetwork"))
                object.adNetwork = message.adNetwork;
            if (message.jsonData != null && message.hasOwnProperty("jsonData"))
                object.jsonData = message.jsonData;
            if (message.userId != null && message.hasOwnProperty("userId"))
                object.userId = message.userId;
            return object;
        };

        /**
         * Converts this AdAttributionRawData to JSON.
         * @function toJSON
         * @memberof ei.AdAttributionRawData
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        AdAttributionRawData.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return AdAttributionRawData;
    })();

    ei.AdAttributionRow = (function() {

        /**
         * Properties of an AdAttributionRow.
         * @memberof ei
         * @interface IAdAttributionRow
         * @property {string|null} [userId] AdAttributionRow userId
         * @property {string|null} [adId] AdAttributionRow adId
         * @property {string|null} [adNetwork] AdAttributionRow adNetwork
         * @property {string|null} [campaign] AdAttributionRow campaign
         * @property {string|null} [keyword] AdAttributionRow keyword
         * @property {string|null} [extra] AdAttributionRow extra
         * @property {number|null} [clickDate] AdAttributionRow clickDate
         * @property {number|null} [downloadDate] AdAttributionRow downloadDate
         * @property {number|null} [approxTime] AdAttributionRow approxTime
         */

        /**
         * Constructs a new AdAttributionRow.
         * @memberof ei
         * @classdesc Represents an AdAttributionRow.
         * @implements IAdAttributionRow
         * @constructor
         * @param {ei.IAdAttributionRow=} [properties] Properties to set
         */
        function AdAttributionRow(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * AdAttributionRow userId.
         * @member {string} userId
         * @memberof ei.AdAttributionRow
         * @instance
         */
        AdAttributionRow.prototype.userId = "";

        /**
         * AdAttributionRow adId.
         * @member {string} adId
         * @memberof ei.AdAttributionRow
         * @instance
         */
        AdAttributionRow.prototype.adId = "";

        /**
         * AdAttributionRow adNetwork.
         * @member {string} adNetwork
         * @memberof ei.AdAttributionRow
         * @instance
         */
        AdAttributionRow.prototype.adNetwork = "";

        /**
         * AdAttributionRow campaign.
         * @member {string} campaign
         * @memberof ei.AdAttributionRow
         * @instance
         */
        AdAttributionRow.prototype.campaign = "";

        /**
         * AdAttributionRow keyword.
         * @member {string} keyword
         * @memberof ei.AdAttributionRow
         * @instance
         */
        AdAttributionRow.prototype.keyword = "";

        /**
         * AdAttributionRow extra.
         * @member {string} extra
         * @memberof ei.AdAttributionRow
         * @instance
         */
        AdAttributionRow.prototype.extra = "";

        /**
         * AdAttributionRow clickDate.
         * @member {number} clickDate
         * @memberof ei.AdAttributionRow
         * @instance
         */
        AdAttributionRow.prototype.clickDate = 0;

        /**
         * AdAttributionRow downloadDate.
         * @member {number} downloadDate
         * @memberof ei.AdAttributionRow
         * @instance
         */
        AdAttributionRow.prototype.downloadDate = 0;

        /**
         * AdAttributionRow approxTime.
         * @member {number} approxTime
         * @memberof ei.AdAttributionRow
         * @instance
         */
        AdAttributionRow.prototype.approxTime = 0;

        /**
         * Creates a new AdAttributionRow instance using the specified properties.
         * @function create
         * @memberof ei.AdAttributionRow
         * @static
         * @param {ei.IAdAttributionRow=} [properties] Properties to set
         * @returns {ei.AdAttributionRow} AdAttributionRow instance
         */
        AdAttributionRow.create = function create(properties) {
            return new AdAttributionRow(properties);
        };

        /**
         * Encodes the specified AdAttributionRow message. Does not implicitly {@link ei.AdAttributionRow.verify|verify} messages.
         * @function encode
         * @memberof ei.AdAttributionRow
         * @static
         * @param {ei.IAdAttributionRow} message AdAttributionRow message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        AdAttributionRow.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userId != null && Object.hasOwnProperty.call(message, "userId"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);
            if (message.adId != null && Object.hasOwnProperty.call(message, "adId"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.adId);
            if (message.adNetwork != null && Object.hasOwnProperty.call(message, "adNetwork"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.adNetwork);
            if (message.campaign != null && Object.hasOwnProperty.call(message, "campaign"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.campaign);
            if (message.keyword != null && Object.hasOwnProperty.call(message, "keyword"))
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.keyword);
            if (message.extra != null && Object.hasOwnProperty.call(message, "extra"))
                writer.uint32(/* id 6, wireType 2 =*/50).string(message.extra);
            if (message.clickDate != null && Object.hasOwnProperty.call(message, "clickDate"))
                writer.uint32(/* id 7, wireType 5 =*/61).float(message.clickDate);
            if (message.downloadDate != null && Object.hasOwnProperty.call(message, "downloadDate"))
                writer.uint32(/* id 8, wireType 5 =*/69).float(message.downloadDate);
            if (message.approxTime != null && Object.hasOwnProperty.call(message, "approxTime"))
                writer.uint32(/* id 9, wireType 5 =*/77).float(message.approxTime);
            return writer;
        };

        /**
         * Encodes the specified AdAttributionRow message, length delimited. Does not implicitly {@link ei.AdAttributionRow.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ei.AdAttributionRow
         * @static
         * @param {ei.IAdAttributionRow} message AdAttributionRow message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        AdAttributionRow.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an AdAttributionRow message from the specified reader or buffer.
         * @function decode
         * @memberof ei.AdAttributionRow
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ei.AdAttributionRow} AdAttributionRow
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        AdAttributionRow.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ei.AdAttributionRow();
            while (reader.pos < end) {
                let tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.userId = reader.string();
                    break;
                case 2:
                    message.adId = reader.string();
                    break;
                case 3:
                    message.adNetwork = reader.string();
                    break;
                case 4:
                    message.campaign = reader.string();
                    break;
                case 5:
                    message.keyword = reader.string();
                    break;
                case 6:
                    message.extra = reader.string();
                    break;
                case 7:
                    message.clickDate = reader.float();
                    break;
                case 8:
                    message.downloadDate = reader.float();
                    break;
                case 9:
                    message.approxTime = reader.float();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an AdAttributionRow message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ei.AdAttributionRow
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ei.AdAttributionRow} AdAttributionRow
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        AdAttributionRow.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an AdAttributionRow message.
         * @function verify
         * @memberof ei.AdAttributionRow
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        AdAttributionRow.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isString(message.userId))
                    return "userId: string expected";
            if (message.adId != null && message.hasOwnProperty("adId"))
                if (!$util.isString(message.adId))
                    return "adId: string expected";
            if (message.adNetwork != null && message.hasOwnProperty("adNetwork"))
                if (!$util.isString(message.adNetwork))
                    return "adNetwork: string expected";
            if (message.campaign != null && message.hasOwnProperty("campaign"))
                if (!$util.isString(message.campaign))
                    return "campaign: string expected";
            if (message.keyword != null && message.hasOwnProperty("keyword"))
                if (!$util.isString(message.keyword))
                    return "keyword: string expected";
            if (message.extra != null && message.hasOwnProperty("extra"))
                if (!$util.isString(message.extra))
                    return "extra: string expected";
            if (message.clickDate != null && message.hasOwnProperty("clickDate"))
                if (typeof message.clickDate !== "number")
                    return "clickDate: number expected";
            if (message.downloadDate != null && message.hasOwnProperty("downloadDate"))
                if (typeof message.downloadDate !== "number")
                    return "downloadDate: number expected";
            if (message.approxTime != null && message.hasOwnProperty("approxTime"))
                if (typeof message.approxTime !== "number")
                    return "approxTime: number expected";
            return null;
        };

        /**
         * Creates an AdAttributionRow message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ei.AdAttributionRow
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ei.AdAttributionRow} AdAttributionRow
         */
        AdAttributionRow.fromObject = function fromObject(object) {
            if (object instanceof $root.ei.AdAttributionRow)
                return object;
            let message = new $root.ei.AdAttributionRow();
            if (object.userId != null)
                message.userId = String(object.userId);
            if (object.adId != null)
                message.adId = String(object.adId);
            if (object.adNetwork != null)
                message.adNetwork = String(object.adNetwork);
            if (object.campaign != null)
                message.campaign = String(object.campaign);
            if (object.keyword != null)
                message.keyword = String(object.keyword);
            if (object.extra != null)
                message.extra = String(object.extra);
            if (object.clickDate != null)
                message.clickDate = Number(object.clickDate);
            if (object.downloadDate != null)
                message.downloadDate = Number(object.downloadDate);
            if (object.approxTime != null)
                message.approxTime = Number(object.approxTime);
            return message;
        };

        /**
         * Creates a plain object from an AdAttributionRow message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ei.AdAttributionRow
         * @static
         * @param {ei.AdAttributionRow} message AdAttributionRow
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        AdAttributionRow.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.defaults) {
                object.userId = "";
                object.adId = "";
                object.adNetwork = "";
                object.campaign = "";
                object.keyword = "";
                object.extra = "";
                object.clickDate = 0;
                object.downloadDate = 0;
                object.approxTime = 0;
            }
            if (message.userId != null && message.hasOwnProperty("userId"))
                object.userId = message.userId;
            if (message.adId != null && message.hasOwnProperty("adId"))
                object.adId = message.adId;
            if (message.adNetwork != null && message.hasOwnProperty("adNetwork"))
                object.adNetwork = message.adNetwork;
            if (message.campaign != null && message.hasOwnProperty("campaign"))
                object.campaign = message.campaign;
            if (message.keyword != null && message.hasOwnProperty("keyword"))
                object.keyword = message.keyword;
            if (message.extra != null && message.hasOwnProperty("extra"))
                object.extra = message.extra;
            if (message.clickDate != null && message.hasOwnProperty("clickDate"))
                object.clickDate = options.json && !isFinite(message.clickDate) ? String(message.clickDate) : message.clickDate;
            if (message.downloadDate != null && message.hasOwnProperty("downloadDate"))
                object.downloadDate = options.json && !isFinite(message.downloadDate) ? String(message.downloadDate) : message.downloadDate;
            if (message.approxTime != null && message.hasOwnProperty("approxTime"))
                object.approxTime = options.json && !isFinite(message.approxTime) ? String(message.approxTime) : message.approxTime;
            return object;
        };

        /**
         * Converts this AdAttributionRow to JSON.
         * @function toJSON
         * @memberof ei.AdAttributionRow
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        AdAttributionRow.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return AdAttributionRow;
    })();

    ei.AdAttributionInfo = (function() {

        /**
         * Properties of an AdAttributionInfo.
         * @memberof ei
         * @interface IAdAttributionInfo
         * @property {string|null} [deviceAdId] AdAttributionInfo deviceAdId
         * @property {string|null} [networkName] AdAttributionInfo networkName
         * @property {boolean|null} [attribution] AdAttributionInfo attribution
         * @property {string|null} [orgName] AdAttributionInfo orgName
         * @property {string|null} [orgId] AdAttributionInfo orgId
         * @property {string|null} [campaignName] AdAttributionInfo campaignName
         * @property {string|null} [campaignId] AdAttributionInfo campaignId
         * @property {string|null} [clickDate] AdAttributionInfo clickDate
         * @property {string|null} [conversionDate] AdAttributionInfo conversionDate
         * @property {string|null} [conversionType] AdAttributionInfo conversionType
         * @property {string|null} [geo] AdAttributionInfo geo
         * @property {string|null} [adgroupName] AdAttributionInfo adgroupName
         * @property {string|null} [adgroupId] AdAttributionInfo adgroupId
         * @property {string|null} [keyword] AdAttributionInfo keyword
         * @property {string|null} [keywordId] AdAttributionInfo keywordId
         * @property {string|null} [keywordExtra] AdAttributionInfo keywordExtra
         * @property {string|null} [creativesetName] AdAttributionInfo creativesetName
         * @property {string|null} [creativesetId] AdAttributionInfo creativesetId
         */

        /**
         * Constructs a new AdAttributionInfo.
         * @memberof ei
         * @classdesc Represents an AdAttributionInfo.
         * @implements IAdAttributionInfo
         * @constructor
         * @param {ei.IAdAttributionInfo=} [properties] Properties to set
         */
        function AdAttributionInfo(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * AdAttributionInfo deviceAdId.
         * @member {string} deviceAdId
         * @memberof ei.AdAttributionInfo
         * @instance
         */
        AdAttributionInfo.prototype.deviceAdId = "";

        /**
         * AdAttributionInfo networkName.
         * @member {string} networkName
         * @memberof ei.AdAttributionInfo
         * @instance
         */
        AdAttributionInfo.prototype.networkName = "";

        /**
         * AdAttributionInfo attribution.
         * @member {boolean} attribution
         * @memberof ei.AdAttributionInfo
         * @instance
         */
        AdAttributionInfo.prototype.attribution = false;

        /**
         * AdAttributionInfo orgName.
         * @member {string} orgName
         * @memberof ei.AdAttributionInfo
         * @instance
         */
        AdAttributionInfo.prototype.orgName = "";

        /**
         * AdAttributionInfo orgId.
         * @member {string} orgId
         * @memberof ei.AdAttributionInfo
         * @instance
         */
        AdAttributionInfo.prototype.orgId = "";

        /**
         * AdAttributionInfo campaignName.
         * @member {string} campaignName
         * @memberof ei.AdAttributionInfo
         * @instance
         */
        AdAttributionInfo.prototype.campaignName = "";

        /**
         * AdAttributionInfo campaignId.
         * @member {string} campaignId
         * @memberof ei.AdAttributionInfo
         * @instance
         */
        AdAttributionInfo.prototype.campaignId = "";

        /**
         * AdAttributionInfo clickDate.
         * @member {string} clickDate
         * @memberof ei.AdAttributionInfo
         * @instance
         */
        AdAttributionInfo.prototype.clickDate = "";

        /**
         * AdAttributionInfo conversionDate.
         * @member {string} conversionDate
         * @memberof ei.AdAttributionInfo
         * @instance
         */
        AdAttributionInfo.prototype.conversionDate = "";

        /**
         * AdAttributionInfo conversionType.
         * @member {string} conversionType
         * @memberof ei.AdAttributionInfo
         * @instance
         */
        AdAttributionInfo.prototype.conversionType = "";

        /**
         * AdAttributionInfo geo.
         * @member {string} geo
         * @memberof ei.AdAttributionInfo
         * @instance
         */
        AdAttributionInfo.prototype.geo = "";

        /**
         * AdAttributionInfo adgroupName.
         * @member {string} adgroupName
         * @memberof ei.AdAttributionInfo
         * @instance
         */
        AdAttributionInfo.prototype.adgroupName = "";

        /**
         * AdAttributionInfo adgroupId.
         * @member {string} adgroupId
         * @memberof ei.AdAttributionInfo
         * @instance
         */
        AdAttributionInfo.prototype.adgroupId = "";

        /**
         * AdAttributionInfo keyword.
         * @member {string} keyword
         * @memberof ei.AdAttributionInfo
         * @instance
         */
        AdAttributionInfo.prototype.keyword = "";

        /**
         * AdAttributionInfo keywordId.
         * @member {string} keywordId
         * @memberof ei.AdAttributionInfo
         * @instance
         */
        AdAttributionInfo.prototype.keywordId = "";

        /**
         * AdAttributionInfo keywordExtra.
         * @member {string} keywordExtra
         * @memberof ei.AdAttributionInfo
         * @instance
         */
        AdAttributionInfo.prototype.keywordExtra = "";

        /**
         * AdAttributionInfo creativesetName.
         * @member {string} creativesetName
         * @memberof ei.AdAttributionInfo
         * @instance
         */
        AdAttributionInfo.prototype.creativesetName = "";

        /**
         * AdAttributionInfo creativesetId.
         * @member {string} creativesetId
         * @memberof ei.AdAttributionInfo
         * @instance
         */
        AdAttributionInfo.prototype.creativesetId = "";

        /**
         * Creates a new AdAttributionInfo instance using the specified properties.
         * @function create
         * @memberof ei.AdAttributionInfo
         * @static
         * @param {ei.IAdAttributionInfo=} [properties] Properties to set
         * @returns {ei.AdAttributionInfo} AdAttributionInfo instance
         */
        AdAttributionInfo.create = function create(properties) {
            return new AdAttributionInfo(properties);
        };

        /**
         * Encodes the specified AdAttributionInfo message. Does not implicitly {@link ei.AdAttributionInfo.verify|verify} messages.
         * @function encode
         * @memberof ei.AdAttributionInfo
         * @static
         * @param {ei.IAdAttributionInfo} message AdAttributionInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        AdAttributionInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.deviceAdId != null && Object.hasOwnProperty.call(message, "deviceAdId"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.deviceAdId);
            if (message.networkName != null && Object.hasOwnProperty.call(message, "networkName"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.networkName);
            if (message.attribution != null && Object.hasOwnProperty.call(message, "attribution"))
                writer.uint32(/* id 3, wireType 0 =*/24).bool(message.attribution);
            if (message.orgName != null && Object.hasOwnProperty.call(message, "orgName"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.orgName);
            if (message.orgId != null && Object.hasOwnProperty.call(message, "orgId"))
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.orgId);
            if (message.campaignName != null && Object.hasOwnProperty.call(message, "campaignName"))
                writer.uint32(/* id 6, wireType 2 =*/50).string(message.campaignName);
            if (message.campaignId != null && Object.hasOwnProperty.call(message, "campaignId"))
                writer.uint32(/* id 7, wireType 2 =*/58).string(message.campaignId);
            if (message.clickDate != null && Object.hasOwnProperty.call(message, "clickDate"))
                writer.uint32(/* id 8, wireType 2 =*/66).string(message.clickDate);
            if (message.conversionDate != null && Object.hasOwnProperty.call(message, "conversionDate"))
                writer.uint32(/* id 9, wireType 2 =*/74).string(message.conversionDate);
            if (message.conversionType != null && Object.hasOwnProperty.call(message, "conversionType"))
                writer.uint32(/* id 10, wireType 2 =*/82).string(message.conversionType);
            if (message.geo != null && Object.hasOwnProperty.call(message, "geo"))
                writer.uint32(/* id 11, wireType 2 =*/90).string(message.geo);
            if (message.adgroupName != null && Object.hasOwnProperty.call(message, "adgroupName"))
                writer.uint32(/* id 12, wireType 2 =*/98).string(message.adgroupName);
            if (message.adgroupId != null && Object.hasOwnProperty.call(message, "adgroupId"))
                writer.uint32(/* id 13, wireType 2 =*/106).string(message.adgroupId);
            if (message.keyword != null && Object.hasOwnProperty.call(message, "keyword"))
                writer.uint32(/* id 14, wireType 2 =*/114).string(message.keyword);
            if (message.keywordId != null && Object.hasOwnProperty.call(message, "keywordId"))
                writer.uint32(/* id 15, wireType 2 =*/122).string(message.keywordId);
            if (message.keywordExtra != null && Object.hasOwnProperty.call(message, "keywordExtra"))
                writer.uint32(/* id 16, wireType 2 =*/130).string(message.keywordExtra);
            if (message.creativesetName != null && Object.hasOwnProperty.call(message, "creativesetName"))
                writer.uint32(/* id 17, wireType 2 =*/138).string(message.creativesetName);
            if (message.creativesetId != null && Object.hasOwnProperty.call(message, "creativesetId"))
                writer.uint32(/* id 18, wireType 2 =*/146).string(message.creativesetId);
            return writer;
        };

        /**
         * Encodes the specified AdAttributionInfo message, length delimited. Does not implicitly {@link ei.AdAttributionInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ei.AdAttributionInfo
         * @static
         * @param {ei.IAdAttributionInfo} message AdAttributionInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        AdAttributionInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an AdAttributionInfo message from the specified reader or buffer.
         * @function decode
         * @memberof ei.AdAttributionInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ei.AdAttributionInfo} AdAttributionInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        AdAttributionInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ei.AdAttributionInfo();
            while (reader.pos < end) {
                let tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.deviceAdId = reader.string();
                    break;
                case 2:
                    message.networkName = reader.string();
                    break;
                case 3:
                    message.attribution = reader.bool();
                    break;
                case 4:
                    message.orgName = reader.string();
                    break;
                case 5:
                    message.orgId = reader.string();
                    break;
                case 6:
                    message.campaignName = reader.string();
                    break;
                case 7:
                    message.campaignId = reader.string();
                    break;
                case 8:
                    message.clickDate = reader.string();
                    break;
                case 9:
                    message.conversionDate = reader.string();
                    break;
                case 10:
                    message.conversionType = reader.string();
                    break;
                case 11:
                    message.geo = reader.string();
                    break;
                case 12:
                    message.adgroupName = reader.string();
                    break;
                case 13:
                    message.adgroupId = reader.string();
                    break;
                case 14:
                    message.keyword = reader.string();
                    break;
                case 15:
                    message.keywordId = reader.string();
                    break;
                case 16:
                    message.keywordExtra = reader.string();
                    break;
                case 17:
                    message.creativesetName = reader.string();
                    break;
                case 18:
                    message.creativesetId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an AdAttributionInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ei.AdAttributionInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ei.AdAttributionInfo} AdAttributionInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        AdAttributionInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an AdAttributionInfo message.
         * @function verify
         * @memberof ei.AdAttributionInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        AdAttributionInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.deviceAdId != null && message.hasOwnProperty("deviceAdId"))
                if (!$util.isString(message.deviceAdId))
                    return "deviceAdId: string expected";
            if (message.networkName != null && message.hasOwnProperty("networkName"))
                if (!$util.isString(message.networkName))
                    return "networkName: string expected";
            if (message.attribution != null && message.hasOwnProperty("attribution"))
                if (typeof message.attribution !== "boolean")
                    return "attribution: boolean expected";
            if (message.orgName != null && message.hasOwnProperty("orgName"))
                if (!$util.isString(message.orgName))
                    return "orgName: string expected";
            if (message.orgId != null && message.hasOwnProperty("orgId"))
                if (!$util.isString(message.orgId))
                    return "orgId: string expected";
            if (message.campaignName != null && message.hasOwnProperty("campaignName"))
                if (!$util.isString(message.campaignName))
                    return "campaignName: string expected";
            if (message.campaignId != null && message.hasOwnProperty("campaignId"))
                if (!$util.isString(message.campaignId))
                    return "campaignId: string expected";
            if (message.clickDate != null && message.hasOwnProperty("clickDate"))
                if (!$util.isString(message.clickDate))
                    return "clickDate: string expected";
            if (message.conversionDate != null && message.hasOwnProperty("conversionDate"))
                if (!$util.isString(message.conversionDate))
                    return "conversionDate: string expected";
            if (message.conversionType != null && message.hasOwnProperty("conversionType"))
                if (!$util.isString(message.conversionType))
                    return "conversionType: string expected";
            if (message.geo != null && message.hasOwnProperty("geo"))
                if (!$util.isString(message.geo))
                    return "geo: string expected";
            if (message.adgroupName != null && message.hasOwnProperty("adgroupName"))
                if (!$util.isString(message.adgroupName))
                    return "adgroupName: string expected";
            if (message.adgroupId != null && message.hasOwnProperty("adgroupId"))
                if (!$util.isString(message.adgroupId))
                    return "adgroupId: string expected";
            if (message.keyword != null && message.hasOwnProperty("keyword"))
                if (!$util.isString(message.keyword))
                    return "keyword: string expected";
            if (message.keywordId != null && message.hasOwnProperty("keywordId"))
                if (!$util.isString(message.keywordId))
                    return "keywordId: string expected";
            if (message.keywordExtra != null && message.hasOwnProperty("keywordExtra"))
                if (!$util.isString(message.keywordExtra))
                    return "keywordExtra: string expected";
            if (message.creativesetName != null && message.hasOwnProperty("creativesetName"))
                if (!$util.isString(message.creativesetName))
                    return "creativesetName: string expected";
            if (message.creativesetId != null && message.hasOwnProperty("creativesetId"))
                if (!$util.isString(message.creativesetId))
                    return "creativesetId: string expected";
            return null;
        };

        /**
         * Creates an AdAttributionInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ei.AdAttributionInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ei.AdAttributionInfo} AdAttributionInfo
         */
        AdAttributionInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.ei.AdAttributionInfo)
                return object;
            let message = new $root.ei.AdAttributionInfo();
            if (object.deviceAdId != null)
                message.deviceAdId = String(object.deviceAdId);
            if (object.networkName != null)
                message.networkName = String(object.networkName);
            if (object.attribution != null)
                message.attribution = Boolean(object.attribution);
            if (object.orgName != null)
                message.orgName = String(object.orgName);
            if (object.orgId != null)
                message.orgId = String(object.orgId);
            if (object.campaignName != null)
                message.campaignName = String(object.campaignName);
            if (object.campaignId != null)
                message.campaignId = String(object.campaignId);
            if (object.clickDate != null)
                message.clickDate = String(object.clickDate);
            if (object.conversionDate != null)
                message.conversionDate = String(object.conversionDate);
            if (object.conversionType != null)
                message.conversionType = String(object.conversionType);
            if (object.geo != null)
                message.geo = String(object.geo);
            if (object.adgroupName != null)
                message.adgroupName = String(object.adgroupName);
            if (object.adgroupId != null)
                message.adgroupId = String(object.adgroupId);
            if (object.keyword != null)
                message.keyword = String(object.keyword);
            if (object.keywordId != null)
                message.keywordId = String(object.keywordId);
            if (object.keywordExtra != null)
                message.keywordExtra = String(object.keywordExtra);
            if (object.creativesetName != null)
                message.creativesetName = String(object.creativesetName);
            if (object.creativesetId != null)
                message.creativesetId = String(object.creativesetId);
            return message;
        };

        /**
         * Creates a plain object from an AdAttributionInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ei.AdAttributionInfo
         * @static
         * @param {ei.AdAttributionInfo} message AdAttributionInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        AdAttributionInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.defaults) {
                object.deviceAdId = "";
                object.networkName = "";
                object.attribution = false;
                object.orgName = "";
                object.orgId = "";
                object.campaignName = "";
                object.campaignId = "";
                object.clickDate = "";
                object.conversionDate = "";
                object.conversionType = "";
                object.geo = "";
                object.adgroupName = "";
                object.adgroupId = "";
                object.keyword = "";
                object.keywordId = "";
                object.keywordExtra = "";
                object.creativesetName = "";
                object.creativesetId = "";
            }
            if (message.deviceAdId != null && message.hasOwnProperty("deviceAdId"))
                object.deviceAdId = message.deviceAdId;
            if (message.networkName != null && message.hasOwnProperty("networkName"))
                object.networkName = message.networkName;
            if (message.attribution != null && message.hasOwnProperty("attribution"))
                object.attribution = message.attribution;
            if (message.orgName != null && message.hasOwnProperty("orgName"))
                object.orgName = message.orgName;
            if (message.orgId != null && message.hasOwnProperty("orgId"))
                object.orgId = message.orgId;
            if (message.campaignName != null && message.hasOwnProperty("campaignName"))
                object.campaignName = message.campaignName;
            if (message.campaignId != null && message.hasOwnProperty("campaignId"))
                object.campaignId = message.campaignId;
            if (message.clickDate != null && message.hasOwnProperty("clickDate"))
                object.clickDate = message.clickDate;
            if (message.conversionDate != null && message.hasOwnProperty("conversionDate"))
                object.conversionDate = message.conversionDate;
            if (message.conversionType != null && message.hasOwnProperty("conversionType"))
                object.conversionType = message.conversionType;
            if (message.geo != null && message.hasOwnProperty("geo"))
                object.geo = message.geo;
            if (message.adgroupName != null && message.hasOwnProperty("adgroupName"))
                object.adgroupName = message.adgroupName;
            if (message.adgroupId != null && message.hasOwnProperty("adgroupId"))
                object.adgroupId = message.adgroupId;
            if (message.keyword != null && message.hasOwnProperty("keyword"))
                object.keyword = message.keyword;
            if (message.keywordId != null && message.hasOwnProperty("keywordId"))
                object.keywordId = message.keywordId;
            if (message.keywordExtra != null && message.hasOwnProperty("keywordExtra"))
                object.keywordExtra = message.keywordExtra;
            if (message.creativesetName != null && message.hasOwnProperty("creativesetName"))
                object.creativesetName = message.creativesetName;
            if (message.creativesetId != null && message.hasOwnProperty("creativesetId"))
                object.creativesetId = message.creativesetId;
            return object;
        };

        /**
         * Converts this AdAttributionInfo to JSON.
         * @function toJSON
         * @memberof ei.AdAttributionInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        AdAttributionInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return AdAttributionInfo;
    })();

    ei.MissionInfo = (function() {

        /**
         * Properties of a MissionInfo.
         * @memberof ei
         * @interface IMissionInfo
         * @property {ei.MissionInfo.Spaceship|null} [ship] MissionInfo ship
         * @property {ei.MissionInfo.Status|null} [status] MissionInfo status
         * @property {ei.MissionInfo.DurationType|null} [durationType] MissionInfo durationType
         * @property {Array.<ei.MissionInfo.IFuel>|null} [fuel] MissionInfo fuel
         * @property {number|null} [durationSeconds] MissionInfo durationSeconds
         * @property {number|null} [capacity] MissionInfo capacity
         * @property {number|null} [secondsRemaining] MissionInfo secondsRemaining
         * @property {number|null} [startTimeDerived] MissionInfo startTimeDerived
         * @property {string|null} [missionLog] MissionInfo missionLog
         * @property {string|null} [identifier] MissionInfo identifier
         */

        /**
         * Constructs a new MissionInfo.
         * @memberof ei
         * @classdesc Represents a MissionInfo.
         * @implements IMissionInfo
         * @constructor
         * @param {ei.IMissionInfo=} [properties] Properties to set
         */
        function MissionInfo(properties) {
            this.fuel = [];
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * MissionInfo ship.
         * @member {ei.MissionInfo.Spaceship} ship
         * @memberof ei.MissionInfo
         * @instance
         */
        MissionInfo.prototype.ship = 0;

        /**
         * MissionInfo status.
         * @member {ei.MissionInfo.Status} status
         * @memberof ei.MissionInfo
         * @instance
         */
        MissionInfo.prototype.status = 0;

        /**
         * MissionInfo durationType.
         * @member {ei.MissionInfo.DurationType} durationType
         * @memberof ei.MissionInfo
         * @instance
         */
        MissionInfo.prototype.durationType = 0;

        /**
         * MissionInfo fuel.
         * @member {Array.<ei.MissionInfo.IFuel>} fuel
         * @memberof ei.MissionInfo
         * @instance
         */
        MissionInfo.prototype.fuel = $util.emptyArray;

        /**
         * MissionInfo durationSeconds.
         * @member {number} durationSeconds
         * @memberof ei.MissionInfo
         * @instance
         */
        MissionInfo.prototype.durationSeconds = 0;

        /**
         * MissionInfo capacity.
         * @member {number} capacity
         * @memberof ei.MissionInfo
         * @instance
         */
        MissionInfo.prototype.capacity = 0;

        /**
         * MissionInfo secondsRemaining.
         * @member {number} secondsRemaining
         * @memberof ei.MissionInfo
         * @instance
         */
        MissionInfo.prototype.secondsRemaining = 0;

        /**
         * MissionInfo startTimeDerived.
         * @member {number} startTimeDerived
         * @memberof ei.MissionInfo
         * @instance
         */
        MissionInfo.prototype.startTimeDerived = 0;

        /**
         * MissionInfo missionLog.
         * @member {string} missionLog
         * @memberof ei.MissionInfo
         * @instance
         */
        MissionInfo.prototype.missionLog = "";

        /**
         * MissionInfo identifier.
         * @member {string} identifier
         * @memberof ei.MissionInfo
         * @instance
         */
        MissionInfo.prototype.identifier = "";

        /**
         * Creates a new MissionInfo instance using the specified properties.
         * @function create
         * @memberof ei.MissionInfo
         * @static
         * @param {ei.IMissionInfo=} [properties] Properties to set
         * @returns {ei.MissionInfo} MissionInfo instance
         */
        MissionInfo.create = function create(properties) {
            return new MissionInfo(properties);
        };

        /**
         * Encodes the specified MissionInfo message. Does not implicitly {@link ei.MissionInfo.verify|verify} messages.
         * @function encode
         * @memberof ei.MissionInfo
         * @static
         * @param {ei.IMissionInfo} message MissionInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MissionInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.ship != null && Object.hasOwnProperty.call(message, "ship"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.ship);
            if (message.status != null && Object.hasOwnProperty.call(message, "status"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.status);
            if (message.durationType != null && Object.hasOwnProperty.call(message, "durationType"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.durationType);
            if (message.fuel != null && message.fuel.length)
                for (let i = 0; i < message.fuel.length; ++i)
                    $root.ei.MissionInfo.Fuel.encode(message.fuel[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            if (message.durationSeconds != null && Object.hasOwnProperty.call(message, "durationSeconds"))
                writer.uint32(/* id 5, wireType 1 =*/41).double(message.durationSeconds);
            if (message.secondsRemaining != null && Object.hasOwnProperty.call(message, "secondsRemaining"))
                writer.uint32(/* id 6, wireType 1 =*/49).double(message.secondsRemaining);
            if (message.identifier != null && Object.hasOwnProperty.call(message, "identifier"))
                writer.uint32(/* id 7, wireType 2 =*/58).string(message.identifier);
            if (message.startTimeDerived != null && Object.hasOwnProperty.call(message, "startTimeDerived"))
                writer.uint32(/* id 8, wireType 1 =*/65).double(message.startTimeDerived);
            if (message.capacity != null && Object.hasOwnProperty.call(message, "capacity"))
                writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.capacity);
            if (message.missionLog != null && Object.hasOwnProperty.call(message, "missionLog"))
                writer.uint32(/* id 10, wireType 2 =*/82).string(message.missionLog);
            return writer;
        };

        /**
         * Encodes the specified MissionInfo message, length delimited. Does not implicitly {@link ei.MissionInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ei.MissionInfo
         * @static
         * @param {ei.IMissionInfo} message MissionInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MissionInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a MissionInfo message from the specified reader or buffer.
         * @function decode
         * @memberof ei.MissionInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ei.MissionInfo} MissionInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MissionInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ei.MissionInfo();
            while (reader.pos < end) {
                let tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.ship = reader.int32();
                    break;
                case 2:
                    message.status = reader.int32();
                    break;
                case 3:
                    message.durationType = reader.int32();
                    break;
                case 4:
                    if (!(message.fuel && message.fuel.length))
                        message.fuel = [];
                    message.fuel.push($root.ei.MissionInfo.Fuel.decode(reader, reader.uint32()));
                    break;
                case 5:
                    message.durationSeconds = reader.double();
                    break;
                case 9:
                    message.capacity = reader.uint32();
                    break;
                case 6:
                    message.secondsRemaining = reader.double();
                    break;
                case 8:
                    message.startTimeDerived = reader.double();
                    break;
                case 10:
                    message.missionLog = reader.string();
                    break;
                case 7:
                    message.identifier = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a MissionInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ei.MissionInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ei.MissionInfo} MissionInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MissionInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a MissionInfo message.
         * @function verify
         * @memberof ei.MissionInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        MissionInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.ship != null && message.hasOwnProperty("ship"))
                switch (message.ship) {
                default:
                    return "ship: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                    break;
                }
            if (message.status != null && message.hasOwnProperty("status"))
                switch (message.status) {
                default:
                    return "status: enum value expected";
                case 0:
                case 5:
                case 10:
                case 15:
                case 16:
                case 20:
                case 25:
                    break;
                }
            if (message.durationType != null && message.hasOwnProperty("durationType"))
                switch (message.durationType) {
                default:
                    return "durationType: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                    break;
                }
            if (message.fuel != null && message.hasOwnProperty("fuel")) {
                if (!Array.isArray(message.fuel))
                    return "fuel: array expected";
                for (let i = 0; i < message.fuel.length; ++i) {
                    let error = $root.ei.MissionInfo.Fuel.verify(message.fuel[i]);
                    if (error)
                        return "fuel." + error;
                }
            }
            if (message.durationSeconds != null && message.hasOwnProperty("durationSeconds"))
                if (typeof message.durationSeconds !== "number")
                    return "durationSeconds: number expected";
            if (message.capacity != null && message.hasOwnProperty("capacity"))
                if (!$util.isInteger(message.capacity))
                    return "capacity: integer expected";
            if (message.secondsRemaining != null && message.hasOwnProperty("secondsRemaining"))
                if (typeof message.secondsRemaining !== "number")
                    return "secondsRemaining: number expected";
            if (message.startTimeDerived != null && message.hasOwnProperty("startTimeDerived"))
                if (typeof message.startTimeDerived !== "number")
                    return "startTimeDerived: number expected";
            if (message.missionLog != null && message.hasOwnProperty("missionLog"))
                if (!$util.isString(message.missionLog))
                    return "missionLog: string expected";
            if (message.identifier != null && message.hasOwnProperty("identifier"))
                if (!$util.isString(message.identifier))
                    return "identifier: string expected";
            return null;
        };

        /**
         * Creates a MissionInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ei.MissionInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ei.MissionInfo} MissionInfo
         */
        MissionInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.ei.MissionInfo)
                return object;
            let message = new $root.ei.MissionInfo();
            switch (object.ship) {
            case "CHICKEN_ONE":
            case 0:
                message.ship = 0;
                break;
            case "CHICKEN_NINE":
            case 1:
                message.ship = 1;
                break;
            case "CHICKEN_HEAVY":
            case 2:
                message.ship = 2;
                break;
            case "BCR":
            case 3:
                message.ship = 3;
                break;
            case "MILLENIUM_CHICKEN":
            case 4:
                message.ship = 4;
                break;
            case "CORELLIHEN_CORVETTE":
            case 5:
                message.ship = 5;
                break;
            case "GALEGGTICA":
            case 6:
                message.ship = 6;
                break;
            case "CHICKFIANT":
            case 7:
                message.ship = 7;
                break;
            case "VOYEGGER":
            case 8:
                message.ship = 8;
                break;
            case "HENERPRISE":
            case 9:
                message.ship = 9;
                break;
            }
            switch (object.status) {
            case "FUELING":
            case 0:
                message.status = 0;
                break;
            case "PREPARE_TO_LAUNCH":
            case 5:
                message.status = 5;
                break;
            case "EXPLORING":
            case 10:
                message.status = 10;
                break;
            case "RETURNED":
            case 15:
                message.status = 15;
                break;
            case "ANALYZING":
            case 16:
                message.status = 16;
                break;
            case "COMPLETE":
            case 20:
                message.status = 20;
                break;
            case "ARCHIVED":
            case 25:
                message.status = 25;
                break;
            }
            switch (object.durationType) {
            case "SHORT":
            case 0:
                message.durationType = 0;
                break;
            case "LONG":
            case 1:
                message.durationType = 1;
                break;
            case "EPIC":
            case 2:
                message.durationType = 2;
                break;
            case "TUTORIAL":
            case 3:
                message.durationType = 3;
                break;
            }
            if (object.fuel) {
                if (!Array.isArray(object.fuel))
                    throw TypeError(".ei.MissionInfo.fuel: array expected");
                message.fuel = [];
                for (let i = 0; i < object.fuel.length; ++i) {
                    if (typeof object.fuel[i] !== "object")
                        throw TypeError(".ei.MissionInfo.fuel: object expected");
                    message.fuel[i] = $root.ei.MissionInfo.Fuel.fromObject(object.fuel[i]);
                }
            }
            if (object.durationSeconds != null)
                message.durationSeconds = Number(object.durationSeconds);
            if (object.capacity != null)
                message.capacity = object.capacity >>> 0;
            if (object.secondsRemaining != null)
                message.secondsRemaining = Number(object.secondsRemaining);
            if (object.startTimeDerived != null)
                message.startTimeDerived = Number(object.startTimeDerived);
            if (object.missionLog != null)
                message.missionLog = String(object.missionLog);
            if (object.identifier != null)
                message.identifier = String(object.identifier);
            return message;
        };

        /**
         * Creates a plain object from a MissionInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ei.MissionInfo
         * @static
         * @param {ei.MissionInfo} message MissionInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        MissionInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.arrays || options.defaults)
                object.fuel = [];
            if (options.defaults) {
                object.ship = options.enums === String ? "CHICKEN_ONE" : 0;
                object.status = options.enums === String ? "FUELING" : 0;
                object.durationType = options.enums === String ? "SHORT" : 0;
                object.durationSeconds = 0;
                object.secondsRemaining = 0;
                object.identifier = "";
                object.startTimeDerived = 0;
                object.capacity = 0;
                object.missionLog = "";
            }
            if (message.ship != null && message.hasOwnProperty("ship"))
                object.ship = options.enums === String ? $root.ei.MissionInfo.Spaceship[message.ship] : message.ship;
            if (message.status != null && message.hasOwnProperty("status"))
                object.status = options.enums === String ? $root.ei.MissionInfo.Status[message.status] : message.status;
            if (message.durationType != null && message.hasOwnProperty("durationType"))
                object.durationType = options.enums === String ? $root.ei.MissionInfo.DurationType[message.durationType] : message.durationType;
            if (message.fuel && message.fuel.length) {
                object.fuel = [];
                for (let j = 0; j < message.fuel.length; ++j)
                    object.fuel[j] = $root.ei.MissionInfo.Fuel.toObject(message.fuel[j], options);
            }
            if (message.durationSeconds != null && message.hasOwnProperty("durationSeconds"))
                object.durationSeconds = options.json && !isFinite(message.durationSeconds) ? String(message.durationSeconds) : message.durationSeconds;
            if (message.secondsRemaining != null && message.hasOwnProperty("secondsRemaining"))
                object.secondsRemaining = options.json && !isFinite(message.secondsRemaining) ? String(message.secondsRemaining) : message.secondsRemaining;
            if (message.identifier != null && message.hasOwnProperty("identifier"))
                object.identifier = message.identifier;
            if (message.startTimeDerived != null && message.hasOwnProperty("startTimeDerived"))
                object.startTimeDerived = options.json && !isFinite(message.startTimeDerived) ? String(message.startTimeDerived) : message.startTimeDerived;
            if (message.capacity != null && message.hasOwnProperty("capacity"))
                object.capacity = message.capacity;
            if (message.missionLog != null && message.hasOwnProperty("missionLog"))
                object.missionLog = message.missionLog;
            return object;
        };

        /**
         * Converts this MissionInfo to JSON.
         * @function toJSON
         * @memberof ei.MissionInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        MissionInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Spaceship enum.
         * @name ei.MissionInfo.Spaceship
         * @enum {number}
         * @property {number} CHICKEN_ONE=0 CHICKEN_ONE value
         * @property {number} CHICKEN_NINE=1 CHICKEN_NINE value
         * @property {number} CHICKEN_HEAVY=2 CHICKEN_HEAVY value
         * @property {number} BCR=3 BCR value
         * @property {number} MILLENIUM_CHICKEN=4 MILLENIUM_CHICKEN value
         * @property {number} CORELLIHEN_CORVETTE=5 CORELLIHEN_CORVETTE value
         * @property {number} GALEGGTICA=6 GALEGGTICA value
         * @property {number} CHICKFIANT=7 CHICKFIANT value
         * @property {number} VOYEGGER=8 VOYEGGER value
         * @property {number} HENERPRISE=9 HENERPRISE value
         */
        MissionInfo.Spaceship = (function() {
            const valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "CHICKEN_ONE"] = 0;
            values[valuesById[1] = "CHICKEN_NINE"] = 1;
            values[valuesById[2] = "CHICKEN_HEAVY"] = 2;
            values[valuesById[3] = "BCR"] = 3;
            values[valuesById[4] = "MILLENIUM_CHICKEN"] = 4;
            values[valuesById[5] = "CORELLIHEN_CORVETTE"] = 5;
            values[valuesById[6] = "GALEGGTICA"] = 6;
            values[valuesById[7] = "CHICKFIANT"] = 7;
            values[valuesById[8] = "VOYEGGER"] = 8;
            values[valuesById[9] = "HENERPRISE"] = 9;
            return values;
        })();

        /**
         * Status enum.
         * @name ei.MissionInfo.Status
         * @enum {number}
         * @property {number} FUELING=0 FUELING value
         * @property {number} PREPARE_TO_LAUNCH=5 PREPARE_TO_LAUNCH value
         * @property {number} EXPLORING=10 EXPLORING value
         * @property {number} RETURNED=15 RETURNED value
         * @property {number} ANALYZING=16 ANALYZING value
         * @property {number} COMPLETE=20 COMPLETE value
         * @property {number} ARCHIVED=25 ARCHIVED value
         */
        MissionInfo.Status = (function() {
            const valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "FUELING"] = 0;
            values[valuesById[5] = "PREPARE_TO_LAUNCH"] = 5;
            values[valuesById[10] = "EXPLORING"] = 10;
            values[valuesById[15] = "RETURNED"] = 15;
            values[valuesById[16] = "ANALYZING"] = 16;
            values[valuesById[20] = "COMPLETE"] = 20;
            values[valuesById[25] = "ARCHIVED"] = 25;
            return values;
        })();

        /**
         * DurationType enum.
         * @name ei.MissionInfo.DurationType
         * @enum {number}
         * @property {number} SHORT=0 SHORT value
         * @property {number} LONG=1 LONG value
         * @property {number} EPIC=2 EPIC value
         * @property {number} TUTORIAL=3 TUTORIAL value
         */
        MissionInfo.DurationType = (function() {
            const valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "SHORT"] = 0;
            values[valuesById[1] = "LONG"] = 1;
            values[valuesById[2] = "EPIC"] = 2;
            values[valuesById[3] = "TUTORIAL"] = 3;
            return values;
        })();

        MissionInfo.Fuel = (function() {

            /**
             * Properties of a Fuel.
             * @memberof ei.MissionInfo
             * @interface IFuel
             * @property {ei.Egg|null} [egg] Fuel egg
             * @property {number|null} [amount] Fuel amount
             */

            /**
             * Constructs a new Fuel.
             * @memberof ei.MissionInfo
             * @classdesc Represents a Fuel.
             * @implements IFuel
             * @constructor
             * @param {ei.MissionInfo.IFuel=} [properties] Properties to set
             */
            function Fuel(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Fuel egg.
             * @member {ei.Egg} egg
             * @memberof ei.MissionInfo.Fuel
             * @instance
             */
            Fuel.prototype.egg = 1;

            /**
             * Fuel amount.
             * @member {number} amount
             * @memberof ei.MissionInfo.Fuel
             * @instance
             */
            Fuel.prototype.amount = 0;

            /**
             * Creates a new Fuel instance using the specified properties.
             * @function create
             * @memberof ei.MissionInfo.Fuel
             * @static
             * @param {ei.MissionInfo.IFuel=} [properties] Properties to set
             * @returns {ei.MissionInfo.Fuel} Fuel instance
             */
            Fuel.create = function create(properties) {
                return new Fuel(properties);
            };

            /**
             * Encodes the specified Fuel message. Does not implicitly {@link ei.MissionInfo.Fuel.verify|verify} messages.
             * @function encode
             * @memberof ei.MissionInfo.Fuel
             * @static
             * @param {ei.MissionInfo.IFuel} message Fuel message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Fuel.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.egg != null && Object.hasOwnProperty.call(message, "egg"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.egg);
                if (message.amount != null && Object.hasOwnProperty.call(message, "amount"))
                    writer.uint32(/* id 2, wireType 1 =*/17).double(message.amount);
                return writer;
            };

            /**
             * Encodes the specified Fuel message, length delimited. Does not implicitly {@link ei.MissionInfo.Fuel.verify|verify} messages.
             * @function encodeDelimited
             * @memberof ei.MissionInfo.Fuel
             * @static
             * @param {ei.MissionInfo.IFuel} message Fuel message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Fuel.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Fuel message from the specified reader or buffer.
             * @function decode
             * @memberof ei.MissionInfo.Fuel
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {ei.MissionInfo.Fuel} Fuel
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Fuel.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ei.MissionInfo.Fuel();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.egg = reader.int32();
                        break;
                    case 2:
                        message.amount = reader.double();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Fuel message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof ei.MissionInfo.Fuel
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {ei.MissionInfo.Fuel} Fuel
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Fuel.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Fuel message.
             * @function verify
             * @memberof ei.MissionInfo.Fuel
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Fuel.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.egg != null && message.hasOwnProperty("egg"))
                    switch (message.egg) {
                    default:
                        return "egg: enum value expected";
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                    case 8:
                    case 9:
                    case 10:
                    case 11:
                    case 12:
                    case 13:
                    case 14:
                    case 15:
                    case 16:
                    case 17:
                    case 18:
                    case 19:
                    case 100:
                    case 101:
                    case 102:
                    case 103:
                    case 104:
                    case 1000:
                        break;
                    }
                if (message.amount != null && message.hasOwnProperty("amount"))
                    if (typeof message.amount !== "number")
                        return "amount: number expected";
                return null;
            };

            /**
             * Creates a Fuel message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof ei.MissionInfo.Fuel
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {ei.MissionInfo.Fuel} Fuel
             */
            Fuel.fromObject = function fromObject(object) {
                if (object instanceof $root.ei.MissionInfo.Fuel)
                    return object;
                let message = new $root.ei.MissionInfo.Fuel();
                switch (object.egg) {
                case "EDIBLE":
                case 1:
                    message.egg = 1;
                    break;
                case "SUPERFOOD":
                case 2:
                    message.egg = 2;
                    break;
                case "MEDICAL":
                case 3:
                    message.egg = 3;
                    break;
                case "ROCKET_FUEL":
                case 4:
                    message.egg = 4;
                    break;
                case "SUPER_MATERIAL":
                case 5:
                    message.egg = 5;
                    break;
                case "FUSION":
                case 6:
                    message.egg = 6;
                    break;
                case "QUANTUM":
                case 7:
                    message.egg = 7;
                    break;
                case "IMMORTALITY":
                case 8:
                    message.egg = 8;
                    break;
                case "TACHYON":
                case 9:
                    message.egg = 9;
                    break;
                case "GRAVITON":
                case 10:
                    message.egg = 10;
                    break;
                case "DILITHIUM":
                case 11:
                    message.egg = 11;
                    break;
                case "PRODIGY":
                case 12:
                    message.egg = 12;
                    break;
                case "TERRAFORM":
                case 13:
                    message.egg = 13;
                    break;
                case "ANTIMATTER":
                case 14:
                    message.egg = 14;
                    break;
                case "DARK_MATTER":
                case 15:
                    message.egg = 15;
                    break;
                case "AI":
                case 16:
                    message.egg = 16;
                    break;
                case "NEBULA":
                case 17:
                    message.egg = 17;
                    break;
                case "UNIVERSE":
                case 18:
                    message.egg = 18;
                    break;
                case "ENLIGHTENMENT":
                case 19:
                    message.egg = 19;
                    break;
                case "CHOCOLATE":
                case 100:
                    message.egg = 100;
                    break;
                case "EASTER":
                case 101:
                    message.egg = 101;
                    break;
                case "WATERBALLOON":
                case 102:
                    message.egg = 102;
                    break;
                case "FIREWORK":
                case 103:
                    message.egg = 103;
                    break;
                case "PUMPKIN":
                case 104:
                    message.egg = 104;
                    break;
                case "UNKNOWN":
                case 1000:
                    message.egg = 1000;
                    break;
                }
                if (object.amount != null)
                    message.amount = Number(object.amount);
                return message;
            };

            /**
             * Creates a plain object from a Fuel message. Also converts values to other types if specified.
             * @function toObject
             * @memberof ei.MissionInfo.Fuel
             * @static
             * @param {ei.MissionInfo.Fuel} message Fuel
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Fuel.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.egg = options.enums === String ? "EDIBLE" : 1;
                    object.amount = 0;
                }
                if (message.egg != null && message.hasOwnProperty("egg"))
                    object.egg = options.enums === String ? $root.ei.Egg[message.egg] : message.egg;
                if (message.amount != null && message.hasOwnProperty("amount"))
                    object.amount = options.json && !isFinite(message.amount) ? String(message.amount) : message.amount;
                return object;
            };

            /**
             * Converts this Fuel to JSON.
             * @function toJSON
             * @memberof ei.MissionInfo.Fuel
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Fuel.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Fuel;
        })();

        return MissionInfo;
    })();

    ei.ArtifactSpec = (function() {

        /**
         * Properties of an ArtifactSpec.
         * @memberof ei
         * @interface IArtifactSpec
         * @property {ei.ArtifactSpec.Name|null} [name] ArtifactSpec name
         * @property {ei.ArtifactSpec.Level|null} [level] ArtifactSpec level
         * @property {ei.ArtifactSpec.Rarity|null} [rarity] ArtifactSpec rarity
         * @property {ei.Egg|null} [egg] ArtifactSpec egg
         */

        /**
         * Constructs a new ArtifactSpec.
         * @memberof ei
         * @classdesc Represents an ArtifactSpec.
         * @implements IArtifactSpec
         * @constructor
         * @param {ei.IArtifactSpec=} [properties] Properties to set
         */
        function ArtifactSpec(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ArtifactSpec name.
         * @member {ei.ArtifactSpec.Name} name
         * @memberof ei.ArtifactSpec
         * @instance
         */
        ArtifactSpec.prototype.name = 0;

        /**
         * ArtifactSpec level.
         * @member {ei.ArtifactSpec.Level} level
         * @memberof ei.ArtifactSpec
         * @instance
         */
        ArtifactSpec.prototype.level = 0;

        /**
         * ArtifactSpec rarity.
         * @member {ei.ArtifactSpec.Rarity} rarity
         * @memberof ei.ArtifactSpec
         * @instance
         */
        ArtifactSpec.prototype.rarity = 0;

        /**
         * ArtifactSpec egg.
         * @member {ei.Egg} egg
         * @memberof ei.ArtifactSpec
         * @instance
         */
        ArtifactSpec.prototype.egg = 1;

        /**
         * Creates a new ArtifactSpec instance using the specified properties.
         * @function create
         * @memberof ei.ArtifactSpec
         * @static
         * @param {ei.IArtifactSpec=} [properties] Properties to set
         * @returns {ei.ArtifactSpec} ArtifactSpec instance
         */
        ArtifactSpec.create = function create(properties) {
            return new ArtifactSpec(properties);
        };

        /**
         * Encodes the specified ArtifactSpec message. Does not implicitly {@link ei.ArtifactSpec.verify|verify} messages.
         * @function encode
         * @memberof ei.ArtifactSpec
         * @static
         * @param {ei.IArtifactSpec} message ArtifactSpec message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ArtifactSpec.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.name);
            if (message.level != null && Object.hasOwnProperty.call(message, "level"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.level);
            if (message.rarity != null && Object.hasOwnProperty.call(message, "rarity"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.rarity);
            if (message.egg != null && Object.hasOwnProperty.call(message, "egg"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.egg);
            return writer;
        };

        /**
         * Encodes the specified ArtifactSpec message, length delimited. Does not implicitly {@link ei.ArtifactSpec.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ei.ArtifactSpec
         * @static
         * @param {ei.IArtifactSpec} message ArtifactSpec message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ArtifactSpec.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an ArtifactSpec message from the specified reader or buffer.
         * @function decode
         * @memberof ei.ArtifactSpec
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ei.ArtifactSpec} ArtifactSpec
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ArtifactSpec.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ei.ArtifactSpec();
            while (reader.pos < end) {
                let tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.name = reader.int32();
                    break;
                case 2:
                    message.level = reader.int32();
                    break;
                case 3:
                    message.rarity = reader.int32();
                    break;
                case 4:
                    message.egg = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an ArtifactSpec message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ei.ArtifactSpec
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ei.ArtifactSpec} ArtifactSpec
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ArtifactSpec.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an ArtifactSpec message.
         * @function verify
         * @memberof ei.ArtifactSpec
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ArtifactSpec.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.name != null && message.hasOwnProperty("name"))
                switch (message.name) {
                default:
                    return "name: enum value expected";
                case 0:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                case 11:
                case 12:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 1:
                case 31:
                case 32:
                case 33:
                case 34:
                case 39:
                case 36:
                case 37:
                case 38:
                case 40:
                case 13:
                case 14:
                case 15:
                case 16:
                case 17:
                case 18:
                case 19:
                case 20:
                case 35:
                case 41:
                case 42:
                case 43:
                case 2:
                case 44:
                case 45:
                case 46:
                case 47:
                case 48:
                case 49:
                case 50:
                case 51:
                case 52:
                case 10000:
                    break;
                }
            if (message.level != null && message.hasOwnProperty("level"))
                switch (message.level) {
                default:
                    return "level: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                    break;
                }
            if (message.rarity != null && message.hasOwnProperty("rarity"))
                switch (message.rarity) {
                default:
                    return "rarity: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                    break;
                }
            if (message.egg != null && message.hasOwnProperty("egg"))
                switch (message.egg) {
                default:
                    return "egg: enum value expected";
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 16:
                case 17:
                case 18:
                case 19:
                case 100:
                case 101:
                case 102:
                case 103:
                case 104:
                case 1000:
                    break;
                }
            return null;
        };

        /**
         * Creates an ArtifactSpec message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ei.ArtifactSpec
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ei.ArtifactSpec} ArtifactSpec
         */
        ArtifactSpec.fromObject = function fromObject(object) {
            if (object instanceof $root.ei.ArtifactSpec)
                return object;
            let message = new $root.ei.ArtifactSpec();
            switch (object.name) {
            case "LUNAR_TOTEM":
            case 0:
                message.name = 0;
                break;
            case "NEODYMIUM_MEDALLION":
            case 3:
                message.name = 3;
                break;
            case "BEAK_OF_MIDAS":
            case 4:
                message.name = 4;
                break;
            case "LIGHT_OF_EGGENDIL":
            case 5:
                message.name = 5;
                break;
            case "DEMETERS_NECKLACE":
            case 6:
                message.name = 6;
                break;
            case "VIAL_MARTIAN_DUST":
            case 7:
                message.name = 7;
                break;
            case "ORNATE_GUSSET":
            case 8:
                message.name = 8;
                break;
            case "THE_CHALICE":
            case 9:
                message.name = 9;
                break;
            case "BOOK_OF_BASAN":
            case 10:
                message.name = 10;
                break;
            case "PHOENIX_FEATHER":
            case 11:
                message.name = 11;
                break;
            case "TUNGSTEN_ANKH":
            case 12:
                message.name = 12;
                break;
            case "AURELIAN_BROOCH":
            case 21:
                message.name = 21;
                break;
            case "CARVED_RAINSTICK":
            case 22:
                message.name = 22;
                break;
            case "PUZZLE_CUBE":
            case 23:
                message.name = 23;
                break;
            case "QUANTUM_METRONOME":
            case 24:
                message.name = 24;
                break;
            case "SHIP_IN_A_BOTTLE":
            case 25:
                message.name = 25;
                break;
            case "TACHYON_DEFLECTOR":
            case 26:
                message.name = 26;
                break;
            case "INTERSTELLAR_COMPASS":
            case 27:
                message.name = 27;
                break;
            case "DILITHIUM_MONOCLE":
            case 28:
                message.name = 28;
                break;
            case "TITANIUM_ACTUATOR":
            case 29:
                message.name = 29;
                break;
            case "MERCURYS_LENS":
            case 30:
                message.name = 30;
                break;
            case "TACHYON_STONE":
            case 1:
                message.name = 1;
                break;
            case "DILITHIUM_STONE":
            case 31:
                message.name = 31;
                break;
            case "SHELL_STONE":
            case 32:
                message.name = 32;
                break;
            case "LUNAR_STONE":
            case 33:
                message.name = 33;
                break;
            case "SOUL_STONE":
            case 34:
                message.name = 34;
                break;
            case "PROPHECY_STONE":
            case 39:
                message.name = 39;
                break;
            case "QUANTUM_STONE":
            case 36:
                message.name = 36;
                break;
            case "TERRA_STONE":
            case 37:
                message.name = 37;
                break;
            case "LIFE_STONE":
            case 38:
                message.name = 38;
                break;
            case "CLARITY_STONE":
            case 40:
                message.name = 40;
                break;
            case "EXTRATERRESTRIAL_ALUMINUM":
            case 13:
                message.name = 13;
                break;
            case "ANCIENT_TUNGSTEN":
            case 14:
                message.name = 14;
                break;
            case "SPACE_ROCKS":
            case 15:
                message.name = 15;
                break;
            case "ALIEN_WOOD":
            case 16:
                message.name = 16;
                break;
            case "GOLD_METEORITE":
            case 17:
                message.name = 17;
                break;
            case "TAU_CETI_GEODE":
            case 18:
                message.name = 18;
                break;
            case "CENTAURIAN_STEEL":
            case 19:
                message.name = 19;
                break;
            case "ERIDANI_FEATHER":
            case 20:
                message.name = 20;
                break;
            case "DRONE_PARTS":
            case 35:
                message.name = 35;
                break;
            case "CELESTIAL_BRONZE":
            case 41:
                message.name = 41;
                break;
            case "LALANDE_HIDE":
            case 42:
                message.name = 42;
                break;
            case "SOLAR_TITANIUM":
            case 43:
                message.name = 43;
                break;
            case "TACHYON_STONE_FRAGMENT":
            case 2:
                message.name = 2;
                break;
            case "DILITHIUM_STONE_FRAGMENT":
            case 44:
                message.name = 44;
                break;
            case "SHELL_STONE_FRAGMENT":
            case 45:
                message.name = 45;
                break;
            case "LUNAR_STONE_FRAGMENT":
            case 46:
                message.name = 46;
                break;
            case "SOUL_STONE_FRAGMENT":
            case 47:
                message.name = 47;
                break;
            case "PROPHECY_STONE_FRAGMENT":
            case 48:
                message.name = 48;
                break;
            case "QUANTUM_STONE_FRAGMENT":
            case 49:
                message.name = 49;
                break;
            case "TERRA_STONE_FRAGMENT":
            case 50:
                message.name = 50;
                break;
            case "LIFE_STONE_FRAGMENT":
            case 51:
                message.name = 51;
                break;
            case "CLARITY_STONE_FRAGMENT":
            case 52:
                message.name = 52;
                break;
            case "UNKNOWN":
            case 10000:
                message.name = 10000;
                break;
            }
            switch (object.level) {
            case "INFERIOR":
            case 0:
                message.level = 0;
                break;
            case "LESSER":
            case 1:
                message.level = 1;
                break;
            case "NORMAL":
            case 2:
                message.level = 2;
                break;
            case "GREATER":
            case 3:
                message.level = 3;
                break;
            case "SUPERIOR":
            case 4:
                message.level = 4;
                break;
            }
            switch (object.rarity) {
            case "COMMON":
            case 0:
                message.rarity = 0;
                break;
            case "RARE":
            case 1:
                message.rarity = 1;
                break;
            case "EPIC":
            case 2:
                message.rarity = 2;
                break;
            case "LEGENDARY":
            case 3:
                message.rarity = 3;
                break;
            }
            switch (object.egg) {
            case "EDIBLE":
            case 1:
                message.egg = 1;
                break;
            case "SUPERFOOD":
            case 2:
                message.egg = 2;
                break;
            case "MEDICAL":
            case 3:
                message.egg = 3;
                break;
            case "ROCKET_FUEL":
            case 4:
                message.egg = 4;
                break;
            case "SUPER_MATERIAL":
            case 5:
                message.egg = 5;
                break;
            case "FUSION":
            case 6:
                message.egg = 6;
                break;
            case "QUANTUM":
            case 7:
                message.egg = 7;
                break;
            case "IMMORTALITY":
            case 8:
                message.egg = 8;
                break;
            case "TACHYON":
            case 9:
                message.egg = 9;
                break;
            case "GRAVITON":
            case 10:
                message.egg = 10;
                break;
            case "DILITHIUM":
            case 11:
                message.egg = 11;
                break;
            case "PRODIGY":
            case 12:
                message.egg = 12;
                break;
            case "TERRAFORM":
            case 13:
                message.egg = 13;
                break;
            case "ANTIMATTER":
            case 14:
                message.egg = 14;
                break;
            case "DARK_MATTER":
            case 15:
                message.egg = 15;
                break;
            case "AI":
            case 16:
                message.egg = 16;
                break;
            case "NEBULA":
            case 17:
                message.egg = 17;
                break;
            case "UNIVERSE":
            case 18:
                message.egg = 18;
                break;
            case "ENLIGHTENMENT":
            case 19:
                message.egg = 19;
                break;
            case "CHOCOLATE":
            case 100:
                message.egg = 100;
                break;
            case "EASTER":
            case 101:
                message.egg = 101;
                break;
            case "WATERBALLOON":
            case 102:
                message.egg = 102;
                break;
            case "FIREWORK":
            case 103:
                message.egg = 103;
                break;
            case "PUMPKIN":
            case 104:
                message.egg = 104;
                break;
            case "UNKNOWN":
            case 1000:
                message.egg = 1000;
                break;
            }
            return message;
        };

        /**
         * Creates a plain object from an ArtifactSpec message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ei.ArtifactSpec
         * @static
         * @param {ei.ArtifactSpec} message ArtifactSpec
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ArtifactSpec.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.defaults) {
                object.name = options.enums === String ? "LUNAR_TOTEM" : 0;
                object.level = options.enums === String ? "INFERIOR" : 0;
                object.rarity = options.enums === String ? "COMMON" : 0;
                object.egg = options.enums === String ? "EDIBLE" : 1;
            }
            if (message.name != null && message.hasOwnProperty("name"))
                object.name = options.enums === String ? $root.ei.ArtifactSpec.Name[message.name] : message.name;
            if (message.level != null && message.hasOwnProperty("level"))
                object.level = options.enums === String ? $root.ei.ArtifactSpec.Level[message.level] : message.level;
            if (message.rarity != null && message.hasOwnProperty("rarity"))
                object.rarity = options.enums === String ? $root.ei.ArtifactSpec.Rarity[message.rarity] : message.rarity;
            if (message.egg != null && message.hasOwnProperty("egg"))
                object.egg = options.enums === String ? $root.ei.Egg[message.egg] : message.egg;
            return object;
        };

        /**
         * Converts this ArtifactSpec to JSON.
         * @function toJSON
         * @memberof ei.ArtifactSpec
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ArtifactSpec.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Name enum.
         * @name ei.ArtifactSpec.Name
         * @enum {number}
         * @property {number} LUNAR_TOTEM=0 LUNAR_TOTEM value
         * @property {number} NEODYMIUM_MEDALLION=3 NEODYMIUM_MEDALLION value
         * @property {number} BEAK_OF_MIDAS=4 BEAK_OF_MIDAS value
         * @property {number} LIGHT_OF_EGGENDIL=5 LIGHT_OF_EGGENDIL value
         * @property {number} DEMETERS_NECKLACE=6 DEMETERS_NECKLACE value
         * @property {number} VIAL_MARTIAN_DUST=7 VIAL_MARTIAN_DUST value
         * @property {number} ORNATE_GUSSET=8 ORNATE_GUSSET value
         * @property {number} THE_CHALICE=9 THE_CHALICE value
         * @property {number} BOOK_OF_BASAN=10 BOOK_OF_BASAN value
         * @property {number} PHOENIX_FEATHER=11 PHOENIX_FEATHER value
         * @property {number} TUNGSTEN_ANKH=12 TUNGSTEN_ANKH value
         * @property {number} AURELIAN_BROOCH=21 AURELIAN_BROOCH value
         * @property {number} CARVED_RAINSTICK=22 CARVED_RAINSTICK value
         * @property {number} PUZZLE_CUBE=23 PUZZLE_CUBE value
         * @property {number} QUANTUM_METRONOME=24 QUANTUM_METRONOME value
         * @property {number} SHIP_IN_A_BOTTLE=25 SHIP_IN_A_BOTTLE value
         * @property {number} TACHYON_DEFLECTOR=26 TACHYON_DEFLECTOR value
         * @property {number} INTERSTELLAR_COMPASS=27 INTERSTELLAR_COMPASS value
         * @property {number} DILITHIUM_MONOCLE=28 DILITHIUM_MONOCLE value
         * @property {number} TITANIUM_ACTUATOR=29 TITANIUM_ACTUATOR value
         * @property {number} MERCURYS_LENS=30 MERCURYS_LENS value
         * @property {number} TACHYON_STONE=1 TACHYON_STONE value
         * @property {number} DILITHIUM_STONE=31 DILITHIUM_STONE value
         * @property {number} SHELL_STONE=32 SHELL_STONE value
         * @property {number} LUNAR_STONE=33 LUNAR_STONE value
         * @property {number} SOUL_STONE=34 SOUL_STONE value
         * @property {number} PROPHECY_STONE=39 PROPHECY_STONE value
         * @property {number} QUANTUM_STONE=36 QUANTUM_STONE value
         * @property {number} TERRA_STONE=37 TERRA_STONE value
         * @property {number} LIFE_STONE=38 LIFE_STONE value
         * @property {number} CLARITY_STONE=40 CLARITY_STONE value
         * @property {number} EXTRATERRESTRIAL_ALUMINUM=13 EXTRATERRESTRIAL_ALUMINUM value
         * @property {number} ANCIENT_TUNGSTEN=14 ANCIENT_TUNGSTEN value
         * @property {number} SPACE_ROCKS=15 SPACE_ROCKS value
         * @property {number} ALIEN_WOOD=16 ALIEN_WOOD value
         * @property {number} GOLD_METEORITE=17 GOLD_METEORITE value
         * @property {number} TAU_CETI_GEODE=18 TAU_CETI_GEODE value
         * @property {number} CENTAURIAN_STEEL=19 CENTAURIAN_STEEL value
         * @property {number} ERIDANI_FEATHER=20 ERIDANI_FEATHER value
         * @property {number} DRONE_PARTS=35 DRONE_PARTS value
         * @property {number} CELESTIAL_BRONZE=41 CELESTIAL_BRONZE value
         * @property {number} LALANDE_HIDE=42 LALANDE_HIDE value
         * @property {number} SOLAR_TITANIUM=43 SOLAR_TITANIUM value
         * @property {number} TACHYON_STONE_FRAGMENT=2 TACHYON_STONE_FRAGMENT value
         * @property {number} DILITHIUM_STONE_FRAGMENT=44 DILITHIUM_STONE_FRAGMENT value
         * @property {number} SHELL_STONE_FRAGMENT=45 SHELL_STONE_FRAGMENT value
         * @property {number} LUNAR_STONE_FRAGMENT=46 LUNAR_STONE_FRAGMENT value
         * @property {number} SOUL_STONE_FRAGMENT=47 SOUL_STONE_FRAGMENT value
         * @property {number} PROPHECY_STONE_FRAGMENT=48 PROPHECY_STONE_FRAGMENT value
         * @property {number} QUANTUM_STONE_FRAGMENT=49 QUANTUM_STONE_FRAGMENT value
         * @property {number} TERRA_STONE_FRAGMENT=50 TERRA_STONE_FRAGMENT value
         * @property {number} LIFE_STONE_FRAGMENT=51 LIFE_STONE_FRAGMENT value
         * @property {number} CLARITY_STONE_FRAGMENT=52 CLARITY_STONE_FRAGMENT value
         * @property {number} UNKNOWN=10000 UNKNOWN value
         */
        ArtifactSpec.Name = (function() {
            const valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "LUNAR_TOTEM"] = 0;
            values[valuesById[3] = "NEODYMIUM_MEDALLION"] = 3;
            values[valuesById[4] = "BEAK_OF_MIDAS"] = 4;
            values[valuesById[5] = "LIGHT_OF_EGGENDIL"] = 5;
            values[valuesById[6] = "DEMETERS_NECKLACE"] = 6;
            values[valuesById[7] = "VIAL_MARTIAN_DUST"] = 7;
            values[valuesById[8] = "ORNATE_GUSSET"] = 8;
            values[valuesById[9] = "THE_CHALICE"] = 9;
            values[valuesById[10] = "BOOK_OF_BASAN"] = 10;
            values[valuesById[11] = "PHOENIX_FEATHER"] = 11;
            values[valuesById[12] = "TUNGSTEN_ANKH"] = 12;
            values[valuesById[21] = "AURELIAN_BROOCH"] = 21;
            values[valuesById[22] = "CARVED_RAINSTICK"] = 22;
            values[valuesById[23] = "PUZZLE_CUBE"] = 23;
            values[valuesById[24] = "QUANTUM_METRONOME"] = 24;
            values[valuesById[25] = "SHIP_IN_A_BOTTLE"] = 25;
            values[valuesById[26] = "TACHYON_DEFLECTOR"] = 26;
            values[valuesById[27] = "INTERSTELLAR_COMPASS"] = 27;
            values[valuesById[28] = "DILITHIUM_MONOCLE"] = 28;
            values[valuesById[29] = "TITANIUM_ACTUATOR"] = 29;
            values[valuesById[30] = "MERCURYS_LENS"] = 30;
            values[valuesById[1] = "TACHYON_STONE"] = 1;
            values[valuesById[31] = "DILITHIUM_STONE"] = 31;
            values[valuesById[32] = "SHELL_STONE"] = 32;
            values[valuesById[33] = "LUNAR_STONE"] = 33;
            values[valuesById[34] = "SOUL_STONE"] = 34;
            values[valuesById[39] = "PROPHECY_STONE"] = 39;
            values[valuesById[36] = "QUANTUM_STONE"] = 36;
            values[valuesById[37] = "TERRA_STONE"] = 37;
            values[valuesById[38] = "LIFE_STONE"] = 38;
            values[valuesById[40] = "CLARITY_STONE"] = 40;
            values[valuesById[13] = "EXTRATERRESTRIAL_ALUMINUM"] = 13;
            values[valuesById[14] = "ANCIENT_TUNGSTEN"] = 14;
            values[valuesById[15] = "SPACE_ROCKS"] = 15;
            values[valuesById[16] = "ALIEN_WOOD"] = 16;
            values[valuesById[17] = "GOLD_METEORITE"] = 17;
            values[valuesById[18] = "TAU_CETI_GEODE"] = 18;
            values[valuesById[19] = "CENTAURIAN_STEEL"] = 19;
            values[valuesById[20] = "ERIDANI_FEATHER"] = 20;
            values[valuesById[35] = "DRONE_PARTS"] = 35;
            values[valuesById[41] = "CELESTIAL_BRONZE"] = 41;
            values[valuesById[42] = "LALANDE_HIDE"] = 42;
            values[valuesById[43] = "SOLAR_TITANIUM"] = 43;
            values[valuesById[2] = "TACHYON_STONE_FRAGMENT"] = 2;
            values[valuesById[44] = "DILITHIUM_STONE_FRAGMENT"] = 44;
            values[valuesById[45] = "SHELL_STONE_FRAGMENT"] = 45;
            values[valuesById[46] = "LUNAR_STONE_FRAGMENT"] = 46;
            values[valuesById[47] = "SOUL_STONE_FRAGMENT"] = 47;
            values[valuesById[48] = "PROPHECY_STONE_FRAGMENT"] = 48;
            values[valuesById[49] = "QUANTUM_STONE_FRAGMENT"] = 49;
            values[valuesById[50] = "TERRA_STONE_FRAGMENT"] = 50;
            values[valuesById[51] = "LIFE_STONE_FRAGMENT"] = 51;
            values[valuesById[52] = "CLARITY_STONE_FRAGMENT"] = 52;
            values[valuesById[10000] = "UNKNOWN"] = 10000;
            return values;
        })();

        /**
         * Level enum.
         * @name ei.ArtifactSpec.Level
         * @enum {number}
         * @property {number} INFERIOR=0 INFERIOR value
         * @property {number} LESSER=1 LESSER value
         * @property {number} NORMAL=2 NORMAL value
         * @property {number} GREATER=3 GREATER value
         * @property {number} SUPERIOR=4 SUPERIOR value
         */
        ArtifactSpec.Level = (function() {
            const valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "INFERIOR"] = 0;
            values[valuesById[1] = "LESSER"] = 1;
            values[valuesById[2] = "NORMAL"] = 2;
            values[valuesById[3] = "GREATER"] = 3;
            values[valuesById[4] = "SUPERIOR"] = 4;
            return values;
        })();

        /**
         * Rarity enum.
         * @name ei.ArtifactSpec.Rarity
         * @enum {number}
         * @property {number} COMMON=0 COMMON value
         * @property {number} RARE=1 RARE value
         * @property {number} EPIC=2 EPIC value
         * @property {number} LEGENDARY=3 LEGENDARY value
         */
        ArtifactSpec.Rarity = (function() {
            const valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "COMMON"] = 0;
            values[valuesById[1] = "RARE"] = 1;
            values[valuesById[2] = "EPIC"] = 2;
            values[valuesById[3] = "LEGENDARY"] = 3;
            return values;
        })();

        /**
         * Type enum.
         * @name ei.ArtifactSpec.Type
         * @enum {number}
         * @property {number} ARTIFACT=0 ARTIFACT value
         * @property {number} STONE=1 STONE value
         * @property {number} INGREDIENT=2 INGREDIENT value
         * @property {number} STONE_INGREDIENT=3 STONE_INGREDIENT value
         */
        ArtifactSpec.Type = (function() {
            const valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "ARTIFACT"] = 0;
            values[valuesById[1] = "STONE"] = 1;
            values[valuesById[2] = "INGREDIENT"] = 2;
            values[valuesById[3] = "STONE_INGREDIENT"] = 3;
            return values;
        })();

        return ArtifactSpec;
    })();

    ei.CompleteArtifact = (function() {

        /**
         * Properties of a CompleteArtifact.
         * @memberof ei
         * @interface ICompleteArtifact
         * @property {ei.IArtifactSpec|null} [spec] CompleteArtifact spec
         * @property {Array.<ei.IArtifactSpec>|null} [stones] CompleteArtifact stones
         */

        /**
         * Constructs a new CompleteArtifact.
         * @memberof ei
         * @classdesc Represents a CompleteArtifact.
         * @implements ICompleteArtifact
         * @constructor
         * @param {ei.ICompleteArtifact=} [properties] Properties to set
         */
        function CompleteArtifact(properties) {
            this.stones = [];
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CompleteArtifact spec.
         * @member {ei.IArtifactSpec|null|undefined} spec
         * @memberof ei.CompleteArtifact
         * @instance
         */
        CompleteArtifact.prototype.spec = null;

        /**
         * CompleteArtifact stones.
         * @member {Array.<ei.IArtifactSpec>} stones
         * @memberof ei.CompleteArtifact
         * @instance
         */
        CompleteArtifact.prototype.stones = $util.emptyArray;

        /**
         * Creates a new CompleteArtifact instance using the specified properties.
         * @function create
         * @memberof ei.CompleteArtifact
         * @static
         * @param {ei.ICompleteArtifact=} [properties] Properties to set
         * @returns {ei.CompleteArtifact} CompleteArtifact instance
         */
        CompleteArtifact.create = function create(properties) {
            return new CompleteArtifact(properties);
        };

        /**
         * Encodes the specified CompleteArtifact message. Does not implicitly {@link ei.CompleteArtifact.verify|verify} messages.
         * @function encode
         * @memberof ei.CompleteArtifact
         * @static
         * @param {ei.ICompleteArtifact} message CompleteArtifact message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CompleteArtifact.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.spec != null && Object.hasOwnProperty.call(message, "spec"))
                $root.ei.ArtifactSpec.encode(message.spec, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.stones != null && message.stones.length)
                for (let i = 0; i < message.stones.length; ++i)
                    $root.ei.ArtifactSpec.encode(message.stones[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified CompleteArtifact message, length delimited. Does not implicitly {@link ei.CompleteArtifact.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ei.CompleteArtifact
         * @static
         * @param {ei.ICompleteArtifact} message CompleteArtifact message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CompleteArtifact.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CompleteArtifact message from the specified reader or buffer.
         * @function decode
         * @memberof ei.CompleteArtifact
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ei.CompleteArtifact} CompleteArtifact
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CompleteArtifact.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ei.CompleteArtifact();
            while (reader.pos < end) {
                let tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.spec = $root.ei.ArtifactSpec.decode(reader, reader.uint32());
                    break;
                case 2:
                    if (!(message.stones && message.stones.length))
                        message.stones = [];
                    message.stones.push($root.ei.ArtifactSpec.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a CompleteArtifact message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ei.CompleteArtifact
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ei.CompleteArtifact} CompleteArtifact
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CompleteArtifact.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CompleteArtifact message.
         * @function verify
         * @memberof ei.CompleteArtifact
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CompleteArtifact.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.spec != null && message.hasOwnProperty("spec")) {
                let error = $root.ei.ArtifactSpec.verify(message.spec);
                if (error)
                    return "spec." + error;
            }
            if (message.stones != null && message.hasOwnProperty("stones")) {
                if (!Array.isArray(message.stones))
                    return "stones: array expected";
                for (let i = 0; i < message.stones.length; ++i) {
                    let error = $root.ei.ArtifactSpec.verify(message.stones[i]);
                    if (error)
                        return "stones." + error;
                }
            }
            return null;
        };

        /**
         * Creates a CompleteArtifact message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ei.CompleteArtifact
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ei.CompleteArtifact} CompleteArtifact
         */
        CompleteArtifact.fromObject = function fromObject(object) {
            if (object instanceof $root.ei.CompleteArtifact)
                return object;
            let message = new $root.ei.CompleteArtifact();
            if (object.spec != null) {
                if (typeof object.spec !== "object")
                    throw TypeError(".ei.CompleteArtifact.spec: object expected");
                message.spec = $root.ei.ArtifactSpec.fromObject(object.spec);
            }
            if (object.stones) {
                if (!Array.isArray(object.stones))
                    throw TypeError(".ei.CompleteArtifact.stones: array expected");
                message.stones = [];
                for (let i = 0; i < object.stones.length; ++i) {
                    if (typeof object.stones[i] !== "object")
                        throw TypeError(".ei.CompleteArtifact.stones: object expected");
                    message.stones[i] = $root.ei.ArtifactSpec.fromObject(object.stones[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a CompleteArtifact message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ei.CompleteArtifact
         * @static
         * @param {ei.CompleteArtifact} message CompleteArtifact
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CompleteArtifact.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.arrays || options.defaults)
                object.stones = [];
            if (options.defaults)
                object.spec = null;
            if (message.spec != null && message.hasOwnProperty("spec"))
                object.spec = $root.ei.ArtifactSpec.toObject(message.spec, options);
            if (message.stones && message.stones.length) {
                object.stones = [];
                for (let j = 0; j < message.stones.length; ++j)
                    object.stones[j] = $root.ei.ArtifactSpec.toObject(message.stones[j], options);
            }
            return object;
        };

        /**
         * Converts this CompleteArtifact to JSON.
         * @function toJSON
         * @memberof ei.CompleteArtifact
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CompleteArtifact.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CompleteArtifact;
    })();

    ei.ArtifactInventoryItem = (function() {

        /**
         * Properties of an ArtifactInventoryItem.
         * @memberof ei
         * @interface IArtifactInventoryItem
         * @property {number|Long|null} [itemId] ArtifactInventoryItem itemId
         * @property {ei.ICompleteArtifact|null} [artifact] ArtifactInventoryItem artifact
         * @property {number|null} [quantity] ArtifactInventoryItem quantity
         * @property {string|null} [serverId] ArtifactInventoryItem serverId
         */

        /**
         * Constructs a new ArtifactInventoryItem.
         * @memberof ei
         * @classdesc Represents an ArtifactInventoryItem.
         * @implements IArtifactInventoryItem
         * @constructor
         * @param {ei.IArtifactInventoryItem=} [properties] Properties to set
         */
        function ArtifactInventoryItem(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ArtifactInventoryItem itemId.
         * @member {number|Long} itemId
         * @memberof ei.ArtifactInventoryItem
         * @instance
         */
        ArtifactInventoryItem.prototype.itemId = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * ArtifactInventoryItem artifact.
         * @member {ei.ICompleteArtifact|null|undefined} artifact
         * @memberof ei.ArtifactInventoryItem
         * @instance
         */
        ArtifactInventoryItem.prototype.artifact = null;

        /**
         * ArtifactInventoryItem quantity.
         * @member {number} quantity
         * @memberof ei.ArtifactInventoryItem
         * @instance
         */
        ArtifactInventoryItem.prototype.quantity = 0;

        /**
         * ArtifactInventoryItem serverId.
         * @member {string} serverId
         * @memberof ei.ArtifactInventoryItem
         * @instance
         */
        ArtifactInventoryItem.prototype.serverId = "";

        /**
         * Creates a new ArtifactInventoryItem instance using the specified properties.
         * @function create
         * @memberof ei.ArtifactInventoryItem
         * @static
         * @param {ei.IArtifactInventoryItem=} [properties] Properties to set
         * @returns {ei.ArtifactInventoryItem} ArtifactInventoryItem instance
         */
        ArtifactInventoryItem.create = function create(properties) {
            return new ArtifactInventoryItem(properties);
        };

        /**
         * Encodes the specified ArtifactInventoryItem message. Does not implicitly {@link ei.ArtifactInventoryItem.verify|verify} messages.
         * @function encode
         * @memberof ei.ArtifactInventoryItem
         * @static
         * @param {ei.IArtifactInventoryItem} message ArtifactInventoryItem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ArtifactInventoryItem.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.itemId != null && Object.hasOwnProperty.call(message, "itemId"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.itemId);
            if (message.artifact != null && Object.hasOwnProperty.call(message, "artifact"))
                $root.ei.CompleteArtifact.encode(message.artifact, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.quantity != null && Object.hasOwnProperty.call(message, "quantity"))
                writer.uint32(/* id 3, wireType 1 =*/25).double(message.quantity);
            if (message.serverId != null && Object.hasOwnProperty.call(message, "serverId"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.serverId);
            return writer;
        };

        /**
         * Encodes the specified ArtifactInventoryItem message, length delimited. Does not implicitly {@link ei.ArtifactInventoryItem.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ei.ArtifactInventoryItem
         * @static
         * @param {ei.IArtifactInventoryItem} message ArtifactInventoryItem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ArtifactInventoryItem.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an ArtifactInventoryItem message from the specified reader or buffer.
         * @function decode
         * @memberof ei.ArtifactInventoryItem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ei.ArtifactInventoryItem} ArtifactInventoryItem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ArtifactInventoryItem.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ei.ArtifactInventoryItem();
            while (reader.pos < end) {
                let tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.itemId = reader.uint64();
                    break;
                case 2:
                    message.artifact = $root.ei.CompleteArtifact.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.quantity = reader.double();
                    break;
                case 4:
                    message.serverId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an ArtifactInventoryItem message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ei.ArtifactInventoryItem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ei.ArtifactInventoryItem} ArtifactInventoryItem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ArtifactInventoryItem.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an ArtifactInventoryItem message.
         * @function verify
         * @memberof ei.ArtifactInventoryItem
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ArtifactInventoryItem.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.itemId != null && message.hasOwnProperty("itemId"))
                if (!$util.isInteger(message.itemId) && !(message.itemId && $util.isInteger(message.itemId.low) && $util.isInteger(message.itemId.high)))
                    return "itemId: integer|Long expected";
            if (message.artifact != null && message.hasOwnProperty("artifact")) {
                let error = $root.ei.CompleteArtifact.verify(message.artifact);
                if (error)
                    return "artifact." + error;
            }
            if (message.quantity != null && message.hasOwnProperty("quantity"))
                if (typeof message.quantity !== "number")
                    return "quantity: number expected";
            if (message.serverId != null && message.hasOwnProperty("serverId"))
                if (!$util.isString(message.serverId))
                    return "serverId: string expected";
            return null;
        };

        /**
         * Creates an ArtifactInventoryItem message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ei.ArtifactInventoryItem
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ei.ArtifactInventoryItem} ArtifactInventoryItem
         */
        ArtifactInventoryItem.fromObject = function fromObject(object) {
            if (object instanceof $root.ei.ArtifactInventoryItem)
                return object;
            let message = new $root.ei.ArtifactInventoryItem();
            if (object.itemId != null)
                if ($util.Long)
                    (message.itemId = $util.Long.fromValue(object.itemId)).unsigned = true;
                else if (typeof object.itemId === "string")
                    message.itemId = parseInt(object.itemId, 10);
                else if (typeof object.itemId === "number")
                    message.itemId = object.itemId;
                else if (typeof object.itemId === "object")
                    message.itemId = new $util.LongBits(object.itemId.low >>> 0, object.itemId.high >>> 0).toNumber(true);
            if (object.artifact != null) {
                if (typeof object.artifact !== "object")
                    throw TypeError(".ei.ArtifactInventoryItem.artifact: object expected");
                message.artifact = $root.ei.CompleteArtifact.fromObject(object.artifact);
            }
            if (object.quantity != null)
                message.quantity = Number(object.quantity);
            if (object.serverId != null)
                message.serverId = String(object.serverId);
            return message;
        };

        /**
         * Creates a plain object from an ArtifactInventoryItem message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ei.ArtifactInventoryItem
         * @static
         * @param {ei.ArtifactInventoryItem} message ArtifactInventoryItem
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ArtifactInventoryItem.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.defaults) {
                if ($util.Long) {
                    let long = new $util.Long(0, 0, true);
                    object.itemId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.itemId = options.longs === String ? "0" : 0;
                object.artifact = null;
                object.quantity = 0;
                object.serverId = "";
            }
            if (message.itemId != null && message.hasOwnProperty("itemId"))
                if (typeof message.itemId === "number")
                    object.itemId = options.longs === String ? String(message.itemId) : message.itemId;
                else
                    object.itemId = options.longs === String ? $util.Long.prototype.toString.call(message.itemId) : options.longs === Number ? new $util.LongBits(message.itemId.low >>> 0, message.itemId.high >>> 0).toNumber(true) : message.itemId;
            if (message.artifact != null && message.hasOwnProperty("artifact"))
                object.artifact = $root.ei.CompleteArtifact.toObject(message.artifact, options);
            if (message.quantity != null && message.hasOwnProperty("quantity"))
                object.quantity = options.json && !isFinite(message.quantity) ? String(message.quantity) : message.quantity;
            if (message.serverId != null && message.hasOwnProperty("serverId"))
                object.serverId = message.serverId;
            return object;
        };

        /**
         * Converts this ArtifactInventoryItem to JSON.
         * @function toJSON
         * @memberof ei.ArtifactInventoryItem
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ArtifactInventoryItem.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ArtifactInventoryItem;
    })();

    ei.InventorySlot = (function() {

        /**
         * Properties of an InventorySlot.
         * @memberof ei
         * @interface IInventorySlot
         * @property {boolean|null} [occupied] InventorySlot occupied
         * @property {number|null} [itemId] InventorySlot itemId
         */

        /**
         * Constructs a new InventorySlot.
         * @memberof ei
         * @classdesc Represents an InventorySlot.
         * @implements IInventorySlot
         * @constructor
         * @param {ei.IInventorySlot=} [properties] Properties to set
         */
        function InventorySlot(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * InventorySlot occupied.
         * @member {boolean} occupied
         * @memberof ei.InventorySlot
         * @instance
         */
        InventorySlot.prototype.occupied = false;

        /**
         * InventorySlot itemId.
         * @member {number} itemId
         * @memberof ei.InventorySlot
         * @instance
         */
        InventorySlot.prototype.itemId = 0;

        /**
         * Creates a new InventorySlot instance using the specified properties.
         * @function create
         * @memberof ei.InventorySlot
         * @static
         * @param {ei.IInventorySlot=} [properties] Properties to set
         * @returns {ei.InventorySlot} InventorySlot instance
         */
        InventorySlot.create = function create(properties) {
            return new InventorySlot(properties);
        };

        /**
         * Encodes the specified InventorySlot message. Does not implicitly {@link ei.InventorySlot.verify|verify} messages.
         * @function encode
         * @memberof ei.InventorySlot
         * @static
         * @param {ei.IInventorySlot} message InventorySlot message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        InventorySlot.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.occupied != null && Object.hasOwnProperty.call(message, "occupied"))
                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.occupied);
            if (message.itemId != null && Object.hasOwnProperty.call(message, "itemId"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.itemId);
            return writer;
        };

        /**
         * Encodes the specified InventorySlot message, length delimited. Does not implicitly {@link ei.InventorySlot.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ei.InventorySlot
         * @static
         * @param {ei.IInventorySlot} message InventorySlot message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        InventorySlot.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an InventorySlot message from the specified reader or buffer.
         * @function decode
         * @memberof ei.InventorySlot
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ei.InventorySlot} InventorySlot
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        InventorySlot.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ei.InventorySlot();
            while (reader.pos < end) {
                let tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.occupied = reader.bool();
                    break;
                case 2:
                    message.itemId = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an InventorySlot message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ei.InventorySlot
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ei.InventorySlot} InventorySlot
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        InventorySlot.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an InventorySlot message.
         * @function verify
         * @memberof ei.InventorySlot
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        InventorySlot.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.occupied != null && message.hasOwnProperty("occupied"))
                if (typeof message.occupied !== "boolean")
                    return "occupied: boolean expected";
            if (message.itemId != null && message.hasOwnProperty("itemId"))
                if (!$util.isInteger(message.itemId))
                    return "itemId: integer expected";
            return null;
        };

        /**
         * Creates an InventorySlot message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ei.InventorySlot
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ei.InventorySlot} InventorySlot
         */
        InventorySlot.fromObject = function fromObject(object) {
            if (object instanceof $root.ei.InventorySlot)
                return object;
            let message = new $root.ei.InventorySlot();
            if (object.occupied != null)
                message.occupied = Boolean(object.occupied);
            if (object.itemId != null)
                message.itemId = object.itemId >>> 0;
            return message;
        };

        /**
         * Creates a plain object from an InventorySlot message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ei.InventorySlot
         * @static
         * @param {ei.InventorySlot} message InventorySlot
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        InventorySlot.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.defaults) {
                object.occupied = false;
                object.itemId = 0;
            }
            if (message.occupied != null && message.hasOwnProperty("occupied"))
                object.occupied = message.occupied;
            if (message.itemId != null && message.hasOwnProperty("itemId"))
                object.itemId = message.itemId;
            return object;
        };

        /**
         * Converts this InventorySlot to JSON.
         * @function toJSON
         * @memberof ei.InventorySlot
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        InventorySlot.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return InventorySlot;
    })();

    ei.ArtifactsConfigurationRequest = (function() {

        /**
         * Properties of an ArtifactsConfigurationRequest.
         * @memberof ei
         * @interface IArtifactsConfigurationRequest
         * @property {ei.IBasicRequestInfo|null} [rinfo] ArtifactsConfigurationRequest rinfo
         * @property {number|null} [clientVersion] ArtifactsConfigurationRequest clientVersion
         */

        /**
         * Constructs a new ArtifactsConfigurationRequest.
         * @memberof ei
         * @classdesc Represents an ArtifactsConfigurationRequest.
         * @implements IArtifactsConfigurationRequest
         * @constructor
         * @param {ei.IArtifactsConfigurationRequest=} [properties] Properties to set
         */
        function ArtifactsConfigurationRequest(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ArtifactsConfigurationRequest rinfo.
         * @member {ei.IBasicRequestInfo|null|undefined} rinfo
         * @memberof ei.ArtifactsConfigurationRequest
         * @instance
         */
        ArtifactsConfigurationRequest.prototype.rinfo = null;

        /**
         * ArtifactsConfigurationRequest clientVersion.
         * @member {number} clientVersion
         * @memberof ei.ArtifactsConfigurationRequest
         * @instance
         */
        ArtifactsConfigurationRequest.prototype.clientVersion = 0;

        /**
         * Creates a new ArtifactsConfigurationRequest instance using the specified properties.
         * @function create
         * @memberof ei.ArtifactsConfigurationRequest
         * @static
         * @param {ei.IArtifactsConfigurationRequest=} [properties] Properties to set
         * @returns {ei.ArtifactsConfigurationRequest} ArtifactsConfigurationRequest instance
         */
        ArtifactsConfigurationRequest.create = function create(properties) {
            return new ArtifactsConfigurationRequest(properties);
        };

        /**
         * Encodes the specified ArtifactsConfigurationRequest message. Does not implicitly {@link ei.ArtifactsConfigurationRequest.verify|verify} messages.
         * @function encode
         * @memberof ei.ArtifactsConfigurationRequest
         * @static
         * @param {ei.IArtifactsConfigurationRequest} message ArtifactsConfigurationRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ArtifactsConfigurationRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.clientVersion != null && Object.hasOwnProperty.call(message, "clientVersion"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.clientVersion);
            if (message.rinfo != null && Object.hasOwnProperty.call(message, "rinfo"))
                $root.ei.BasicRequestInfo.encode(message.rinfo, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ArtifactsConfigurationRequest message, length delimited. Does not implicitly {@link ei.ArtifactsConfigurationRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ei.ArtifactsConfigurationRequest
         * @static
         * @param {ei.IArtifactsConfigurationRequest} message ArtifactsConfigurationRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ArtifactsConfigurationRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an ArtifactsConfigurationRequest message from the specified reader or buffer.
         * @function decode
         * @memberof ei.ArtifactsConfigurationRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ei.ArtifactsConfigurationRequest} ArtifactsConfigurationRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ArtifactsConfigurationRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ei.ArtifactsConfigurationRequest();
            while (reader.pos < end) {
                let tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.rinfo = $root.ei.BasicRequestInfo.decode(reader, reader.uint32());
                    break;
                case 1:
                    message.clientVersion = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an ArtifactsConfigurationRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ei.ArtifactsConfigurationRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ei.ArtifactsConfigurationRequest} ArtifactsConfigurationRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ArtifactsConfigurationRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an ArtifactsConfigurationRequest message.
         * @function verify
         * @memberof ei.ArtifactsConfigurationRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ArtifactsConfigurationRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.rinfo != null && message.hasOwnProperty("rinfo")) {
                let error = $root.ei.BasicRequestInfo.verify(message.rinfo);
                if (error)
                    return "rinfo." + error;
            }
            if (message.clientVersion != null && message.hasOwnProperty("clientVersion"))
                if (!$util.isInteger(message.clientVersion))
                    return "clientVersion: integer expected";
            return null;
        };

        /**
         * Creates an ArtifactsConfigurationRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ei.ArtifactsConfigurationRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ei.ArtifactsConfigurationRequest} ArtifactsConfigurationRequest
         */
        ArtifactsConfigurationRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.ei.ArtifactsConfigurationRequest)
                return object;
            let message = new $root.ei.ArtifactsConfigurationRequest();
            if (object.rinfo != null) {
                if (typeof object.rinfo !== "object")
                    throw TypeError(".ei.ArtifactsConfigurationRequest.rinfo: object expected");
                message.rinfo = $root.ei.BasicRequestInfo.fromObject(object.rinfo);
            }
            if (object.clientVersion != null)
                message.clientVersion = object.clientVersion >>> 0;
            return message;
        };

        /**
         * Creates a plain object from an ArtifactsConfigurationRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ei.ArtifactsConfigurationRequest
         * @static
         * @param {ei.ArtifactsConfigurationRequest} message ArtifactsConfigurationRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ArtifactsConfigurationRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.defaults) {
                object.clientVersion = 0;
                object.rinfo = null;
            }
            if (message.clientVersion != null && message.hasOwnProperty("clientVersion"))
                object.clientVersion = message.clientVersion;
            if (message.rinfo != null && message.hasOwnProperty("rinfo"))
                object.rinfo = $root.ei.BasicRequestInfo.toObject(message.rinfo, options);
            return object;
        };

        /**
         * Converts this ArtifactsConfigurationRequest to JSON.
         * @function toJSON
         * @memberof ei.ArtifactsConfigurationRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ArtifactsConfigurationRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ArtifactsConfigurationRequest;
    })();

    ei.ArtifactsConfigurationResponse = (function() {

        /**
         * Properties of an ArtifactsConfigurationResponse.
         * @memberof ei
         * @interface IArtifactsConfigurationResponse
         * @property {Array.<ei.ArtifactsConfigurationResponse.IMissionParameters>|null} [missionParameters] ArtifactsConfigurationResponse missionParameters
         * @property {Array.<ei.ArtifactsConfigurationResponse.IArtifactParameters>|null} [artifactParameters] ArtifactsConfigurationResponse artifactParameters
         */

        /**
         * Constructs a new ArtifactsConfigurationResponse.
         * @memberof ei
         * @classdesc Represents an ArtifactsConfigurationResponse.
         * @implements IArtifactsConfigurationResponse
         * @constructor
         * @param {ei.IArtifactsConfigurationResponse=} [properties] Properties to set
         */
        function ArtifactsConfigurationResponse(properties) {
            this.missionParameters = [];
            this.artifactParameters = [];
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ArtifactsConfigurationResponse missionParameters.
         * @member {Array.<ei.ArtifactsConfigurationResponse.IMissionParameters>} missionParameters
         * @memberof ei.ArtifactsConfigurationResponse
         * @instance
         */
        ArtifactsConfigurationResponse.prototype.missionParameters = $util.emptyArray;

        /**
         * ArtifactsConfigurationResponse artifactParameters.
         * @member {Array.<ei.ArtifactsConfigurationResponse.IArtifactParameters>} artifactParameters
         * @memberof ei.ArtifactsConfigurationResponse
         * @instance
         */
        ArtifactsConfigurationResponse.prototype.artifactParameters = $util.emptyArray;

        /**
         * Creates a new ArtifactsConfigurationResponse instance using the specified properties.
         * @function create
         * @memberof ei.ArtifactsConfigurationResponse
         * @static
         * @param {ei.IArtifactsConfigurationResponse=} [properties] Properties to set
         * @returns {ei.ArtifactsConfigurationResponse} ArtifactsConfigurationResponse instance
         */
        ArtifactsConfigurationResponse.create = function create(properties) {
            return new ArtifactsConfigurationResponse(properties);
        };

        /**
         * Encodes the specified ArtifactsConfigurationResponse message. Does not implicitly {@link ei.ArtifactsConfigurationResponse.verify|verify} messages.
         * @function encode
         * @memberof ei.ArtifactsConfigurationResponse
         * @static
         * @param {ei.IArtifactsConfigurationResponse} message ArtifactsConfigurationResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ArtifactsConfigurationResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.missionParameters != null && message.missionParameters.length)
                for (let i = 0; i < message.missionParameters.length; ++i)
                    $root.ei.ArtifactsConfigurationResponse.MissionParameters.encode(message.missionParameters[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.artifactParameters != null && message.artifactParameters.length)
                for (let i = 0; i < message.artifactParameters.length; ++i)
                    $root.ei.ArtifactsConfigurationResponse.ArtifactParameters.encode(message.artifactParameters[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ArtifactsConfigurationResponse message, length delimited. Does not implicitly {@link ei.ArtifactsConfigurationResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ei.ArtifactsConfigurationResponse
         * @static
         * @param {ei.IArtifactsConfigurationResponse} message ArtifactsConfigurationResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ArtifactsConfigurationResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an ArtifactsConfigurationResponse message from the specified reader or buffer.
         * @function decode
         * @memberof ei.ArtifactsConfigurationResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ei.ArtifactsConfigurationResponse} ArtifactsConfigurationResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ArtifactsConfigurationResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ei.ArtifactsConfigurationResponse();
            while (reader.pos < end) {
                let tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.missionParameters && message.missionParameters.length))
                        message.missionParameters = [];
                    message.missionParameters.push($root.ei.ArtifactsConfigurationResponse.MissionParameters.decode(reader, reader.uint32()));
                    break;
                case 2:
                    if (!(message.artifactParameters && message.artifactParameters.length))
                        message.artifactParameters = [];
                    message.artifactParameters.push($root.ei.ArtifactsConfigurationResponse.ArtifactParameters.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an ArtifactsConfigurationResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ei.ArtifactsConfigurationResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ei.ArtifactsConfigurationResponse} ArtifactsConfigurationResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ArtifactsConfigurationResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an ArtifactsConfigurationResponse message.
         * @function verify
         * @memberof ei.ArtifactsConfigurationResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ArtifactsConfigurationResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.missionParameters != null && message.hasOwnProperty("missionParameters")) {
                if (!Array.isArray(message.missionParameters))
                    return "missionParameters: array expected";
                for (let i = 0; i < message.missionParameters.length; ++i) {
                    let error = $root.ei.ArtifactsConfigurationResponse.MissionParameters.verify(message.missionParameters[i]);
                    if (error)
                        return "missionParameters." + error;
                }
            }
            if (message.artifactParameters != null && message.hasOwnProperty("artifactParameters")) {
                if (!Array.isArray(message.artifactParameters))
                    return "artifactParameters: array expected";
                for (let i = 0; i < message.artifactParameters.length; ++i) {
                    let error = $root.ei.ArtifactsConfigurationResponse.ArtifactParameters.verify(message.artifactParameters[i]);
                    if (error)
                        return "artifactParameters." + error;
                }
            }
            return null;
        };

        /**
         * Creates an ArtifactsConfigurationResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ei.ArtifactsConfigurationResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ei.ArtifactsConfigurationResponse} ArtifactsConfigurationResponse
         */
        ArtifactsConfigurationResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.ei.ArtifactsConfigurationResponse)
                return object;
            let message = new $root.ei.ArtifactsConfigurationResponse();
            if (object.missionParameters) {
                if (!Array.isArray(object.missionParameters))
                    throw TypeError(".ei.ArtifactsConfigurationResponse.missionParameters: array expected");
                message.missionParameters = [];
                for (let i = 0; i < object.missionParameters.length; ++i) {
                    if (typeof object.missionParameters[i] !== "object")
                        throw TypeError(".ei.ArtifactsConfigurationResponse.missionParameters: object expected");
                    message.missionParameters[i] = $root.ei.ArtifactsConfigurationResponse.MissionParameters.fromObject(object.missionParameters[i]);
                }
            }
            if (object.artifactParameters) {
                if (!Array.isArray(object.artifactParameters))
                    throw TypeError(".ei.ArtifactsConfigurationResponse.artifactParameters: array expected");
                message.artifactParameters = [];
                for (let i = 0; i < object.artifactParameters.length; ++i) {
                    if (typeof object.artifactParameters[i] !== "object")
                        throw TypeError(".ei.ArtifactsConfigurationResponse.artifactParameters: object expected");
                    message.artifactParameters[i] = $root.ei.ArtifactsConfigurationResponse.ArtifactParameters.fromObject(object.artifactParameters[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from an ArtifactsConfigurationResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ei.ArtifactsConfigurationResponse
         * @static
         * @param {ei.ArtifactsConfigurationResponse} message ArtifactsConfigurationResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ArtifactsConfigurationResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.arrays || options.defaults) {
                object.missionParameters = [];
                object.artifactParameters = [];
            }
            if (message.missionParameters && message.missionParameters.length) {
                object.missionParameters = [];
                for (let j = 0; j < message.missionParameters.length; ++j)
                    object.missionParameters[j] = $root.ei.ArtifactsConfigurationResponse.MissionParameters.toObject(message.missionParameters[j], options);
            }
            if (message.artifactParameters && message.artifactParameters.length) {
                object.artifactParameters = [];
                for (let j = 0; j < message.artifactParameters.length; ++j)
                    object.artifactParameters[j] = $root.ei.ArtifactsConfigurationResponse.ArtifactParameters.toObject(message.artifactParameters[j], options);
            }
            return object;
        };

        /**
         * Converts this ArtifactsConfigurationResponse to JSON.
         * @function toJSON
         * @memberof ei.ArtifactsConfigurationResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ArtifactsConfigurationResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        ArtifactsConfigurationResponse.MissionParameters = (function() {

            /**
             * Properties of a MissionParameters.
             * @memberof ei.ArtifactsConfigurationResponse
             * @interface IMissionParameters
             * @property {ei.MissionInfo.Spaceship|null} [ship] MissionParameters ship
             * @property {Array.<ei.ArtifactsConfigurationResponse.MissionParameters.IDuration>|null} [durations] MissionParameters durations
             * @property {number|null} [capacity_DEPRECATED] MissionParameters capacity_DEPRECATED
             */

            /**
             * Constructs a new MissionParameters.
             * @memberof ei.ArtifactsConfigurationResponse
             * @classdesc Represents a MissionParameters.
             * @implements IMissionParameters
             * @constructor
             * @param {ei.ArtifactsConfigurationResponse.IMissionParameters=} [properties] Properties to set
             */
            function MissionParameters(properties) {
                this.durations = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * MissionParameters ship.
             * @member {ei.MissionInfo.Spaceship} ship
             * @memberof ei.ArtifactsConfigurationResponse.MissionParameters
             * @instance
             */
            MissionParameters.prototype.ship = 0;

            /**
             * MissionParameters durations.
             * @member {Array.<ei.ArtifactsConfigurationResponse.MissionParameters.IDuration>} durations
             * @memberof ei.ArtifactsConfigurationResponse.MissionParameters
             * @instance
             */
            MissionParameters.prototype.durations = $util.emptyArray;

            /**
             * MissionParameters capacity_DEPRECATED.
             * @member {number} capacity_DEPRECATED
             * @memberof ei.ArtifactsConfigurationResponse.MissionParameters
             * @instance
             */
            MissionParameters.prototype.capacity_DEPRECATED = 0;

            /**
             * Creates a new MissionParameters instance using the specified properties.
             * @function create
             * @memberof ei.ArtifactsConfigurationResponse.MissionParameters
             * @static
             * @param {ei.ArtifactsConfigurationResponse.IMissionParameters=} [properties] Properties to set
             * @returns {ei.ArtifactsConfigurationResponse.MissionParameters} MissionParameters instance
             */
            MissionParameters.create = function create(properties) {
                return new MissionParameters(properties);
            };

            /**
             * Encodes the specified MissionParameters message. Does not implicitly {@link ei.ArtifactsConfigurationResponse.MissionParameters.verify|verify} messages.
             * @function encode
             * @memberof ei.ArtifactsConfigurationResponse.MissionParameters
             * @static
             * @param {ei.ArtifactsConfigurationResponse.IMissionParameters} message MissionParameters message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MissionParameters.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.ship != null && Object.hasOwnProperty.call(message, "ship"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.ship);
                if (message.capacity_DEPRECATED != null && Object.hasOwnProperty.call(message, "capacity_DEPRECATED"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.capacity_DEPRECATED);
                if (message.durations != null && message.durations.length)
                    for (let i = 0; i < message.durations.length; ++i)
                        $root.ei.ArtifactsConfigurationResponse.MissionParameters.Duration.encode(message.durations[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified MissionParameters message, length delimited. Does not implicitly {@link ei.ArtifactsConfigurationResponse.MissionParameters.verify|verify} messages.
             * @function encodeDelimited
             * @memberof ei.ArtifactsConfigurationResponse.MissionParameters
             * @static
             * @param {ei.ArtifactsConfigurationResponse.IMissionParameters} message MissionParameters message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MissionParameters.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a MissionParameters message from the specified reader or buffer.
             * @function decode
             * @memberof ei.ArtifactsConfigurationResponse.MissionParameters
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {ei.ArtifactsConfigurationResponse.MissionParameters} MissionParameters
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MissionParameters.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ei.ArtifactsConfigurationResponse.MissionParameters();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.ship = reader.int32();
                        break;
                    case 3:
                        if (!(message.durations && message.durations.length))
                            message.durations = [];
                        message.durations.push($root.ei.ArtifactsConfigurationResponse.MissionParameters.Duration.decode(reader, reader.uint32()));
                        break;
                    case 2:
                        message.capacity_DEPRECATED = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a MissionParameters message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof ei.ArtifactsConfigurationResponse.MissionParameters
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {ei.ArtifactsConfigurationResponse.MissionParameters} MissionParameters
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MissionParameters.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a MissionParameters message.
             * @function verify
             * @memberof ei.ArtifactsConfigurationResponse.MissionParameters
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            MissionParameters.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.ship != null && message.hasOwnProperty("ship"))
                    switch (message.ship) {
                    default:
                        return "ship: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                    case 8:
                    case 9:
                        break;
                    }
                if (message.durations != null && message.hasOwnProperty("durations")) {
                    if (!Array.isArray(message.durations))
                        return "durations: array expected";
                    for (let i = 0; i < message.durations.length; ++i) {
                        let error = $root.ei.ArtifactsConfigurationResponse.MissionParameters.Duration.verify(message.durations[i]);
                        if (error)
                            return "durations." + error;
                    }
                }
                if (message.capacity_DEPRECATED != null && message.hasOwnProperty("capacity_DEPRECATED"))
                    if (!$util.isInteger(message.capacity_DEPRECATED))
                        return "capacity_DEPRECATED: integer expected";
                return null;
            };

            /**
             * Creates a MissionParameters message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof ei.ArtifactsConfigurationResponse.MissionParameters
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {ei.ArtifactsConfigurationResponse.MissionParameters} MissionParameters
             */
            MissionParameters.fromObject = function fromObject(object) {
                if (object instanceof $root.ei.ArtifactsConfigurationResponse.MissionParameters)
                    return object;
                let message = new $root.ei.ArtifactsConfigurationResponse.MissionParameters();
                switch (object.ship) {
                case "CHICKEN_ONE":
                case 0:
                    message.ship = 0;
                    break;
                case "CHICKEN_NINE":
                case 1:
                    message.ship = 1;
                    break;
                case "CHICKEN_HEAVY":
                case 2:
                    message.ship = 2;
                    break;
                case "BCR":
                case 3:
                    message.ship = 3;
                    break;
                case "MILLENIUM_CHICKEN":
                case 4:
                    message.ship = 4;
                    break;
                case "CORELLIHEN_CORVETTE":
                case 5:
                    message.ship = 5;
                    break;
                case "GALEGGTICA":
                case 6:
                    message.ship = 6;
                    break;
                case "CHICKFIANT":
                case 7:
                    message.ship = 7;
                    break;
                case "VOYEGGER":
                case 8:
                    message.ship = 8;
                    break;
                case "HENERPRISE":
                case 9:
                    message.ship = 9;
                    break;
                }
                if (object.durations) {
                    if (!Array.isArray(object.durations))
                        throw TypeError(".ei.ArtifactsConfigurationResponse.MissionParameters.durations: array expected");
                    message.durations = [];
                    for (let i = 0; i < object.durations.length; ++i) {
                        if (typeof object.durations[i] !== "object")
                            throw TypeError(".ei.ArtifactsConfigurationResponse.MissionParameters.durations: object expected");
                        message.durations[i] = $root.ei.ArtifactsConfigurationResponse.MissionParameters.Duration.fromObject(object.durations[i]);
                    }
                }
                if (object.capacity_DEPRECATED != null)
                    message.capacity_DEPRECATED = object.capacity_DEPRECATED >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a MissionParameters message. Also converts values to other types if specified.
             * @function toObject
             * @memberof ei.ArtifactsConfigurationResponse.MissionParameters
             * @static
             * @param {ei.ArtifactsConfigurationResponse.MissionParameters} message MissionParameters
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            MissionParameters.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.durations = [];
                if (options.defaults) {
                    object.ship = options.enums === String ? "CHICKEN_ONE" : 0;
                    object.capacity_DEPRECATED = 0;
                }
                if (message.ship != null && message.hasOwnProperty("ship"))
                    object.ship = options.enums === String ? $root.ei.MissionInfo.Spaceship[message.ship] : message.ship;
                if (message.capacity_DEPRECATED != null && message.hasOwnProperty("capacity_DEPRECATED"))
                    object.capacity_DEPRECATED = message.capacity_DEPRECATED;
                if (message.durations && message.durations.length) {
                    object.durations = [];
                    for (let j = 0; j < message.durations.length; ++j)
                        object.durations[j] = $root.ei.ArtifactsConfigurationResponse.MissionParameters.Duration.toObject(message.durations[j], options);
                }
                return object;
            };

            /**
             * Converts this MissionParameters to JSON.
             * @function toJSON
             * @memberof ei.ArtifactsConfigurationResponse.MissionParameters
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            MissionParameters.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            MissionParameters.Duration = (function() {

                /**
                 * Properties of a Duration.
                 * @memberof ei.ArtifactsConfigurationResponse.MissionParameters
                 * @interface IDuration
                 * @property {ei.MissionInfo.DurationType|null} [durationType] Duration durationType
                 * @property {number|null} [seconds] Duration seconds
                 * @property {number|null} [quality] Duration quality
                 * @property {number|null} [minQuality] Duration minQuality
                 * @property {number|null} [maxQuality] Duration maxQuality
                 * @property {number|null} [capacity] Duration capacity
                 */

                /**
                 * Constructs a new Duration.
                 * @memberof ei.ArtifactsConfigurationResponse.MissionParameters
                 * @classdesc Represents a Duration.
                 * @implements IDuration
                 * @constructor
                 * @param {ei.ArtifactsConfigurationResponse.MissionParameters.IDuration=} [properties] Properties to set
                 */
                function Duration(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Duration durationType.
                 * @member {ei.MissionInfo.DurationType} durationType
                 * @memberof ei.ArtifactsConfigurationResponse.MissionParameters.Duration
                 * @instance
                 */
                Duration.prototype.durationType = 0;

                /**
                 * Duration seconds.
                 * @member {number} seconds
                 * @memberof ei.ArtifactsConfigurationResponse.MissionParameters.Duration
                 * @instance
                 */
                Duration.prototype.seconds = 0;

                /**
                 * Duration quality.
                 * @member {number} quality
                 * @memberof ei.ArtifactsConfigurationResponse.MissionParameters.Duration
                 * @instance
                 */
                Duration.prototype.quality = 0;

                /**
                 * Duration minQuality.
                 * @member {number} minQuality
                 * @memberof ei.ArtifactsConfigurationResponse.MissionParameters.Duration
                 * @instance
                 */
                Duration.prototype.minQuality = 0;

                /**
                 * Duration maxQuality.
                 * @member {number} maxQuality
                 * @memberof ei.ArtifactsConfigurationResponse.MissionParameters.Duration
                 * @instance
                 */
                Duration.prototype.maxQuality = 0;

                /**
                 * Duration capacity.
                 * @member {number} capacity
                 * @memberof ei.ArtifactsConfigurationResponse.MissionParameters.Duration
                 * @instance
                 */
                Duration.prototype.capacity = 0;

                /**
                 * Creates a new Duration instance using the specified properties.
                 * @function create
                 * @memberof ei.ArtifactsConfigurationResponse.MissionParameters.Duration
                 * @static
                 * @param {ei.ArtifactsConfigurationResponse.MissionParameters.IDuration=} [properties] Properties to set
                 * @returns {ei.ArtifactsConfigurationResponse.MissionParameters.Duration} Duration instance
                 */
                Duration.create = function create(properties) {
                    return new Duration(properties);
                };

                /**
                 * Encodes the specified Duration message. Does not implicitly {@link ei.ArtifactsConfigurationResponse.MissionParameters.Duration.verify|verify} messages.
                 * @function encode
                 * @memberof ei.ArtifactsConfigurationResponse.MissionParameters.Duration
                 * @static
                 * @param {ei.ArtifactsConfigurationResponse.MissionParameters.IDuration} message Duration message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Duration.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.durationType != null && Object.hasOwnProperty.call(message, "durationType"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.durationType);
                    if (message.seconds != null && Object.hasOwnProperty.call(message, "seconds"))
                        writer.uint32(/* id 2, wireType 1 =*/17).double(message.seconds);
                    if (message.quality != null && Object.hasOwnProperty.call(message, "quality"))
                        writer.uint32(/* id 3, wireType 5 =*/29).float(message.quality);
                    if (message.minQuality != null && Object.hasOwnProperty.call(message, "minQuality"))
                        writer.uint32(/* id 4, wireType 5 =*/37).float(message.minQuality);
                    if (message.maxQuality != null && Object.hasOwnProperty.call(message, "maxQuality"))
                        writer.uint32(/* id 5, wireType 5 =*/45).float(message.maxQuality);
                    if (message.capacity != null && Object.hasOwnProperty.call(message, "capacity"))
                        writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.capacity);
                    return writer;
                };

                /**
                 * Encodes the specified Duration message, length delimited. Does not implicitly {@link ei.ArtifactsConfigurationResponse.MissionParameters.Duration.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof ei.ArtifactsConfigurationResponse.MissionParameters.Duration
                 * @static
                 * @param {ei.ArtifactsConfigurationResponse.MissionParameters.IDuration} message Duration message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Duration.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a Duration message from the specified reader or buffer.
                 * @function decode
                 * @memberof ei.ArtifactsConfigurationResponse.MissionParameters.Duration
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {ei.ArtifactsConfigurationResponse.MissionParameters.Duration} Duration
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Duration.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ei.ArtifactsConfigurationResponse.MissionParameters.Duration();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.durationType = reader.int32();
                            break;
                        case 2:
                            message.seconds = reader.double();
                            break;
                        case 3:
                            message.quality = reader.float();
                            break;
                        case 4:
                            message.minQuality = reader.float();
                            break;
                        case 5:
                            message.maxQuality = reader.float();
                            break;
                        case 6:
                            message.capacity = reader.uint32();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a Duration message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof ei.ArtifactsConfigurationResponse.MissionParameters.Duration
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {ei.ArtifactsConfigurationResponse.MissionParameters.Duration} Duration
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Duration.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a Duration message.
                 * @function verify
                 * @memberof ei.ArtifactsConfigurationResponse.MissionParameters.Duration
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Duration.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.durationType != null && message.hasOwnProperty("durationType"))
                        switch (message.durationType) {
                        default:
                            return "durationType: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                            break;
                        }
                    if (message.seconds != null && message.hasOwnProperty("seconds"))
                        if (typeof message.seconds !== "number")
                            return "seconds: number expected";
                    if (message.quality != null && message.hasOwnProperty("quality"))
                        if (typeof message.quality !== "number")
                            return "quality: number expected";
                    if (message.minQuality != null && message.hasOwnProperty("minQuality"))
                        if (typeof message.minQuality !== "number")
                            return "minQuality: number expected";
                    if (message.maxQuality != null && message.hasOwnProperty("maxQuality"))
                        if (typeof message.maxQuality !== "number")
                            return "maxQuality: number expected";
                    if (message.capacity != null && message.hasOwnProperty("capacity"))
                        if (!$util.isInteger(message.capacity))
                            return "capacity: integer expected";
                    return null;
                };

                /**
                 * Creates a Duration message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof ei.ArtifactsConfigurationResponse.MissionParameters.Duration
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {ei.ArtifactsConfigurationResponse.MissionParameters.Duration} Duration
                 */
                Duration.fromObject = function fromObject(object) {
                    if (object instanceof $root.ei.ArtifactsConfigurationResponse.MissionParameters.Duration)
                        return object;
                    let message = new $root.ei.ArtifactsConfigurationResponse.MissionParameters.Duration();
                    switch (object.durationType) {
                    case "SHORT":
                    case 0:
                        message.durationType = 0;
                        break;
                    case "LONG":
                    case 1:
                        message.durationType = 1;
                        break;
                    case "EPIC":
                    case 2:
                        message.durationType = 2;
                        break;
                    case "TUTORIAL":
                    case 3:
                        message.durationType = 3;
                        break;
                    }
                    if (object.seconds != null)
                        message.seconds = Number(object.seconds);
                    if (object.quality != null)
                        message.quality = Number(object.quality);
                    if (object.minQuality != null)
                        message.minQuality = Number(object.minQuality);
                    if (object.maxQuality != null)
                        message.maxQuality = Number(object.maxQuality);
                    if (object.capacity != null)
                        message.capacity = object.capacity >>> 0;
                    return message;
                };

                /**
                 * Creates a plain object from a Duration message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof ei.ArtifactsConfigurationResponse.MissionParameters.Duration
                 * @static
                 * @param {ei.ArtifactsConfigurationResponse.MissionParameters.Duration} message Duration
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Duration.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.durationType = options.enums === String ? "SHORT" : 0;
                        object.seconds = 0;
                        object.quality = 0;
                        object.minQuality = 0;
                        object.maxQuality = 0;
                        object.capacity = 0;
                    }
                    if (message.durationType != null && message.hasOwnProperty("durationType"))
                        object.durationType = options.enums === String ? $root.ei.MissionInfo.DurationType[message.durationType] : message.durationType;
                    if (message.seconds != null && message.hasOwnProperty("seconds"))
                        object.seconds = options.json && !isFinite(message.seconds) ? String(message.seconds) : message.seconds;
                    if (message.quality != null && message.hasOwnProperty("quality"))
                        object.quality = options.json && !isFinite(message.quality) ? String(message.quality) : message.quality;
                    if (message.minQuality != null && message.hasOwnProperty("minQuality"))
                        object.minQuality = options.json && !isFinite(message.minQuality) ? String(message.minQuality) : message.minQuality;
                    if (message.maxQuality != null && message.hasOwnProperty("maxQuality"))
                        object.maxQuality = options.json && !isFinite(message.maxQuality) ? String(message.maxQuality) : message.maxQuality;
                    if (message.capacity != null && message.hasOwnProperty("capacity"))
                        object.capacity = message.capacity;
                    return object;
                };

                /**
                 * Converts this Duration to JSON.
                 * @function toJSON
                 * @memberof ei.ArtifactsConfigurationResponse.MissionParameters.Duration
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Duration.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return Duration;
            })();

            return MissionParameters;
        })();

        ArtifactsConfigurationResponse.ArtifactParameters = (function() {

            /**
             * Properties of an ArtifactParameters.
             * @memberof ei.ArtifactsConfigurationResponse
             * @interface IArtifactParameters
             * @property {ei.IArtifactSpec|null} [spec] ArtifactParameters spec
             * @property {number|null} [baseQuality] ArtifactParameters baseQuality
             * @property {number|null} [oddsMultiplier] ArtifactParameters oddsMultiplier
             * @property {number|null} [value] ArtifactParameters value
             * @property {number|null} [craftingPrice] ArtifactParameters craftingPrice
             * @property {number|null} [craftingPriceLow] ArtifactParameters craftingPriceLow
             * @property {number|null} [craftingPriceDomain] ArtifactParameters craftingPriceDomain
             * @property {number|null} [craftingPriceCurve] ArtifactParameters craftingPriceCurve
             */

            /**
             * Constructs a new ArtifactParameters.
             * @memberof ei.ArtifactsConfigurationResponse
             * @classdesc Represents an ArtifactParameters.
             * @implements IArtifactParameters
             * @constructor
             * @param {ei.ArtifactsConfigurationResponse.IArtifactParameters=} [properties] Properties to set
             */
            function ArtifactParameters(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ArtifactParameters spec.
             * @member {ei.IArtifactSpec|null|undefined} spec
             * @memberof ei.ArtifactsConfigurationResponse.ArtifactParameters
             * @instance
             */
            ArtifactParameters.prototype.spec = null;

            /**
             * ArtifactParameters baseQuality.
             * @member {number} baseQuality
             * @memberof ei.ArtifactsConfigurationResponse.ArtifactParameters
             * @instance
             */
            ArtifactParameters.prototype.baseQuality = 0;

            /**
             * ArtifactParameters oddsMultiplier.
             * @member {number} oddsMultiplier
             * @memberof ei.ArtifactsConfigurationResponse.ArtifactParameters
             * @instance
             */
            ArtifactParameters.prototype.oddsMultiplier = 0;

            /**
             * ArtifactParameters value.
             * @member {number} value
             * @memberof ei.ArtifactsConfigurationResponse.ArtifactParameters
             * @instance
             */
            ArtifactParameters.prototype.value = 0;

            /**
             * ArtifactParameters craftingPrice.
             * @member {number} craftingPrice
             * @memberof ei.ArtifactsConfigurationResponse.ArtifactParameters
             * @instance
             */
            ArtifactParameters.prototype.craftingPrice = 0;

            /**
             * ArtifactParameters craftingPriceLow.
             * @member {number} craftingPriceLow
             * @memberof ei.ArtifactsConfigurationResponse.ArtifactParameters
             * @instance
             */
            ArtifactParameters.prototype.craftingPriceLow = 0;

            /**
             * ArtifactParameters craftingPriceDomain.
             * @member {number} craftingPriceDomain
             * @memberof ei.ArtifactsConfigurationResponse.ArtifactParameters
             * @instance
             */
            ArtifactParameters.prototype.craftingPriceDomain = 0;

            /**
             * ArtifactParameters craftingPriceCurve.
             * @member {number} craftingPriceCurve
             * @memberof ei.ArtifactsConfigurationResponse.ArtifactParameters
             * @instance
             */
            ArtifactParameters.prototype.craftingPriceCurve = 0;

            /**
             * Creates a new ArtifactParameters instance using the specified properties.
             * @function create
             * @memberof ei.ArtifactsConfigurationResponse.ArtifactParameters
             * @static
             * @param {ei.ArtifactsConfigurationResponse.IArtifactParameters=} [properties] Properties to set
             * @returns {ei.ArtifactsConfigurationResponse.ArtifactParameters} ArtifactParameters instance
             */
            ArtifactParameters.create = function create(properties) {
                return new ArtifactParameters(properties);
            };

            /**
             * Encodes the specified ArtifactParameters message. Does not implicitly {@link ei.ArtifactsConfigurationResponse.ArtifactParameters.verify|verify} messages.
             * @function encode
             * @memberof ei.ArtifactsConfigurationResponse.ArtifactParameters
             * @static
             * @param {ei.ArtifactsConfigurationResponse.IArtifactParameters} message ArtifactParameters message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ArtifactParameters.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.spec != null && Object.hasOwnProperty.call(message, "spec"))
                    $root.ei.ArtifactSpec.encode(message.spec, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.baseQuality != null && Object.hasOwnProperty.call(message, "baseQuality"))
                    writer.uint32(/* id 2, wireType 1 =*/17).double(message.baseQuality);
                if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                    writer.uint32(/* id 3, wireType 1 =*/25).double(message.value);
                if (message.oddsMultiplier != null && Object.hasOwnProperty.call(message, "oddsMultiplier"))
                    writer.uint32(/* id 4, wireType 1 =*/33).double(message.oddsMultiplier);
                if (message.craftingPrice != null && Object.hasOwnProperty.call(message, "craftingPrice"))
                    writer.uint32(/* id 5, wireType 1 =*/41).double(message.craftingPrice);
                if (message.craftingPriceLow != null && Object.hasOwnProperty.call(message, "craftingPriceLow"))
                    writer.uint32(/* id 6, wireType 1 =*/49).double(message.craftingPriceLow);
                if (message.craftingPriceDomain != null && Object.hasOwnProperty.call(message, "craftingPriceDomain"))
                    writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.craftingPriceDomain);
                if (message.craftingPriceCurve != null && Object.hasOwnProperty.call(message, "craftingPriceCurve"))
                    writer.uint32(/* id 8, wireType 1 =*/65).double(message.craftingPriceCurve);
                return writer;
            };

            /**
             * Encodes the specified ArtifactParameters message, length delimited. Does not implicitly {@link ei.ArtifactsConfigurationResponse.ArtifactParameters.verify|verify} messages.
             * @function encodeDelimited
             * @memberof ei.ArtifactsConfigurationResponse.ArtifactParameters
             * @static
             * @param {ei.ArtifactsConfigurationResponse.IArtifactParameters} message ArtifactParameters message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ArtifactParameters.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an ArtifactParameters message from the specified reader or buffer.
             * @function decode
             * @memberof ei.ArtifactsConfigurationResponse.ArtifactParameters
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {ei.ArtifactsConfigurationResponse.ArtifactParameters} ArtifactParameters
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ArtifactParameters.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ei.ArtifactsConfigurationResponse.ArtifactParameters();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.spec = $root.ei.ArtifactSpec.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.baseQuality = reader.double();
                        break;
                    case 4:
                        message.oddsMultiplier = reader.double();
                        break;
                    case 3:
                        message.value = reader.double();
                        break;
                    case 5:
                        message.craftingPrice = reader.double();
                        break;
                    case 6:
                        message.craftingPriceLow = reader.double();
                        break;
                    case 7:
                        message.craftingPriceDomain = reader.uint32();
                        break;
                    case 8:
                        message.craftingPriceCurve = reader.double();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an ArtifactParameters message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof ei.ArtifactsConfigurationResponse.ArtifactParameters
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {ei.ArtifactsConfigurationResponse.ArtifactParameters} ArtifactParameters
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ArtifactParameters.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an ArtifactParameters message.
             * @function verify
             * @memberof ei.ArtifactsConfigurationResponse.ArtifactParameters
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ArtifactParameters.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.spec != null && message.hasOwnProperty("spec")) {
                    let error = $root.ei.ArtifactSpec.verify(message.spec);
                    if (error)
                        return "spec." + error;
                }
                if (message.baseQuality != null && message.hasOwnProperty("baseQuality"))
                    if (typeof message.baseQuality !== "number")
                        return "baseQuality: number expected";
                if (message.oddsMultiplier != null && message.hasOwnProperty("oddsMultiplier"))
                    if (typeof message.oddsMultiplier !== "number")
                        return "oddsMultiplier: number expected";
                if (message.value != null && message.hasOwnProperty("value"))
                    if (typeof message.value !== "number")
                        return "value: number expected";
                if (message.craftingPrice != null && message.hasOwnProperty("craftingPrice"))
                    if (typeof message.craftingPrice !== "number")
                        return "craftingPrice: number expected";
                if (message.craftingPriceLow != null && message.hasOwnProperty("craftingPriceLow"))
                    if (typeof message.craftingPriceLow !== "number")
                        return "craftingPriceLow: number expected";
                if (message.craftingPriceDomain != null && message.hasOwnProperty("craftingPriceDomain"))
                    if (!$util.isInteger(message.craftingPriceDomain))
                        return "craftingPriceDomain: integer expected";
                if (message.craftingPriceCurve != null && message.hasOwnProperty("craftingPriceCurve"))
                    if (typeof message.craftingPriceCurve !== "number")
                        return "craftingPriceCurve: number expected";
                return null;
            };

            /**
             * Creates an ArtifactParameters message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof ei.ArtifactsConfigurationResponse.ArtifactParameters
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {ei.ArtifactsConfigurationResponse.ArtifactParameters} ArtifactParameters
             */
            ArtifactParameters.fromObject = function fromObject(object) {
                if (object instanceof $root.ei.ArtifactsConfigurationResponse.ArtifactParameters)
                    return object;
                let message = new $root.ei.ArtifactsConfigurationResponse.ArtifactParameters();
                if (object.spec != null) {
                    if (typeof object.spec !== "object")
                        throw TypeError(".ei.ArtifactsConfigurationResponse.ArtifactParameters.spec: object expected");
                    message.spec = $root.ei.ArtifactSpec.fromObject(object.spec);
                }
                if (object.baseQuality != null)
                    message.baseQuality = Number(object.baseQuality);
                if (object.oddsMultiplier != null)
                    message.oddsMultiplier = Number(object.oddsMultiplier);
                if (object.value != null)
                    message.value = Number(object.value);
                if (object.craftingPrice != null)
                    message.craftingPrice = Number(object.craftingPrice);
                if (object.craftingPriceLow != null)
                    message.craftingPriceLow = Number(object.craftingPriceLow);
                if (object.craftingPriceDomain != null)
                    message.craftingPriceDomain = object.craftingPriceDomain >>> 0;
                if (object.craftingPriceCurve != null)
                    message.craftingPriceCurve = Number(object.craftingPriceCurve);
                return message;
            };

            /**
             * Creates a plain object from an ArtifactParameters message. Also converts values to other types if specified.
             * @function toObject
             * @memberof ei.ArtifactsConfigurationResponse.ArtifactParameters
             * @static
             * @param {ei.ArtifactsConfigurationResponse.ArtifactParameters} message ArtifactParameters
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ArtifactParameters.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.spec = null;
                    object.baseQuality = 0;
                    object.value = 0;
                    object.oddsMultiplier = 0;
                    object.craftingPrice = 0;
                    object.craftingPriceLow = 0;
                    object.craftingPriceDomain = 0;
                    object.craftingPriceCurve = 0;
                }
                if (message.spec != null && message.hasOwnProperty("spec"))
                    object.spec = $root.ei.ArtifactSpec.toObject(message.spec, options);
                if (message.baseQuality != null && message.hasOwnProperty("baseQuality"))
                    object.baseQuality = options.json && !isFinite(message.baseQuality) ? String(message.baseQuality) : message.baseQuality;
                if (message.value != null && message.hasOwnProperty("value"))
                    object.value = options.json && !isFinite(message.value) ? String(message.value) : message.value;
                if (message.oddsMultiplier != null && message.hasOwnProperty("oddsMultiplier"))
                    object.oddsMultiplier = options.json && !isFinite(message.oddsMultiplier) ? String(message.oddsMultiplier) : message.oddsMultiplier;
                if (message.craftingPrice != null && message.hasOwnProperty("craftingPrice"))
                    object.craftingPrice = options.json && !isFinite(message.craftingPrice) ? String(message.craftingPrice) : message.craftingPrice;
                if (message.craftingPriceLow != null && message.hasOwnProperty("craftingPriceLow"))
                    object.craftingPriceLow = options.json && !isFinite(message.craftingPriceLow) ? String(message.craftingPriceLow) : message.craftingPriceLow;
                if (message.craftingPriceDomain != null && message.hasOwnProperty("craftingPriceDomain"))
                    object.craftingPriceDomain = message.craftingPriceDomain;
                if (message.craftingPriceCurve != null && message.hasOwnProperty("craftingPriceCurve"))
                    object.craftingPriceCurve = options.json && !isFinite(message.craftingPriceCurve) ? String(message.craftingPriceCurve) : message.craftingPriceCurve;
                return object;
            };

            /**
             * Converts this ArtifactParameters to JSON.
             * @function toJSON
             * @memberof ei.ArtifactsConfigurationResponse.ArtifactParameters
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ArtifactParameters.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ArtifactParameters;
        })();

        return ArtifactsConfigurationResponse;
    })();

    ei.MissionRequest = (function() {

        /**
         * Properties of a MissionRequest.
         * @memberof ei
         * @interface IMissionRequest
         * @property {ei.IBasicRequestInfo|null} [rinfo] MissionRequest rinfo
         * @property {number|null} [clientVersion] MissionRequest clientVersion
         * @property {string|null} [eiUserId] MissionRequest eiUserId
         * @property {ei.IMissionInfo|null} [info] MissionRequest info
         */

        /**
         * Constructs a new MissionRequest.
         * @memberof ei
         * @classdesc Represents a MissionRequest.
         * @implements IMissionRequest
         * @constructor
         * @param {ei.IMissionRequest=} [properties] Properties to set
         */
        function MissionRequest(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * MissionRequest rinfo.
         * @member {ei.IBasicRequestInfo|null|undefined} rinfo
         * @memberof ei.MissionRequest
         * @instance
         */
        MissionRequest.prototype.rinfo = null;

        /**
         * MissionRequest clientVersion.
         * @member {number} clientVersion
         * @memberof ei.MissionRequest
         * @instance
         */
        MissionRequest.prototype.clientVersion = 0;

        /**
         * MissionRequest eiUserId.
         * @member {string} eiUserId
         * @memberof ei.MissionRequest
         * @instance
         */
        MissionRequest.prototype.eiUserId = "";

        /**
         * MissionRequest info.
         * @member {ei.IMissionInfo|null|undefined} info
         * @memberof ei.MissionRequest
         * @instance
         */
        MissionRequest.prototype.info = null;

        /**
         * Creates a new MissionRequest instance using the specified properties.
         * @function create
         * @memberof ei.MissionRequest
         * @static
         * @param {ei.IMissionRequest=} [properties] Properties to set
         * @returns {ei.MissionRequest} MissionRequest instance
         */
        MissionRequest.create = function create(properties) {
            return new MissionRequest(properties);
        };

        /**
         * Encodes the specified MissionRequest message. Does not implicitly {@link ei.MissionRequest.verify|verify} messages.
         * @function encode
         * @memberof ei.MissionRequest
         * @static
         * @param {ei.IMissionRequest} message MissionRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MissionRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.clientVersion != null && Object.hasOwnProperty.call(message, "clientVersion"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.clientVersion);
            if (message.info != null && Object.hasOwnProperty.call(message, "info"))
                $root.ei.MissionInfo.encode(message.info, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.eiUserId != null && Object.hasOwnProperty.call(message, "eiUserId"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.eiUserId);
            if (message.rinfo != null && Object.hasOwnProperty.call(message, "rinfo"))
                $root.ei.BasicRequestInfo.encode(message.rinfo, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified MissionRequest message, length delimited. Does not implicitly {@link ei.MissionRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ei.MissionRequest
         * @static
         * @param {ei.IMissionRequest} message MissionRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MissionRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a MissionRequest message from the specified reader or buffer.
         * @function decode
         * @memberof ei.MissionRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ei.MissionRequest} MissionRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MissionRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ei.MissionRequest();
            while (reader.pos < end) {
                let tag = reader.uint32();
                switch (tag >>> 3) {
                case 4:
                    message.rinfo = $root.ei.BasicRequestInfo.decode(reader, reader.uint32());
                    break;
                case 1:
                    message.clientVersion = reader.uint32();
                    break;
                case 3:
                    message.eiUserId = reader.string();
                    break;
                case 2:
                    message.info = $root.ei.MissionInfo.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a MissionRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ei.MissionRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ei.MissionRequest} MissionRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MissionRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a MissionRequest message.
         * @function verify
         * @memberof ei.MissionRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        MissionRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.rinfo != null && message.hasOwnProperty("rinfo")) {
                let error = $root.ei.BasicRequestInfo.verify(message.rinfo);
                if (error)
                    return "rinfo." + error;
            }
            if (message.clientVersion != null && message.hasOwnProperty("clientVersion"))
                if (!$util.isInteger(message.clientVersion))
                    return "clientVersion: integer expected";
            if (message.eiUserId != null && message.hasOwnProperty("eiUserId"))
                if (!$util.isString(message.eiUserId))
                    return "eiUserId: string expected";
            if (message.info != null && message.hasOwnProperty("info")) {
                let error = $root.ei.MissionInfo.verify(message.info);
                if (error)
                    return "info." + error;
            }
            return null;
        };

        /**
         * Creates a MissionRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ei.MissionRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ei.MissionRequest} MissionRequest
         */
        MissionRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.ei.MissionRequest)
                return object;
            let message = new $root.ei.MissionRequest();
            if (object.rinfo != null) {
                if (typeof object.rinfo !== "object")
                    throw TypeError(".ei.MissionRequest.rinfo: object expected");
                message.rinfo = $root.ei.BasicRequestInfo.fromObject(object.rinfo);
            }
            if (object.clientVersion != null)
                message.clientVersion = object.clientVersion >>> 0;
            if (object.eiUserId != null)
                message.eiUserId = String(object.eiUserId);
            if (object.info != null) {
                if (typeof object.info !== "object")
                    throw TypeError(".ei.MissionRequest.info: object expected");
                message.info = $root.ei.MissionInfo.fromObject(object.info);
            }
            return message;
        };

        /**
         * Creates a plain object from a MissionRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ei.MissionRequest
         * @static
         * @param {ei.MissionRequest} message MissionRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        MissionRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.defaults) {
                object.clientVersion = 0;
                object.info = null;
                object.eiUserId = "";
                object.rinfo = null;
            }
            if (message.clientVersion != null && message.hasOwnProperty("clientVersion"))
                object.clientVersion = message.clientVersion;
            if (message.info != null && message.hasOwnProperty("info"))
                object.info = $root.ei.MissionInfo.toObject(message.info, options);
            if (message.eiUserId != null && message.hasOwnProperty("eiUserId"))
                object.eiUserId = message.eiUserId;
            if (message.rinfo != null && message.hasOwnProperty("rinfo"))
                object.rinfo = $root.ei.BasicRequestInfo.toObject(message.rinfo, options);
            return object;
        };

        /**
         * Converts this MissionRequest to JSON.
         * @function toJSON
         * @memberof ei.MissionRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        MissionRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return MissionRequest;
    })();

    ei.MissionResponse = (function() {

        /**
         * Properties of a MissionResponse.
         * @memberof ei
         * @interface IMissionResponse
         * @property {boolean|null} [success] MissionResponse success
         * @property {ei.IMissionInfo|null} [info] MissionResponse info
         */

        /**
         * Constructs a new MissionResponse.
         * @memberof ei
         * @classdesc Represents a MissionResponse.
         * @implements IMissionResponse
         * @constructor
         * @param {ei.IMissionResponse=} [properties] Properties to set
         */
        function MissionResponse(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * MissionResponse success.
         * @member {boolean} success
         * @memberof ei.MissionResponse
         * @instance
         */
        MissionResponse.prototype.success = false;

        /**
         * MissionResponse info.
         * @member {ei.IMissionInfo|null|undefined} info
         * @memberof ei.MissionResponse
         * @instance
         */
        MissionResponse.prototype.info = null;

        /**
         * Creates a new MissionResponse instance using the specified properties.
         * @function create
         * @memberof ei.MissionResponse
         * @static
         * @param {ei.IMissionResponse=} [properties] Properties to set
         * @returns {ei.MissionResponse} MissionResponse instance
         */
        MissionResponse.create = function create(properties) {
            return new MissionResponse(properties);
        };

        /**
         * Encodes the specified MissionResponse message. Does not implicitly {@link ei.MissionResponse.verify|verify} messages.
         * @function encode
         * @memberof ei.MissionResponse
         * @static
         * @param {ei.IMissionResponse} message MissionResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MissionResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.success != null && Object.hasOwnProperty.call(message, "success"))
                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.success);
            if (message.info != null && Object.hasOwnProperty.call(message, "info"))
                $root.ei.MissionInfo.encode(message.info, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified MissionResponse message, length delimited. Does not implicitly {@link ei.MissionResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ei.MissionResponse
         * @static
         * @param {ei.IMissionResponse} message MissionResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MissionResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a MissionResponse message from the specified reader or buffer.
         * @function decode
         * @memberof ei.MissionResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ei.MissionResponse} MissionResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MissionResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ei.MissionResponse();
            while (reader.pos < end) {
                let tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.success = reader.bool();
                    break;
                case 2:
                    message.info = $root.ei.MissionInfo.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a MissionResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ei.MissionResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ei.MissionResponse} MissionResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MissionResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a MissionResponse message.
         * @function verify
         * @memberof ei.MissionResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        MissionResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.success != null && message.hasOwnProperty("success"))
                if (typeof message.success !== "boolean")
                    return "success: boolean expected";
            if (message.info != null && message.hasOwnProperty("info")) {
                let error = $root.ei.MissionInfo.verify(message.info);
                if (error)
                    return "info." + error;
            }
            return null;
        };

        /**
         * Creates a MissionResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ei.MissionResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ei.MissionResponse} MissionResponse
         */
        MissionResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.ei.MissionResponse)
                return object;
            let message = new $root.ei.MissionResponse();
            if (object.success != null)
                message.success = Boolean(object.success);
            if (object.info != null) {
                if (typeof object.info !== "object")
                    throw TypeError(".ei.MissionResponse.info: object expected");
                message.info = $root.ei.MissionInfo.fromObject(object.info);
            }
            return message;
        };

        /**
         * Creates a plain object from a MissionResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ei.MissionResponse
         * @static
         * @param {ei.MissionResponse} message MissionResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        MissionResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.defaults) {
                object.success = false;
                object.info = null;
            }
            if (message.success != null && message.hasOwnProperty("success"))
                object.success = message.success;
            if (message.info != null && message.hasOwnProperty("info"))
                object.info = $root.ei.MissionInfo.toObject(message.info, options);
            return object;
        };

        /**
         * Converts this MissionResponse to JSON.
         * @function toJSON
         * @memberof ei.MissionResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        MissionResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return MissionResponse;
    })();

    ei.CompleteMissionResponse = (function() {

        /**
         * Properties of a CompleteMissionResponse.
         * @memberof ei
         * @interface ICompleteMissionResponse
         * @property {boolean|null} [success] CompleteMissionResponse success
         * @property {ei.IMissionInfo|null} [info] CompleteMissionResponse info
         * @property {Array.<ei.CompleteMissionResponse.ISecureArtifactSpec>|null} [artifacts] CompleteMissionResponse artifacts
         * @property {Array.<ei.IReward>|null} [otherRewards] CompleteMissionResponse otherRewards
         * @property {string|null} [eiUserId] CompleteMissionResponse eiUserId
         */

        /**
         * Constructs a new CompleteMissionResponse.
         * @memberof ei
         * @classdesc Represents a CompleteMissionResponse.
         * @implements ICompleteMissionResponse
         * @constructor
         * @param {ei.ICompleteMissionResponse=} [properties] Properties to set
         */
        function CompleteMissionResponse(properties) {
            this.artifacts = [];
            this.otherRewards = [];
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CompleteMissionResponse success.
         * @member {boolean} success
         * @memberof ei.CompleteMissionResponse
         * @instance
         */
        CompleteMissionResponse.prototype.success = false;

        /**
         * CompleteMissionResponse info.
         * @member {ei.IMissionInfo|null|undefined} info
         * @memberof ei.CompleteMissionResponse
         * @instance
         */
        CompleteMissionResponse.prototype.info = null;

        /**
         * CompleteMissionResponse artifacts.
         * @member {Array.<ei.CompleteMissionResponse.ISecureArtifactSpec>} artifacts
         * @memberof ei.CompleteMissionResponse
         * @instance
         */
        CompleteMissionResponse.prototype.artifacts = $util.emptyArray;

        /**
         * CompleteMissionResponse otherRewards.
         * @member {Array.<ei.IReward>} otherRewards
         * @memberof ei.CompleteMissionResponse
         * @instance
         */
        CompleteMissionResponse.prototype.otherRewards = $util.emptyArray;

        /**
         * CompleteMissionResponse eiUserId.
         * @member {string} eiUserId
         * @memberof ei.CompleteMissionResponse
         * @instance
         */
        CompleteMissionResponse.prototype.eiUserId = "";

        /**
         * Creates a new CompleteMissionResponse instance using the specified properties.
         * @function create
         * @memberof ei.CompleteMissionResponse
         * @static
         * @param {ei.ICompleteMissionResponse=} [properties] Properties to set
         * @returns {ei.CompleteMissionResponse} CompleteMissionResponse instance
         */
        CompleteMissionResponse.create = function create(properties) {
            return new CompleteMissionResponse(properties);
        };

        /**
         * Encodes the specified CompleteMissionResponse message. Does not implicitly {@link ei.CompleteMissionResponse.verify|verify} messages.
         * @function encode
         * @memberof ei.CompleteMissionResponse
         * @static
         * @param {ei.ICompleteMissionResponse} message CompleteMissionResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CompleteMissionResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.success != null && Object.hasOwnProperty.call(message, "success"))
                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.success);
            if (message.info != null && Object.hasOwnProperty.call(message, "info"))
                $root.ei.MissionInfo.encode(message.info, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.artifacts != null && message.artifacts.length)
                for (let i = 0; i < message.artifacts.length; ++i)
                    $root.ei.CompleteMissionResponse.SecureArtifactSpec.encode(message.artifacts[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.otherRewards != null && message.otherRewards.length)
                for (let i = 0; i < message.otherRewards.length; ++i)
                    $root.ei.Reward.encode(message.otherRewards[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            if (message.eiUserId != null && Object.hasOwnProperty.call(message, "eiUserId"))
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.eiUserId);
            return writer;
        };

        /**
         * Encodes the specified CompleteMissionResponse message, length delimited. Does not implicitly {@link ei.CompleteMissionResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ei.CompleteMissionResponse
         * @static
         * @param {ei.ICompleteMissionResponse} message CompleteMissionResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CompleteMissionResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CompleteMissionResponse message from the specified reader or buffer.
         * @function decode
         * @memberof ei.CompleteMissionResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ei.CompleteMissionResponse} CompleteMissionResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CompleteMissionResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ei.CompleteMissionResponse();
            while (reader.pos < end) {
                let tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.success = reader.bool();
                    break;
                case 2:
                    message.info = $root.ei.MissionInfo.decode(reader, reader.uint32());
                    break;
                case 3:
                    if (!(message.artifacts && message.artifacts.length))
                        message.artifacts = [];
                    message.artifacts.push($root.ei.CompleteMissionResponse.SecureArtifactSpec.decode(reader, reader.uint32()));
                    break;
                case 4:
                    if (!(message.otherRewards && message.otherRewards.length))
                        message.otherRewards = [];
                    message.otherRewards.push($root.ei.Reward.decode(reader, reader.uint32()));
                    break;
                case 5:
                    message.eiUserId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a CompleteMissionResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ei.CompleteMissionResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ei.CompleteMissionResponse} CompleteMissionResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CompleteMissionResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CompleteMissionResponse message.
         * @function verify
         * @memberof ei.CompleteMissionResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CompleteMissionResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.success != null && message.hasOwnProperty("success"))
                if (typeof message.success !== "boolean")
                    return "success: boolean expected";
            if (message.info != null && message.hasOwnProperty("info")) {
                let error = $root.ei.MissionInfo.verify(message.info);
                if (error)
                    return "info." + error;
            }
            if (message.artifacts != null && message.hasOwnProperty("artifacts")) {
                if (!Array.isArray(message.artifacts))
                    return "artifacts: array expected";
                for (let i = 0; i < message.artifacts.length; ++i) {
                    let error = $root.ei.CompleteMissionResponse.SecureArtifactSpec.verify(message.artifacts[i]);
                    if (error)
                        return "artifacts." + error;
                }
            }
            if (message.otherRewards != null && message.hasOwnProperty("otherRewards")) {
                if (!Array.isArray(message.otherRewards))
                    return "otherRewards: array expected";
                for (let i = 0; i < message.otherRewards.length; ++i) {
                    let error = $root.ei.Reward.verify(message.otherRewards[i]);
                    if (error)
                        return "otherRewards." + error;
                }
            }
            if (message.eiUserId != null && message.hasOwnProperty("eiUserId"))
                if (!$util.isString(message.eiUserId))
                    return "eiUserId: string expected";
            return null;
        };

        /**
         * Creates a CompleteMissionResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ei.CompleteMissionResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ei.CompleteMissionResponse} CompleteMissionResponse
         */
        CompleteMissionResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.ei.CompleteMissionResponse)
                return object;
            let message = new $root.ei.CompleteMissionResponse();
            if (object.success != null)
                message.success = Boolean(object.success);
            if (object.info != null) {
                if (typeof object.info !== "object")
                    throw TypeError(".ei.CompleteMissionResponse.info: object expected");
                message.info = $root.ei.MissionInfo.fromObject(object.info);
            }
            if (object.artifacts) {
                if (!Array.isArray(object.artifacts))
                    throw TypeError(".ei.CompleteMissionResponse.artifacts: array expected");
                message.artifacts = [];
                for (let i = 0; i < object.artifacts.length; ++i) {
                    if (typeof object.artifacts[i] !== "object")
                        throw TypeError(".ei.CompleteMissionResponse.artifacts: object expected");
                    message.artifacts[i] = $root.ei.CompleteMissionResponse.SecureArtifactSpec.fromObject(object.artifacts[i]);
                }
            }
            if (object.otherRewards) {
                if (!Array.isArray(object.otherRewards))
                    throw TypeError(".ei.CompleteMissionResponse.otherRewards: array expected");
                message.otherRewards = [];
                for (let i = 0; i < object.otherRewards.length; ++i) {
                    if (typeof object.otherRewards[i] !== "object")
                        throw TypeError(".ei.CompleteMissionResponse.otherRewards: object expected");
                    message.otherRewards[i] = $root.ei.Reward.fromObject(object.otherRewards[i]);
                }
            }
            if (object.eiUserId != null)
                message.eiUserId = String(object.eiUserId);
            return message;
        };

        /**
         * Creates a plain object from a CompleteMissionResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ei.CompleteMissionResponse
         * @static
         * @param {ei.CompleteMissionResponse} message CompleteMissionResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CompleteMissionResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.arrays || options.defaults) {
                object.artifacts = [];
                object.otherRewards = [];
            }
            if (options.defaults) {
                object.success = false;
                object.info = null;
                object.eiUserId = "";
            }
            if (message.success != null && message.hasOwnProperty("success"))
                object.success = message.success;
            if (message.info != null && message.hasOwnProperty("info"))
                object.info = $root.ei.MissionInfo.toObject(message.info, options);
            if (message.artifacts && message.artifacts.length) {
                object.artifacts = [];
                for (let j = 0; j < message.artifacts.length; ++j)
                    object.artifacts[j] = $root.ei.CompleteMissionResponse.SecureArtifactSpec.toObject(message.artifacts[j], options);
            }
            if (message.otherRewards && message.otherRewards.length) {
                object.otherRewards = [];
                for (let j = 0; j < message.otherRewards.length; ++j)
                    object.otherRewards[j] = $root.ei.Reward.toObject(message.otherRewards[j], options);
            }
            if (message.eiUserId != null && message.hasOwnProperty("eiUserId"))
                object.eiUserId = message.eiUserId;
            return object;
        };

        /**
         * Converts this CompleteMissionResponse to JSON.
         * @function toJSON
         * @memberof ei.CompleteMissionResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CompleteMissionResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        CompleteMissionResponse.SecureArtifactSpec = (function() {

            /**
             * Properties of a SecureArtifactSpec.
             * @memberof ei.CompleteMissionResponse
             * @interface ISecureArtifactSpec
             * @property {ei.IArtifactSpec|null} [spec] SecureArtifactSpec spec
             * @property {string|null} [serverId] SecureArtifactSpec serverId
             */

            /**
             * Constructs a new SecureArtifactSpec.
             * @memberof ei.CompleteMissionResponse
             * @classdesc Represents a SecureArtifactSpec.
             * @implements ISecureArtifactSpec
             * @constructor
             * @param {ei.CompleteMissionResponse.ISecureArtifactSpec=} [properties] Properties to set
             */
            function SecureArtifactSpec(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * SecureArtifactSpec spec.
             * @member {ei.IArtifactSpec|null|undefined} spec
             * @memberof ei.CompleteMissionResponse.SecureArtifactSpec
             * @instance
             */
            SecureArtifactSpec.prototype.spec = null;

            /**
             * SecureArtifactSpec serverId.
             * @member {string} serverId
             * @memberof ei.CompleteMissionResponse.SecureArtifactSpec
             * @instance
             */
            SecureArtifactSpec.prototype.serverId = "";

            /**
             * Creates a new SecureArtifactSpec instance using the specified properties.
             * @function create
             * @memberof ei.CompleteMissionResponse.SecureArtifactSpec
             * @static
             * @param {ei.CompleteMissionResponse.ISecureArtifactSpec=} [properties] Properties to set
             * @returns {ei.CompleteMissionResponse.SecureArtifactSpec} SecureArtifactSpec instance
             */
            SecureArtifactSpec.create = function create(properties) {
                return new SecureArtifactSpec(properties);
            };

            /**
             * Encodes the specified SecureArtifactSpec message. Does not implicitly {@link ei.CompleteMissionResponse.SecureArtifactSpec.verify|verify} messages.
             * @function encode
             * @memberof ei.CompleteMissionResponse.SecureArtifactSpec
             * @static
             * @param {ei.CompleteMissionResponse.ISecureArtifactSpec} message SecureArtifactSpec message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SecureArtifactSpec.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.spec != null && Object.hasOwnProperty.call(message, "spec"))
                    $root.ei.ArtifactSpec.encode(message.spec, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.serverId != null && Object.hasOwnProperty.call(message, "serverId"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.serverId);
                return writer;
            };

            /**
             * Encodes the specified SecureArtifactSpec message, length delimited. Does not implicitly {@link ei.CompleteMissionResponse.SecureArtifactSpec.verify|verify} messages.
             * @function encodeDelimited
             * @memberof ei.CompleteMissionResponse.SecureArtifactSpec
             * @static
             * @param {ei.CompleteMissionResponse.ISecureArtifactSpec} message SecureArtifactSpec message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SecureArtifactSpec.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a SecureArtifactSpec message from the specified reader or buffer.
             * @function decode
             * @memberof ei.CompleteMissionResponse.SecureArtifactSpec
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {ei.CompleteMissionResponse.SecureArtifactSpec} SecureArtifactSpec
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SecureArtifactSpec.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ei.CompleteMissionResponse.SecureArtifactSpec();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.spec = $root.ei.ArtifactSpec.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.serverId = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a SecureArtifactSpec message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof ei.CompleteMissionResponse.SecureArtifactSpec
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {ei.CompleteMissionResponse.SecureArtifactSpec} SecureArtifactSpec
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SecureArtifactSpec.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a SecureArtifactSpec message.
             * @function verify
             * @memberof ei.CompleteMissionResponse.SecureArtifactSpec
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            SecureArtifactSpec.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.spec != null && message.hasOwnProperty("spec")) {
                    let error = $root.ei.ArtifactSpec.verify(message.spec);
                    if (error)
                        return "spec." + error;
                }
                if (message.serverId != null && message.hasOwnProperty("serverId"))
                    if (!$util.isString(message.serverId))
                        return "serverId: string expected";
                return null;
            };

            /**
             * Creates a SecureArtifactSpec message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof ei.CompleteMissionResponse.SecureArtifactSpec
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {ei.CompleteMissionResponse.SecureArtifactSpec} SecureArtifactSpec
             */
            SecureArtifactSpec.fromObject = function fromObject(object) {
                if (object instanceof $root.ei.CompleteMissionResponse.SecureArtifactSpec)
                    return object;
                let message = new $root.ei.CompleteMissionResponse.SecureArtifactSpec();
                if (object.spec != null) {
                    if (typeof object.spec !== "object")
                        throw TypeError(".ei.CompleteMissionResponse.SecureArtifactSpec.spec: object expected");
                    message.spec = $root.ei.ArtifactSpec.fromObject(object.spec);
                }
                if (object.serverId != null)
                    message.serverId = String(object.serverId);
                return message;
            };

            /**
             * Creates a plain object from a SecureArtifactSpec message. Also converts values to other types if specified.
             * @function toObject
             * @memberof ei.CompleteMissionResponse.SecureArtifactSpec
             * @static
             * @param {ei.CompleteMissionResponse.SecureArtifactSpec} message SecureArtifactSpec
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            SecureArtifactSpec.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.spec = null;
                    object.serverId = "";
                }
                if (message.spec != null && message.hasOwnProperty("spec"))
                    object.spec = $root.ei.ArtifactSpec.toObject(message.spec, options);
                if (message.serverId != null && message.hasOwnProperty("serverId"))
                    object.serverId = message.serverId;
                return object;
            };

            /**
             * Converts this SecureArtifactSpec to JSON.
             * @function toJSON
             * @memberof ei.CompleteMissionResponse.SecureArtifactSpec
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            SecureArtifactSpec.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return SecureArtifactSpec;
        })();

        return CompleteMissionResponse;
    })();

    ei.CraftArtifactRequest = (function() {

        /**
         * Properties of a CraftArtifactRequest.
         * @memberof ei
         * @interface ICraftArtifactRequest
         * @property {ei.IBasicRequestInfo|null} [rinfo] CraftArtifactRequest rinfo
         * @property {string|null} [eiUserId] CraftArtifactRequest eiUserId
         * @property {ei.IArtifactSpec|null} [spec] CraftArtifactRequest spec
         * @property {number|Long|null} [itemId] CraftArtifactRequest itemId
         * @property {number|null} [goldPricePaid] CraftArtifactRequest goldPricePaid
         * @property {Array.<ei.IArtifactInventoryItem>|null} [ingredients] CraftArtifactRequest ingredients
         */

        /**
         * Constructs a new CraftArtifactRequest.
         * @memberof ei
         * @classdesc Represents a CraftArtifactRequest.
         * @implements ICraftArtifactRequest
         * @constructor
         * @param {ei.ICraftArtifactRequest=} [properties] Properties to set
         */
        function CraftArtifactRequest(properties) {
            this.ingredients = [];
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CraftArtifactRequest rinfo.
         * @member {ei.IBasicRequestInfo|null|undefined} rinfo
         * @memberof ei.CraftArtifactRequest
         * @instance
         */
        CraftArtifactRequest.prototype.rinfo = null;

        /**
         * CraftArtifactRequest eiUserId.
         * @member {string} eiUserId
         * @memberof ei.CraftArtifactRequest
         * @instance
         */
        CraftArtifactRequest.prototype.eiUserId = "";

        /**
         * CraftArtifactRequest spec.
         * @member {ei.IArtifactSpec|null|undefined} spec
         * @memberof ei.CraftArtifactRequest
         * @instance
         */
        CraftArtifactRequest.prototype.spec = null;

        /**
         * CraftArtifactRequest itemId.
         * @member {number|Long} itemId
         * @memberof ei.CraftArtifactRequest
         * @instance
         */
        CraftArtifactRequest.prototype.itemId = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * CraftArtifactRequest goldPricePaid.
         * @member {number} goldPricePaid
         * @memberof ei.CraftArtifactRequest
         * @instance
         */
        CraftArtifactRequest.prototype.goldPricePaid = 0;

        /**
         * CraftArtifactRequest ingredients.
         * @member {Array.<ei.IArtifactInventoryItem>} ingredients
         * @memberof ei.CraftArtifactRequest
         * @instance
         */
        CraftArtifactRequest.prototype.ingredients = $util.emptyArray;

        /**
         * Creates a new CraftArtifactRequest instance using the specified properties.
         * @function create
         * @memberof ei.CraftArtifactRequest
         * @static
         * @param {ei.ICraftArtifactRequest=} [properties] Properties to set
         * @returns {ei.CraftArtifactRequest} CraftArtifactRequest instance
         */
        CraftArtifactRequest.create = function create(properties) {
            return new CraftArtifactRequest(properties);
        };

        /**
         * Encodes the specified CraftArtifactRequest message. Does not implicitly {@link ei.CraftArtifactRequest.verify|verify} messages.
         * @function encode
         * @memberof ei.CraftArtifactRequest
         * @static
         * @param {ei.ICraftArtifactRequest} message CraftArtifactRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CraftArtifactRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.eiUserId != null && Object.hasOwnProperty.call(message, "eiUserId"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.eiUserId);
            if (message.spec != null && Object.hasOwnProperty.call(message, "spec"))
                $root.ei.ArtifactSpec.encode(message.spec, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.itemId != null && Object.hasOwnProperty.call(message, "itemId"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.itemId);
            if (message.ingredients != null && message.ingredients.length)
                for (let i = 0; i < message.ingredients.length; ++i)
                    $root.ei.ArtifactInventoryItem.encode(message.ingredients[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            if (message.rinfo != null && Object.hasOwnProperty.call(message, "rinfo"))
                $root.ei.BasicRequestInfo.encode(message.rinfo, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
            if (message.goldPricePaid != null && Object.hasOwnProperty.call(message, "goldPricePaid"))
                writer.uint32(/* id 6, wireType 1 =*/49).double(message.goldPricePaid);
            return writer;
        };

        /**
         * Encodes the specified CraftArtifactRequest message, length delimited. Does not implicitly {@link ei.CraftArtifactRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ei.CraftArtifactRequest
         * @static
         * @param {ei.ICraftArtifactRequest} message CraftArtifactRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CraftArtifactRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CraftArtifactRequest message from the specified reader or buffer.
         * @function decode
         * @memberof ei.CraftArtifactRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ei.CraftArtifactRequest} CraftArtifactRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CraftArtifactRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ei.CraftArtifactRequest();
            while (reader.pos < end) {
                let tag = reader.uint32();
                switch (tag >>> 3) {
                case 5:
                    message.rinfo = $root.ei.BasicRequestInfo.decode(reader, reader.uint32());
                    break;
                case 1:
                    message.eiUserId = reader.string();
                    break;
                case 2:
                    message.spec = $root.ei.ArtifactSpec.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.itemId = reader.uint64();
                    break;
                case 6:
                    message.goldPricePaid = reader.double();
                    break;
                case 4:
                    if (!(message.ingredients && message.ingredients.length))
                        message.ingredients = [];
                    message.ingredients.push($root.ei.ArtifactInventoryItem.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a CraftArtifactRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ei.CraftArtifactRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ei.CraftArtifactRequest} CraftArtifactRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CraftArtifactRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CraftArtifactRequest message.
         * @function verify
         * @memberof ei.CraftArtifactRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CraftArtifactRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.rinfo != null && message.hasOwnProperty("rinfo")) {
                let error = $root.ei.BasicRequestInfo.verify(message.rinfo);
                if (error)
                    return "rinfo." + error;
            }
            if (message.eiUserId != null && message.hasOwnProperty("eiUserId"))
                if (!$util.isString(message.eiUserId))
                    return "eiUserId: string expected";
            if (message.spec != null && message.hasOwnProperty("spec")) {
                let error = $root.ei.ArtifactSpec.verify(message.spec);
                if (error)
                    return "spec." + error;
            }
            if (message.itemId != null && message.hasOwnProperty("itemId"))
                if (!$util.isInteger(message.itemId) && !(message.itemId && $util.isInteger(message.itemId.low) && $util.isInteger(message.itemId.high)))
                    return "itemId: integer|Long expected";
            if (message.goldPricePaid != null && message.hasOwnProperty("goldPricePaid"))
                if (typeof message.goldPricePaid !== "number")
                    return "goldPricePaid: number expected";
            if (message.ingredients != null && message.hasOwnProperty("ingredients")) {
                if (!Array.isArray(message.ingredients))
                    return "ingredients: array expected";
                for (let i = 0; i < message.ingredients.length; ++i) {
                    let error = $root.ei.ArtifactInventoryItem.verify(message.ingredients[i]);
                    if (error)
                        return "ingredients." + error;
                }
            }
            return null;
        };

        /**
         * Creates a CraftArtifactRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ei.CraftArtifactRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ei.CraftArtifactRequest} CraftArtifactRequest
         */
        CraftArtifactRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.ei.CraftArtifactRequest)
                return object;
            let message = new $root.ei.CraftArtifactRequest();
            if (object.rinfo != null) {
                if (typeof object.rinfo !== "object")
                    throw TypeError(".ei.CraftArtifactRequest.rinfo: object expected");
                message.rinfo = $root.ei.BasicRequestInfo.fromObject(object.rinfo);
            }
            if (object.eiUserId != null)
                message.eiUserId = String(object.eiUserId);
            if (object.spec != null) {
                if (typeof object.spec !== "object")
                    throw TypeError(".ei.CraftArtifactRequest.spec: object expected");
                message.spec = $root.ei.ArtifactSpec.fromObject(object.spec);
            }
            if (object.itemId != null)
                if ($util.Long)
                    (message.itemId = $util.Long.fromValue(object.itemId)).unsigned = true;
                else if (typeof object.itemId === "string")
                    message.itemId = parseInt(object.itemId, 10);
                else if (typeof object.itemId === "number")
                    message.itemId = object.itemId;
                else if (typeof object.itemId === "object")
                    message.itemId = new $util.LongBits(object.itemId.low >>> 0, object.itemId.high >>> 0).toNumber(true);
            if (object.goldPricePaid != null)
                message.goldPricePaid = Number(object.goldPricePaid);
            if (object.ingredients) {
                if (!Array.isArray(object.ingredients))
                    throw TypeError(".ei.CraftArtifactRequest.ingredients: array expected");
                message.ingredients = [];
                for (let i = 0; i < object.ingredients.length; ++i) {
                    if (typeof object.ingredients[i] !== "object")
                        throw TypeError(".ei.CraftArtifactRequest.ingredients: object expected");
                    message.ingredients[i] = $root.ei.ArtifactInventoryItem.fromObject(object.ingredients[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a CraftArtifactRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ei.CraftArtifactRequest
         * @static
         * @param {ei.CraftArtifactRequest} message CraftArtifactRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CraftArtifactRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.arrays || options.defaults)
                object.ingredients = [];
            if (options.defaults) {
                object.eiUserId = "";
                object.spec = null;
                if ($util.Long) {
                    let long = new $util.Long(0, 0, true);
                    object.itemId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.itemId = options.longs === String ? "0" : 0;
                object.rinfo = null;
                object.goldPricePaid = 0;
            }
            if (message.eiUserId != null && message.hasOwnProperty("eiUserId"))
                object.eiUserId = message.eiUserId;
            if (message.spec != null && message.hasOwnProperty("spec"))
                object.spec = $root.ei.ArtifactSpec.toObject(message.spec, options);
            if (message.itemId != null && message.hasOwnProperty("itemId"))
                if (typeof message.itemId === "number")
                    object.itemId = options.longs === String ? String(message.itemId) : message.itemId;
                else
                    object.itemId = options.longs === String ? $util.Long.prototype.toString.call(message.itemId) : options.longs === Number ? new $util.LongBits(message.itemId.low >>> 0, message.itemId.high >>> 0).toNumber(true) : message.itemId;
            if (message.ingredients && message.ingredients.length) {
                object.ingredients = [];
                for (let j = 0; j < message.ingredients.length; ++j)
                    object.ingredients[j] = $root.ei.ArtifactInventoryItem.toObject(message.ingredients[j], options);
            }
            if (message.rinfo != null && message.hasOwnProperty("rinfo"))
                object.rinfo = $root.ei.BasicRequestInfo.toObject(message.rinfo, options);
            if (message.goldPricePaid != null && message.hasOwnProperty("goldPricePaid"))
                object.goldPricePaid = options.json && !isFinite(message.goldPricePaid) ? String(message.goldPricePaid) : message.goldPricePaid;
            return object;
        };

        /**
         * Converts this CraftArtifactRequest to JSON.
         * @function toJSON
         * @memberof ei.CraftArtifactRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CraftArtifactRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CraftArtifactRequest;
    })();

    ei.CraftArtifactResponse = (function() {

        /**
         * Properties of a CraftArtifactResponse.
         * @memberof ei
         * @interface ICraftArtifactResponse
         * @property {number|Long|null} [itemId] CraftArtifactResponse itemId
         * @property {string|null} [eiUserId] CraftArtifactResponse eiUserId
         * @property {ei.ArtifactSpec.Rarity|null} [rarityAchieved] CraftArtifactResponse rarityAchieved
         * @property {string|null} [serverId] CraftArtifactResponse serverId
         */

        /**
         * Constructs a new CraftArtifactResponse.
         * @memberof ei
         * @classdesc Represents a CraftArtifactResponse.
         * @implements ICraftArtifactResponse
         * @constructor
         * @param {ei.ICraftArtifactResponse=} [properties] Properties to set
         */
        function CraftArtifactResponse(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CraftArtifactResponse itemId.
         * @member {number|Long} itemId
         * @memberof ei.CraftArtifactResponse
         * @instance
         */
        CraftArtifactResponse.prototype.itemId = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * CraftArtifactResponse eiUserId.
         * @member {string} eiUserId
         * @memberof ei.CraftArtifactResponse
         * @instance
         */
        CraftArtifactResponse.prototype.eiUserId = "";

        /**
         * CraftArtifactResponse rarityAchieved.
         * @member {ei.ArtifactSpec.Rarity} rarityAchieved
         * @memberof ei.CraftArtifactResponse
         * @instance
         */
        CraftArtifactResponse.prototype.rarityAchieved = 0;

        /**
         * CraftArtifactResponse serverId.
         * @member {string} serverId
         * @memberof ei.CraftArtifactResponse
         * @instance
         */
        CraftArtifactResponse.prototype.serverId = "";

        /**
         * Creates a new CraftArtifactResponse instance using the specified properties.
         * @function create
         * @memberof ei.CraftArtifactResponse
         * @static
         * @param {ei.ICraftArtifactResponse=} [properties] Properties to set
         * @returns {ei.CraftArtifactResponse} CraftArtifactResponse instance
         */
        CraftArtifactResponse.create = function create(properties) {
            return new CraftArtifactResponse(properties);
        };

        /**
         * Encodes the specified CraftArtifactResponse message. Does not implicitly {@link ei.CraftArtifactResponse.verify|verify} messages.
         * @function encode
         * @memberof ei.CraftArtifactResponse
         * @static
         * @param {ei.ICraftArtifactResponse} message CraftArtifactResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CraftArtifactResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.itemId != null && Object.hasOwnProperty.call(message, "itemId"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.itemId);
            if (message.rarityAchieved != null && Object.hasOwnProperty.call(message, "rarityAchieved"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.rarityAchieved);
            if (message.serverId != null && Object.hasOwnProperty.call(message, "serverId"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.serverId);
            if (message.eiUserId != null && Object.hasOwnProperty.call(message, "eiUserId"))
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.eiUserId);
            return writer;
        };

        /**
         * Encodes the specified CraftArtifactResponse message, length delimited. Does not implicitly {@link ei.CraftArtifactResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ei.CraftArtifactResponse
         * @static
         * @param {ei.ICraftArtifactResponse} message CraftArtifactResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CraftArtifactResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CraftArtifactResponse message from the specified reader or buffer.
         * @function decode
         * @memberof ei.CraftArtifactResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ei.CraftArtifactResponse} CraftArtifactResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CraftArtifactResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ei.CraftArtifactResponse();
            while (reader.pos < end) {
                let tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.itemId = reader.uint64();
                    break;
                case 5:
                    message.eiUserId = reader.string();
                    break;
                case 2:
                    message.rarityAchieved = reader.int32();
                    break;
                case 3:
                    message.serverId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a CraftArtifactResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ei.CraftArtifactResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ei.CraftArtifactResponse} CraftArtifactResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CraftArtifactResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CraftArtifactResponse message.
         * @function verify
         * @memberof ei.CraftArtifactResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CraftArtifactResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.itemId != null && message.hasOwnProperty("itemId"))
                if (!$util.isInteger(message.itemId) && !(message.itemId && $util.isInteger(message.itemId.low) && $util.isInteger(message.itemId.high)))
                    return "itemId: integer|Long expected";
            if (message.eiUserId != null && message.hasOwnProperty("eiUserId"))
                if (!$util.isString(message.eiUserId))
                    return "eiUserId: string expected";
            if (message.rarityAchieved != null && message.hasOwnProperty("rarityAchieved"))
                switch (message.rarityAchieved) {
                default:
                    return "rarityAchieved: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                    break;
                }
            if (message.serverId != null && message.hasOwnProperty("serverId"))
                if (!$util.isString(message.serverId))
                    return "serverId: string expected";
            return null;
        };

        /**
         * Creates a CraftArtifactResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ei.CraftArtifactResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ei.CraftArtifactResponse} CraftArtifactResponse
         */
        CraftArtifactResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.ei.CraftArtifactResponse)
                return object;
            let message = new $root.ei.CraftArtifactResponse();
            if (object.itemId != null)
                if ($util.Long)
                    (message.itemId = $util.Long.fromValue(object.itemId)).unsigned = true;
                else if (typeof object.itemId === "string")
                    message.itemId = parseInt(object.itemId, 10);
                else if (typeof object.itemId === "number")
                    message.itemId = object.itemId;
                else if (typeof object.itemId === "object")
                    message.itemId = new $util.LongBits(object.itemId.low >>> 0, object.itemId.high >>> 0).toNumber(true);
            if (object.eiUserId != null)
                message.eiUserId = String(object.eiUserId);
            switch (object.rarityAchieved) {
            case "COMMON":
            case 0:
                message.rarityAchieved = 0;
                break;
            case "RARE":
            case 1:
                message.rarityAchieved = 1;
                break;
            case "EPIC":
            case 2:
                message.rarityAchieved = 2;
                break;
            case "LEGENDARY":
            case 3:
                message.rarityAchieved = 3;
                break;
            }
            if (object.serverId != null)
                message.serverId = String(object.serverId);
            return message;
        };

        /**
         * Creates a plain object from a CraftArtifactResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ei.CraftArtifactResponse
         * @static
         * @param {ei.CraftArtifactResponse} message CraftArtifactResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CraftArtifactResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.defaults) {
                if ($util.Long) {
                    let long = new $util.Long(0, 0, true);
                    object.itemId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.itemId = options.longs === String ? "0" : 0;
                object.rarityAchieved = options.enums === String ? "COMMON" : 0;
                object.serverId = "";
                object.eiUserId = "";
            }
            if (message.itemId != null && message.hasOwnProperty("itemId"))
                if (typeof message.itemId === "number")
                    object.itemId = options.longs === String ? String(message.itemId) : message.itemId;
                else
                    object.itemId = options.longs === String ? $util.Long.prototype.toString.call(message.itemId) : options.longs === Number ? new $util.LongBits(message.itemId.low >>> 0, message.itemId.high >>> 0).toNumber(true) : message.itemId;
            if (message.rarityAchieved != null && message.hasOwnProperty("rarityAchieved"))
                object.rarityAchieved = options.enums === String ? $root.ei.ArtifactSpec.Rarity[message.rarityAchieved] : message.rarityAchieved;
            if (message.serverId != null && message.hasOwnProperty("serverId"))
                object.serverId = message.serverId;
            if (message.eiUserId != null && message.hasOwnProperty("eiUserId"))
                object.eiUserId = message.eiUserId;
            return object;
        };

        /**
         * Converts this CraftArtifactResponse to JSON.
         * @function toJSON
         * @memberof ei.CraftArtifactResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CraftArtifactResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CraftArtifactResponse;
    })();

    ei.ConsumeArtifactRequest = (function() {

        /**
         * Properties of a ConsumeArtifactRequest.
         * @memberof ei
         * @interface IConsumeArtifactRequest
         * @property {ei.IBasicRequestInfo|null} [rinfo] ConsumeArtifactRequest rinfo
         * @property {string|null} [eiUserId] ConsumeArtifactRequest eiUserId
         * @property {ei.IArtifactSpec|null} [spec] ConsumeArtifactRequest spec
         * @property {number|Long|null} [originalItemId] ConsumeArtifactRequest originalItemId
         */

        /**
         * Constructs a new ConsumeArtifactRequest.
         * @memberof ei
         * @classdesc Represents a ConsumeArtifactRequest.
         * @implements IConsumeArtifactRequest
         * @constructor
         * @param {ei.IConsumeArtifactRequest=} [properties] Properties to set
         */
        function ConsumeArtifactRequest(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ConsumeArtifactRequest rinfo.
         * @member {ei.IBasicRequestInfo|null|undefined} rinfo
         * @memberof ei.ConsumeArtifactRequest
         * @instance
         */
        ConsumeArtifactRequest.prototype.rinfo = null;

        /**
         * ConsumeArtifactRequest eiUserId.
         * @member {string} eiUserId
         * @memberof ei.ConsumeArtifactRequest
         * @instance
         */
        ConsumeArtifactRequest.prototype.eiUserId = "";

        /**
         * ConsumeArtifactRequest spec.
         * @member {ei.IArtifactSpec|null|undefined} spec
         * @memberof ei.ConsumeArtifactRequest
         * @instance
         */
        ConsumeArtifactRequest.prototype.spec = null;

        /**
         * ConsumeArtifactRequest originalItemId.
         * @member {number|Long} originalItemId
         * @memberof ei.ConsumeArtifactRequest
         * @instance
         */
        ConsumeArtifactRequest.prototype.originalItemId = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new ConsumeArtifactRequest instance using the specified properties.
         * @function create
         * @memberof ei.ConsumeArtifactRequest
         * @static
         * @param {ei.IConsumeArtifactRequest=} [properties] Properties to set
         * @returns {ei.ConsumeArtifactRequest} ConsumeArtifactRequest instance
         */
        ConsumeArtifactRequest.create = function create(properties) {
            return new ConsumeArtifactRequest(properties);
        };

        /**
         * Encodes the specified ConsumeArtifactRequest message. Does not implicitly {@link ei.ConsumeArtifactRequest.verify|verify} messages.
         * @function encode
         * @memberof ei.ConsumeArtifactRequest
         * @static
         * @param {ei.IConsumeArtifactRequest} message ConsumeArtifactRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ConsumeArtifactRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.spec != null && Object.hasOwnProperty.call(message, "spec"))
                $root.ei.ArtifactSpec.encode(message.spec, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.originalItemId != null && Object.hasOwnProperty.call(message, "originalItemId"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.originalItemId);
            if (message.eiUserId != null && Object.hasOwnProperty.call(message, "eiUserId"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.eiUserId);
            if (message.rinfo != null && Object.hasOwnProperty.call(message, "rinfo"))
                $root.ei.BasicRequestInfo.encode(message.rinfo, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ConsumeArtifactRequest message, length delimited. Does not implicitly {@link ei.ConsumeArtifactRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ei.ConsumeArtifactRequest
         * @static
         * @param {ei.IConsumeArtifactRequest} message ConsumeArtifactRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ConsumeArtifactRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ConsumeArtifactRequest message from the specified reader or buffer.
         * @function decode
         * @memberof ei.ConsumeArtifactRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ei.ConsumeArtifactRequest} ConsumeArtifactRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ConsumeArtifactRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ei.ConsumeArtifactRequest();
            while (reader.pos < end) {
                let tag = reader.uint32();
                switch (tag >>> 3) {
                case 4:
                    message.rinfo = $root.ei.BasicRequestInfo.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.eiUserId = reader.string();
                    break;
                case 1:
                    message.spec = $root.ei.ArtifactSpec.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.originalItemId = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ConsumeArtifactRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ei.ConsumeArtifactRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ei.ConsumeArtifactRequest} ConsumeArtifactRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ConsumeArtifactRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ConsumeArtifactRequest message.
         * @function verify
         * @memberof ei.ConsumeArtifactRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ConsumeArtifactRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.rinfo != null && message.hasOwnProperty("rinfo")) {
                let error = $root.ei.BasicRequestInfo.verify(message.rinfo);
                if (error)
                    return "rinfo." + error;
            }
            if (message.eiUserId != null && message.hasOwnProperty("eiUserId"))
                if (!$util.isString(message.eiUserId))
                    return "eiUserId: string expected";
            if (message.spec != null && message.hasOwnProperty("spec")) {
                let error = $root.ei.ArtifactSpec.verify(message.spec);
                if (error)
                    return "spec." + error;
            }
            if (message.originalItemId != null && message.hasOwnProperty("originalItemId"))
                if (!$util.isInteger(message.originalItemId) && !(message.originalItemId && $util.isInteger(message.originalItemId.low) && $util.isInteger(message.originalItemId.high)))
                    return "originalItemId: integer|Long expected";
            return null;
        };

        /**
         * Creates a ConsumeArtifactRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ei.ConsumeArtifactRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ei.ConsumeArtifactRequest} ConsumeArtifactRequest
         */
        ConsumeArtifactRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.ei.ConsumeArtifactRequest)
                return object;
            let message = new $root.ei.ConsumeArtifactRequest();
            if (object.rinfo != null) {
                if (typeof object.rinfo !== "object")
                    throw TypeError(".ei.ConsumeArtifactRequest.rinfo: object expected");
                message.rinfo = $root.ei.BasicRequestInfo.fromObject(object.rinfo);
            }
            if (object.eiUserId != null)
                message.eiUserId = String(object.eiUserId);
            if (object.spec != null) {
                if (typeof object.spec !== "object")
                    throw TypeError(".ei.ConsumeArtifactRequest.spec: object expected");
                message.spec = $root.ei.ArtifactSpec.fromObject(object.spec);
            }
            if (object.originalItemId != null)
                if ($util.Long)
                    (message.originalItemId = $util.Long.fromValue(object.originalItemId)).unsigned = true;
                else if (typeof object.originalItemId === "string")
                    message.originalItemId = parseInt(object.originalItemId, 10);
                else if (typeof object.originalItemId === "number")
                    message.originalItemId = object.originalItemId;
                else if (typeof object.originalItemId === "object")
                    message.originalItemId = new $util.LongBits(object.originalItemId.low >>> 0, object.originalItemId.high >>> 0).toNumber(true);
            return message;
        };

        /**
         * Creates a plain object from a ConsumeArtifactRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ei.ConsumeArtifactRequest
         * @static
         * @param {ei.ConsumeArtifactRequest} message ConsumeArtifactRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ConsumeArtifactRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.defaults) {
                object.spec = null;
                if ($util.Long) {
                    let long = new $util.Long(0, 0, true);
                    object.originalItemId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.originalItemId = options.longs === String ? "0" : 0;
                object.eiUserId = "";
                object.rinfo = null;
            }
            if (message.spec != null && message.hasOwnProperty("spec"))
                object.spec = $root.ei.ArtifactSpec.toObject(message.spec, options);
            if (message.originalItemId != null && message.hasOwnProperty("originalItemId"))
                if (typeof message.originalItemId === "number")
                    object.originalItemId = options.longs === String ? String(message.originalItemId) : message.originalItemId;
                else
                    object.originalItemId = options.longs === String ? $util.Long.prototype.toString.call(message.originalItemId) : options.longs === Number ? new $util.LongBits(message.originalItemId.low >>> 0, message.originalItemId.high >>> 0).toNumber(true) : message.originalItemId;
            if (message.eiUserId != null && message.hasOwnProperty("eiUserId"))
                object.eiUserId = message.eiUserId;
            if (message.rinfo != null && message.hasOwnProperty("rinfo"))
                object.rinfo = $root.ei.BasicRequestInfo.toObject(message.rinfo, options);
            return object;
        };

        /**
         * Converts this ConsumeArtifactRequest to JSON.
         * @function toJSON
         * @memberof ei.ConsumeArtifactRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ConsumeArtifactRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ConsumeArtifactRequest;
    })();

    ei.ConsumeArtifactResponse = (function() {

        /**
         * Properties of a ConsumeArtifactResponse.
         * @memberof ei
         * @interface IConsumeArtifactResponse
         * @property {boolean|null} [success] ConsumeArtifactResponse success
         * @property {number|Long|null} [originalItemId] ConsumeArtifactResponse originalItemId
         * @property {Array.<ei.IArtifactSpec>|null} [byproducts] ConsumeArtifactResponse byproducts
         * @property {Array.<ei.IReward>|null} [otherRewards] ConsumeArtifactResponse otherRewards
         * @property {string|null} [eiUserId] ConsumeArtifactResponse eiUserId
         */

        /**
         * Constructs a new ConsumeArtifactResponse.
         * @memberof ei
         * @classdesc Represents a ConsumeArtifactResponse.
         * @implements IConsumeArtifactResponse
         * @constructor
         * @param {ei.IConsumeArtifactResponse=} [properties] Properties to set
         */
        function ConsumeArtifactResponse(properties) {
            this.byproducts = [];
            this.otherRewards = [];
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ConsumeArtifactResponse success.
         * @member {boolean} success
         * @memberof ei.ConsumeArtifactResponse
         * @instance
         */
        ConsumeArtifactResponse.prototype.success = false;

        /**
         * ConsumeArtifactResponse originalItemId.
         * @member {number|Long} originalItemId
         * @memberof ei.ConsumeArtifactResponse
         * @instance
         */
        ConsumeArtifactResponse.prototype.originalItemId = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * ConsumeArtifactResponse byproducts.
         * @member {Array.<ei.IArtifactSpec>} byproducts
         * @memberof ei.ConsumeArtifactResponse
         * @instance
         */
        ConsumeArtifactResponse.prototype.byproducts = $util.emptyArray;

        /**
         * ConsumeArtifactResponse otherRewards.
         * @member {Array.<ei.IReward>} otherRewards
         * @memberof ei.ConsumeArtifactResponse
         * @instance
         */
        ConsumeArtifactResponse.prototype.otherRewards = $util.emptyArray;

        /**
         * ConsumeArtifactResponse eiUserId.
         * @member {string} eiUserId
         * @memberof ei.ConsumeArtifactResponse
         * @instance
         */
        ConsumeArtifactResponse.prototype.eiUserId = "";

        /**
         * Creates a new ConsumeArtifactResponse instance using the specified properties.
         * @function create
         * @memberof ei.ConsumeArtifactResponse
         * @static
         * @param {ei.IConsumeArtifactResponse=} [properties] Properties to set
         * @returns {ei.ConsumeArtifactResponse} ConsumeArtifactResponse instance
         */
        ConsumeArtifactResponse.create = function create(properties) {
            return new ConsumeArtifactResponse(properties);
        };

        /**
         * Encodes the specified ConsumeArtifactResponse message. Does not implicitly {@link ei.ConsumeArtifactResponse.verify|verify} messages.
         * @function encode
         * @memberof ei.ConsumeArtifactResponse
         * @static
         * @param {ei.IConsumeArtifactResponse} message ConsumeArtifactResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ConsumeArtifactResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.success != null && Object.hasOwnProperty.call(message, "success"))
                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.success);
            if (message.originalItemId != null && Object.hasOwnProperty.call(message, "originalItemId"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.originalItemId);
            if (message.byproducts != null && message.byproducts.length)
                for (let i = 0; i < message.byproducts.length; ++i)
                    $root.ei.ArtifactSpec.encode(message.byproducts[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.otherRewards != null && message.otherRewards.length)
                for (let i = 0; i < message.otherRewards.length; ++i)
                    $root.ei.Reward.encode(message.otherRewards[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            if (message.eiUserId != null && Object.hasOwnProperty.call(message, "eiUserId"))
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.eiUserId);
            return writer;
        };

        /**
         * Encodes the specified ConsumeArtifactResponse message, length delimited. Does not implicitly {@link ei.ConsumeArtifactResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ei.ConsumeArtifactResponse
         * @static
         * @param {ei.IConsumeArtifactResponse} message ConsumeArtifactResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ConsumeArtifactResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ConsumeArtifactResponse message from the specified reader or buffer.
         * @function decode
         * @memberof ei.ConsumeArtifactResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ei.ConsumeArtifactResponse} ConsumeArtifactResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ConsumeArtifactResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ei.ConsumeArtifactResponse();
            while (reader.pos < end) {
                let tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.success = reader.bool();
                    break;
                case 2:
                    message.originalItemId = reader.uint64();
                    break;
                case 3:
                    if (!(message.byproducts && message.byproducts.length))
                        message.byproducts = [];
                    message.byproducts.push($root.ei.ArtifactSpec.decode(reader, reader.uint32()));
                    break;
                case 4:
                    if (!(message.otherRewards && message.otherRewards.length))
                        message.otherRewards = [];
                    message.otherRewards.push($root.ei.Reward.decode(reader, reader.uint32()));
                    break;
                case 5:
                    message.eiUserId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ConsumeArtifactResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ei.ConsumeArtifactResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ei.ConsumeArtifactResponse} ConsumeArtifactResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ConsumeArtifactResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ConsumeArtifactResponse message.
         * @function verify
         * @memberof ei.ConsumeArtifactResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ConsumeArtifactResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.success != null && message.hasOwnProperty("success"))
                if (typeof message.success !== "boolean")
                    return "success: boolean expected";
            if (message.originalItemId != null && message.hasOwnProperty("originalItemId"))
                if (!$util.isInteger(message.originalItemId) && !(message.originalItemId && $util.isInteger(message.originalItemId.low) && $util.isInteger(message.originalItemId.high)))
                    return "originalItemId: integer|Long expected";
            if (message.byproducts != null && message.hasOwnProperty("byproducts")) {
                if (!Array.isArray(message.byproducts))
                    return "byproducts: array expected";
                for (let i = 0; i < message.byproducts.length; ++i) {
                    let error = $root.ei.ArtifactSpec.verify(message.byproducts[i]);
                    if (error)
                        return "byproducts." + error;
                }
            }
            if (message.otherRewards != null && message.hasOwnProperty("otherRewards")) {
                if (!Array.isArray(message.otherRewards))
                    return "otherRewards: array expected";
                for (let i = 0; i < message.otherRewards.length; ++i) {
                    let error = $root.ei.Reward.verify(message.otherRewards[i]);
                    if (error)
                        return "otherRewards." + error;
                }
            }
            if (message.eiUserId != null && message.hasOwnProperty("eiUserId"))
                if (!$util.isString(message.eiUserId))
                    return "eiUserId: string expected";
            return null;
        };

        /**
         * Creates a ConsumeArtifactResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ei.ConsumeArtifactResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ei.ConsumeArtifactResponse} ConsumeArtifactResponse
         */
        ConsumeArtifactResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.ei.ConsumeArtifactResponse)
                return object;
            let message = new $root.ei.ConsumeArtifactResponse();
            if (object.success != null)
                message.success = Boolean(object.success);
            if (object.originalItemId != null)
                if ($util.Long)
                    (message.originalItemId = $util.Long.fromValue(object.originalItemId)).unsigned = true;
                else if (typeof object.originalItemId === "string")
                    message.originalItemId = parseInt(object.originalItemId, 10);
                else if (typeof object.originalItemId === "number")
                    message.originalItemId = object.originalItemId;
                else if (typeof object.originalItemId === "object")
                    message.originalItemId = new $util.LongBits(object.originalItemId.low >>> 0, object.originalItemId.high >>> 0).toNumber(true);
            if (object.byproducts) {
                if (!Array.isArray(object.byproducts))
                    throw TypeError(".ei.ConsumeArtifactResponse.byproducts: array expected");
                message.byproducts = [];
                for (let i = 0; i < object.byproducts.length; ++i) {
                    if (typeof object.byproducts[i] !== "object")
                        throw TypeError(".ei.ConsumeArtifactResponse.byproducts: object expected");
                    message.byproducts[i] = $root.ei.ArtifactSpec.fromObject(object.byproducts[i]);
                }
            }
            if (object.otherRewards) {
                if (!Array.isArray(object.otherRewards))
                    throw TypeError(".ei.ConsumeArtifactResponse.otherRewards: array expected");
                message.otherRewards = [];
                for (let i = 0; i < object.otherRewards.length; ++i) {
                    if (typeof object.otherRewards[i] !== "object")
                        throw TypeError(".ei.ConsumeArtifactResponse.otherRewards: object expected");
                    message.otherRewards[i] = $root.ei.Reward.fromObject(object.otherRewards[i]);
                }
            }
            if (object.eiUserId != null)
                message.eiUserId = String(object.eiUserId);
            return message;
        };

        /**
         * Creates a plain object from a ConsumeArtifactResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ei.ConsumeArtifactResponse
         * @static
         * @param {ei.ConsumeArtifactResponse} message ConsumeArtifactResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ConsumeArtifactResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.arrays || options.defaults) {
                object.byproducts = [];
                object.otherRewards = [];
            }
            if (options.defaults) {
                object.success = false;
                if ($util.Long) {
                    let long = new $util.Long(0, 0, true);
                    object.originalItemId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.originalItemId = options.longs === String ? "0" : 0;
                object.eiUserId = "";
            }
            if (message.success != null && message.hasOwnProperty("success"))
                object.success = message.success;
            if (message.originalItemId != null && message.hasOwnProperty("originalItemId"))
                if (typeof message.originalItemId === "number")
                    object.originalItemId = options.longs === String ? String(message.originalItemId) : message.originalItemId;
                else
                    object.originalItemId = options.longs === String ? $util.Long.prototype.toString.call(message.originalItemId) : options.longs === Number ? new $util.LongBits(message.originalItemId.low >>> 0, message.originalItemId.high >>> 0).toNumber(true) : message.originalItemId;
            if (message.byproducts && message.byproducts.length) {
                object.byproducts = [];
                for (let j = 0; j < message.byproducts.length; ++j)
                    object.byproducts[j] = $root.ei.ArtifactSpec.toObject(message.byproducts[j], options);
            }
            if (message.otherRewards && message.otherRewards.length) {
                object.otherRewards = [];
                for (let j = 0; j < message.otherRewards.length; ++j)
                    object.otherRewards[j] = $root.ei.Reward.toObject(message.otherRewards[j], options);
            }
            if (message.eiUserId != null && message.hasOwnProperty("eiUserId"))
                object.eiUserId = message.eiUserId;
            return object;
        };

        /**
         * Converts this ConsumeArtifactResponse to JSON.
         * @function toJSON
         * @memberof ei.ConsumeArtifactResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ConsumeArtifactResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ConsumeArtifactResponse;
    })();

    ei.SetArtifactRequest = (function() {

        /**
         * Properties of a SetArtifactRequest.
         * @memberof ei
         * @interface ISetArtifactRequest
         * @property {ei.IBasicRequestInfo|null} [rinfo] SetArtifactRequest rinfo
         * @property {ei.IArtifactInventoryItem|null} [artifact] SetArtifactRequest artifact
         * @property {Array.<ei.IArtifactSpec>|null} [stones] SetArtifactRequest stones
         * @property {number|null} [goldPricePaid] SetArtifactRequest goldPricePaid
         */

        /**
         * Constructs a new SetArtifactRequest.
         * @memberof ei
         * @classdesc Represents a SetArtifactRequest.
         * @implements ISetArtifactRequest
         * @constructor
         * @param {ei.ISetArtifactRequest=} [properties] Properties to set
         */
        function SetArtifactRequest(properties) {
            this.stones = [];
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * SetArtifactRequest rinfo.
         * @member {ei.IBasicRequestInfo|null|undefined} rinfo
         * @memberof ei.SetArtifactRequest
         * @instance
         */
        SetArtifactRequest.prototype.rinfo = null;

        /**
         * SetArtifactRequest artifact.
         * @member {ei.IArtifactInventoryItem|null|undefined} artifact
         * @memberof ei.SetArtifactRequest
         * @instance
         */
        SetArtifactRequest.prototype.artifact = null;

        /**
         * SetArtifactRequest stones.
         * @member {Array.<ei.IArtifactSpec>} stones
         * @memberof ei.SetArtifactRequest
         * @instance
         */
        SetArtifactRequest.prototype.stones = $util.emptyArray;

        /**
         * SetArtifactRequest goldPricePaid.
         * @member {number} goldPricePaid
         * @memberof ei.SetArtifactRequest
         * @instance
         */
        SetArtifactRequest.prototype.goldPricePaid = 0;

        /**
         * Creates a new SetArtifactRequest instance using the specified properties.
         * @function create
         * @memberof ei.SetArtifactRequest
         * @static
         * @param {ei.ISetArtifactRequest=} [properties] Properties to set
         * @returns {ei.SetArtifactRequest} SetArtifactRequest instance
         */
        SetArtifactRequest.create = function create(properties) {
            return new SetArtifactRequest(properties);
        };

        /**
         * Encodes the specified SetArtifactRequest message. Does not implicitly {@link ei.SetArtifactRequest.verify|verify} messages.
         * @function encode
         * @memberof ei.SetArtifactRequest
         * @static
         * @param {ei.ISetArtifactRequest} message SetArtifactRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SetArtifactRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.rinfo != null && Object.hasOwnProperty.call(message, "rinfo"))
                $root.ei.BasicRequestInfo.encode(message.rinfo, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.artifact != null && Object.hasOwnProperty.call(message, "artifact"))
                $root.ei.ArtifactInventoryItem.encode(message.artifact, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.stones != null && message.stones.length)
                for (let i = 0; i < message.stones.length; ++i)
                    $root.ei.ArtifactSpec.encode(message.stones[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.goldPricePaid != null && Object.hasOwnProperty.call(message, "goldPricePaid"))
                writer.uint32(/* id 4, wireType 1 =*/33).double(message.goldPricePaid);
            return writer;
        };

        /**
         * Encodes the specified SetArtifactRequest message, length delimited. Does not implicitly {@link ei.SetArtifactRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ei.SetArtifactRequest
         * @static
         * @param {ei.ISetArtifactRequest} message SetArtifactRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SetArtifactRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a SetArtifactRequest message from the specified reader or buffer.
         * @function decode
         * @memberof ei.SetArtifactRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ei.SetArtifactRequest} SetArtifactRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SetArtifactRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ei.SetArtifactRequest();
            while (reader.pos < end) {
                let tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.rinfo = $root.ei.BasicRequestInfo.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.artifact = $root.ei.ArtifactInventoryItem.decode(reader, reader.uint32());
                    break;
                case 3:
                    if (!(message.stones && message.stones.length))
                        message.stones = [];
                    message.stones.push($root.ei.ArtifactSpec.decode(reader, reader.uint32()));
                    break;
                case 4:
                    message.goldPricePaid = reader.double();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a SetArtifactRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ei.SetArtifactRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ei.SetArtifactRequest} SetArtifactRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SetArtifactRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a SetArtifactRequest message.
         * @function verify
         * @memberof ei.SetArtifactRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        SetArtifactRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.rinfo != null && message.hasOwnProperty("rinfo")) {
                let error = $root.ei.BasicRequestInfo.verify(message.rinfo);
                if (error)
                    return "rinfo." + error;
            }
            if (message.artifact != null && message.hasOwnProperty("artifact")) {
                let error = $root.ei.ArtifactInventoryItem.verify(message.artifact);
                if (error)
                    return "artifact." + error;
            }
            if (message.stones != null && message.hasOwnProperty("stones")) {
                if (!Array.isArray(message.stones))
                    return "stones: array expected";
                for (let i = 0; i < message.stones.length; ++i) {
                    let error = $root.ei.ArtifactSpec.verify(message.stones[i]);
                    if (error)
                        return "stones." + error;
                }
            }
            if (message.goldPricePaid != null && message.hasOwnProperty("goldPricePaid"))
                if (typeof message.goldPricePaid !== "number")
                    return "goldPricePaid: number expected";
            return null;
        };

        /**
         * Creates a SetArtifactRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ei.SetArtifactRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ei.SetArtifactRequest} SetArtifactRequest
         */
        SetArtifactRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.ei.SetArtifactRequest)
                return object;
            let message = new $root.ei.SetArtifactRequest();
            if (object.rinfo != null) {
                if (typeof object.rinfo !== "object")
                    throw TypeError(".ei.SetArtifactRequest.rinfo: object expected");
                message.rinfo = $root.ei.BasicRequestInfo.fromObject(object.rinfo);
            }
            if (object.artifact != null) {
                if (typeof object.artifact !== "object")
                    throw TypeError(".ei.SetArtifactRequest.artifact: object expected");
                message.artifact = $root.ei.ArtifactInventoryItem.fromObject(object.artifact);
            }
            if (object.stones) {
                if (!Array.isArray(object.stones))
                    throw TypeError(".ei.SetArtifactRequest.stones: array expected");
                message.stones = [];
                for (let i = 0; i < object.stones.length; ++i) {
                    if (typeof object.stones[i] !== "object")
                        throw TypeError(".ei.SetArtifactRequest.stones: object expected");
                    message.stones[i] = $root.ei.ArtifactSpec.fromObject(object.stones[i]);
                }
            }
            if (object.goldPricePaid != null)
                message.goldPricePaid = Number(object.goldPricePaid);
            return message;
        };

        /**
         * Creates a plain object from a SetArtifactRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ei.SetArtifactRequest
         * @static
         * @param {ei.SetArtifactRequest} message SetArtifactRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        SetArtifactRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.arrays || options.defaults)
                object.stones = [];
            if (options.defaults) {
                object.rinfo = null;
                object.artifact = null;
                object.goldPricePaid = 0;
            }
            if (message.rinfo != null && message.hasOwnProperty("rinfo"))
                object.rinfo = $root.ei.BasicRequestInfo.toObject(message.rinfo, options);
            if (message.artifact != null && message.hasOwnProperty("artifact"))
                object.artifact = $root.ei.ArtifactInventoryItem.toObject(message.artifact, options);
            if (message.stones && message.stones.length) {
                object.stones = [];
                for (let j = 0; j < message.stones.length; ++j)
                    object.stones[j] = $root.ei.ArtifactSpec.toObject(message.stones[j], options);
            }
            if (message.goldPricePaid != null && message.hasOwnProperty("goldPricePaid"))
                object.goldPricePaid = options.json && !isFinite(message.goldPricePaid) ? String(message.goldPricePaid) : message.goldPricePaid;
            return object;
        };

        /**
         * Converts this SetArtifactRequest to JSON.
         * @function toJSON
         * @memberof ei.SetArtifactRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        SetArtifactRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return SetArtifactRequest;
    })();

    ei.SetArtifactResponse = (function() {

        /**
         * Properties of a SetArtifactResponse.
         * @memberof ei
         * @interface ISetArtifactResponse
         * @property {boolean|null} [success] SetArtifactResponse success
         * @property {number|Long|null} [originalItemId] SetArtifactResponse originalItemId
         * @property {string|null} [eiUserId] SetArtifactResponse eiUserId
         */

        /**
         * Constructs a new SetArtifactResponse.
         * @memberof ei
         * @classdesc Represents a SetArtifactResponse.
         * @implements ISetArtifactResponse
         * @constructor
         * @param {ei.ISetArtifactResponse=} [properties] Properties to set
         */
        function SetArtifactResponse(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * SetArtifactResponse success.
         * @member {boolean} success
         * @memberof ei.SetArtifactResponse
         * @instance
         */
        SetArtifactResponse.prototype.success = false;

        /**
         * SetArtifactResponse originalItemId.
         * @member {number|Long} originalItemId
         * @memberof ei.SetArtifactResponse
         * @instance
         */
        SetArtifactResponse.prototype.originalItemId = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * SetArtifactResponse eiUserId.
         * @member {string} eiUserId
         * @memberof ei.SetArtifactResponse
         * @instance
         */
        SetArtifactResponse.prototype.eiUserId = "";

        /**
         * Creates a new SetArtifactResponse instance using the specified properties.
         * @function create
         * @memberof ei.SetArtifactResponse
         * @static
         * @param {ei.ISetArtifactResponse=} [properties] Properties to set
         * @returns {ei.SetArtifactResponse} SetArtifactResponse instance
         */
        SetArtifactResponse.create = function create(properties) {
            return new SetArtifactResponse(properties);
        };

        /**
         * Encodes the specified SetArtifactResponse message. Does not implicitly {@link ei.SetArtifactResponse.verify|verify} messages.
         * @function encode
         * @memberof ei.SetArtifactResponse
         * @static
         * @param {ei.ISetArtifactResponse} message SetArtifactResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SetArtifactResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.success != null && Object.hasOwnProperty.call(message, "success"))
                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.success);
            if (message.originalItemId != null && Object.hasOwnProperty.call(message, "originalItemId"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.originalItemId);
            if (message.eiUserId != null && Object.hasOwnProperty.call(message, "eiUserId"))
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.eiUserId);
            return writer;
        };

        /**
         * Encodes the specified SetArtifactResponse message, length delimited. Does not implicitly {@link ei.SetArtifactResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ei.SetArtifactResponse
         * @static
         * @param {ei.ISetArtifactResponse} message SetArtifactResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SetArtifactResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a SetArtifactResponse message from the specified reader or buffer.
         * @function decode
         * @memberof ei.SetArtifactResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ei.SetArtifactResponse} SetArtifactResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SetArtifactResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ei.SetArtifactResponse();
            while (reader.pos < end) {
                let tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.success = reader.bool();
                    break;
                case 2:
                    message.originalItemId = reader.uint64();
                    break;
                case 5:
                    message.eiUserId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a SetArtifactResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ei.SetArtifactResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ei.SetArtifactResponse} SetArtifactResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SetArtifactResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a SetArtifactResponse message.
         * @function verify
         * @memberof ei.SetArtifactResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        SetArtifactResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.success != null && message.hasOwnProperty("success"))
                if (typeof message.success !== "boolean")
                    return "success: boolean expected";
            if (message.originalItemId != null && message.hasOwnProperty("originalItemId"))
                if (!$util.isInteger(message.originalItemId) && !(message.originalItemId && $util.isInteger(message.originalItemId.low) && $util.isInteger(message.originalItemId.high)))
                    return "originalItemId: integer|Long expected";
            if (message.eiUserId != null && message.hasOwnProperty("eiUserId"))
                if (!$util.isString(message.eiUserId))
                    return "eiUserId: string expected";
            return null;
        };

        /**
         * Creates a SetArtifactResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ei.SetArtifactResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ei.SetArtifactResponse} SetArtifactResponse
         */
        SetArtifactResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.ei.SetArtifactResponse)
                return object;
            let message = new $root.ei.SetArtifactResponse();
            if (object.success != null)
                message.success = Boolean(object.success);
            if (object.originalItemId != null)
                if ($util.Long)
                    (message.originalItemId = $util.Long.fromValue(object.originalItemId)).unsigned = true;
                else if (typeof object.originalItemId === "string")
                    message.originalItemId = parseInt(object.originalItemId, 10);
                else if (typeof object.originalItemId === "number")
                    message.originalItemId = object.originalItemId;
                else if (typeof object.originalItemId === "object")
                    message.originalItemId = new $util.LongBits(object.originalItemId.low >>> 0, object.originalItemId.high >>> 0).toNumber(true);
            if (object.eiUserId != null)
                message.eiUserId = String(object.eiUserId);
            return message;
        };

        /**
         * Creates a plain object from a SetArtifactResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ei.SetArtifactResponse
         * @static
         * @param {ei.SetArtifactResponse} message SetArtifactResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        SetArtifactResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.defaults) {
                object.success = false;
                if ($util.Long) {
                    let long = new $util.Long(0, 0, true);
                    object.originalItemId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.originalItemId = options.longs === String ? "0" : 0;
                object.eiUserId = "";
            }
            if (message.success != null && message.hasOwnProperty("success"))
                object.success = message.success;
            if (message.originalItemId != null && message.hasOwnProperty("originalItemId"))
                if (typeof message.originalItemId === "number")
                    object.originalItemId = options.longs === String ? String(message.originalItemId) : message.originalItemId;
                else
                    object.originalItemId = options.longs === String ? $util.Long.prototype.toString.call(message.originalItemId) : options.longs === Number ? new $util.LongBits(message.originalItemId.low >>> 0, message.originalItemId.high >>> 0).toNumber(true) : message.originalItemId;
            if (message.eiUserId != null && message.hasOwnProperty("eiUserId"))
                object.eiUserId = message.eiUserId;
            return object;
        };

        /**
         * Converts this SetArtifactResponse to JSON.
         * @function toJSON
         * @memberof ei.SetArtifactResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        SetArtifactResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return SetArtifactResponse;
    })();

    ei.ArtifactsDB = (function() {

        /**
         * Properties of an ArtifactsDB.
         * @memberof ei
         * @interface IArtifactsDB
         * @property {Array.<ei.IArtifactInventoryItem>|null} [inventoryItems] ArtifactsDB inventoryItems
         * @property {number|Long|null} [itemSequence] ArtifactsDB itemSequence
         * @property {Array.<ei.IInventorySlot>|null} [inventorySlots] ArtifactsDB inventorySlots
         * @property {Array.<ei.ArtifactsDB.IActiveArtifactSlot>|null} [activeArtifacts] ArtifactsDB activeArtifacts
         * @property {Array.<ei.ArtifactsDB.IActiveArtifactSet>|null} [activeArtifactSets] ArtifactsDB activeArtifactSets
         * @property {Array.<ei.IArtifactSpec>|null} [discoveredArtifacts] ArtifactsDB discoveredArtifacts
         * @property {Array.<ei.ArtifactsDB.ICraftableArtifact>|null} [craftableArtifacts] ArtifactsDB craftableArtifacts
         * @property {Array.<ei.ArtifactsDB.ICraftableArtifact>|null} [craftingCounts] ArtifactsDB craftingCounts
         * @property {Array.<ei.IMissionInfo>|null} [missionInfos] ArtifactsDB missionInfos
         * @property {Array.<ei.IMissionInfo>|null} [missionArchive] ArtifactsDB missionArchive
         */

        /**
         * Constructs a new ArtifactsDB.
         * @memberof ei
         * @classdesc Represents an ArtifactsDB.
         * @implements IArtifactsDB
         * @constructor
         * @param {ei.IArtifactsDB=} [properties] Properties to set
         */
        function ArtifactsDB(properties) {
            this.inventoryItems = [];
            this.inventorySlots = [];
            this.activeArtifacts = [];
            this.activeArtifactSets = [];
            this.discoveredArtifacts = [];
            this.craftableArtifacts = [];
            this.craftingCounts = [];
            this.missionInfos = [];
            this.missionArchive = [];
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ArtifactsDB inventoryItems.
         * @member {Array.<ei.IArtifactInventoryItem>} inventoryItems
         * @memberof ei.ArtifactsDB
         * @instance
         */
        ArtifactsDB.prototype.inventoryItems = $util.emptyArray;

        /**
         * ArtifactsDB itemSequence.
         * @member {number|Long} itemSequence
         * @memberof ei.ArtifactsDB
         * @instance
         */
        ArtifactsDB.prototype.itemSequence = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * ArtifactsDB inventorySlots.
         * @member {Array.<ei.IInventorySlot>} inventorySlots
         * @memberof ei.ArtifactsDB
         * @instance
         */
        ArtifactsDB.prototype.inventorySlots = $util.emptyArray;

        /**
         * ArtifactsDB activeArtifacts.
         * @member {Array.<ei.ArtifactsDB.IActiveArtifactSlot>} activeArtifacts
         * @memberof ei.ArtifactsDB
         * @instance
         */
        ArtifactsDB.prototype.activeArtifacts = $util.emptyArray;

        /**
         * ArtifactsDB activeArtifactSets.
         * @member {Array.<ei.ArtifactsDB.IActiveArtifactSet>} activeArtifactSets
         * @memberof ei.ArtifactsDB
         * @instance
         */
        ArtifactsDB.prototype.activeArtifactSets = $util.emptyArray;

        /**
         * ArtifactsDB discoveredArtifacts.
         * @member {Array.<ei.IArtifactSpec>} discoveredArtifacts
         * @memberof ei.ArtifactsDB
         * @instance
         */
        ArtifactsDB.prototype.discoveredArtifacts = $util.emptyArray;

        /**
         * ArtifactsDB craftableArtifacts.
         * @member {Array.<ei.ArtifactsDB.ICraftableArtifact>} craftableArtifacts
         * @memberof ei.ArtifactsDB
         * @instance
         */
        ArtifactsDB.prototype.craftableArtifacts = $util.emptyArray;

        /**
         * ArtifactsDB craftingCounts.
         * @member {Array.<ei.ArtifactsDB.ICraftableArtifact>} craftingCounts
         * @memberof ei.ArtifactsDB
         * @instance
         */
        ArtifactsDB.prototype.craftingCounts = $util.emptyArray;

        /**
         * ArtifactsDB missionInfos.
         * @member {Array.<ei.IMissionInfo>} missionInfos
         * @memberof ei.ArtifactsDB
         * @instance
         */
        ArtifactsDB.prototype.missionInfos = $util.emptyArray;

        /**
         * ArtifactsDB missionArchive.
         * @member {Array.<ei.IMissionInfo>} missionArchive
         * @memberof ei.ArtifactsDB
         * @instance
         */
        ArtifactsDB.prototype.missionArchive = $util.emptyArray;

        /**
         * Creates a new ArtifactsDB instance using the specified properties.
         * @function create
         * @memberof ei.ArtifactsDB
         * @static
         * @param {ei.IArtifactsDB=} [properties] Properties to set
         * @returns {ei.ArtifactsDB} ArtifactsDB instance
         */
        ArtifactsDB.create = function create(properties) {
            return new ArtifactsDB(properties);
        };

        /**
         * Encodes the specified ArtifactsDB message. Does not implicitly {@link ei.ArtifactsDB.verify|verify} messages.
         * @function encode
         * @memberof ei.ArtifactsDB
         * @static
         * @param {ei.IArtifactsDB} message ArtifactsDB message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ArtifactsDB.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.inventoryItems != null && message.inventoryItems.length)
                for (let i = 0; i < message.inventoryItems.length; ++i)
                    $root.ei.ArtifactInventoryItem.encode(message.inventoryItems[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.itemSequence != null && Object.hasOwnProperty.call(message, "itemSequence"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.itemSequence);
            if (message.inventorySlots != null && message.inventorySlots.length)
                for (let i = 0; i < message.inventorySlots.length; ++i)
                    $root.ei.InventorySlot.encode(message.inventorySlots[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.missionInfos != null && message.missionInfos.length)
                for (let i = 0; i < message.missionInfos.length; ++i)
                    $root.ei.MissionInfo.encode(message.missionInfos[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            if (message.missionArchive != null && message.missionArchive.length)
                for (let i = 0; i < message.missionArchive.length; ++i)
                    $root.ei.MissionInfo.encode(message.missionArchive[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
            if (message.activeArtifacts != null && message.activeArtifacts.length)
                for (let i = 0; i < message.activeArtifacts.length; ++i)
                    $root.ei.ArtifactsDB.ActiveArtifactSlot.encode(message.activeArtifacts[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
            if (message.discoveredArtifacts != null && message.discoveredArtifacts.length)
                for (let i = 0; i < message.discoveredArtifacts.length; ++i)
                    $root.ei.ArtifactSpec.encode(message.discoveredArtifacts[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
            if (message.craftableArtifacts != null && message.craftableArtifacts.length)
                for (let i = 0; i < message.craftableArtifacts.length; ++i)
                    $root.ei.ArtifactsDB.CraftableArtifact.encode(message.craftableArtifacts[i], writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
            if (message.craftingCounts != null && message.craftingCounts.length)
                for (let i = 0; i < message.craftingCounts.length; ++i)
                    $root.ei.ArtifactsDB.CraftableArtifact.encode(message.craftingCounts[i], writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
            if (message.activeArtifactSets != null && message.activeArtifactSets.length)
                for (let i = 0; i < message.activeArtifactSets.length; ++i)
                    $root.ei.ArtifactsDB.ActiveArtifactSet.encode(message.activeArtifactSets[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ArtifactsDB message, length delimited. Does not implicitly {@link ei.ArtifactsDB.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ei.ArtifactsDB
         * @static
         * @param {ei.IArtifactsDB} message ArtifactsDB message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ArtifactsDB.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an ArtifactsDB message from the specified reader or buffer.
         * @function decode
         * @memberof ei.ArtifactsDB
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ei.ArtifactsDB} ArtifactsDB
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ArtifactsDB.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ei.ArtifactsDB();
            while (reader.pos < end) {
                let tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.inventoryItems && message.inventoryItems.length))
                        message.inventoryItems = [];
                    message.inventoryItems.push($root.ei.ArtifactInventoryItem.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.itemSequence = reader.uint64();
                    break;
                case 3:
                    if (!(message.inventorySlots && message.inventorySlots.length))
                        message.inventorySlots = [];
                    message.inventorySlots.push($root.ei.InventorySlot.decode(reader, reader.uint32()));
                    break;
                case 7:
                    if (!(message.activeArtifacts && message.activeArtifacts.length))
                        message.activeArtifacts = [];
                    message.activeArtifacts.push($root.ei.ArtifactsDB.ActiveArtifactSlot.decode(reader, reader.uint32()));
                    break;
                case 11:
                    if (!(message.activeArtifactSets && message.activeArtifactSets.length))
                        message.activeArtifactSets = [];
                    message.activeArtifactSets.push($root.ei.ArtifactsDB.ActiveArtifactSet.decode(reader, reader.uint32()));
                    break;
                case 8:
                    if (!(message.discoveredArtifacts && message.discoveredArtifacts.length))
                        message.discoveredArtifacts = [];
                    message.discoveredArtifacts.push($root.ei.ArtifactSpec.decode(reader, reader.uint32()));
                    break;
                case 9:
                    if (!(message.craftableArtifacts && message.craftableArtifacts.length))
                        message.craftableArtifacts = [];
                    message.craftableArtifacts.push($root.ei.ArtifactsDB.CraftableArtifact.decode(reader, reader.uint32()));
                    break;
                case 10:
                    if (!(message.craftingCounts && message.craftingCounts.length))
                        message.craftingCounts = [];
                    message.craftingCounts.push($root.ei.ArtifactsDB.CraftableArtifact.decode(reader, reader.uint32()));
                    break;
                case 4:
                    if (!(message.missionInfos && message.missionInfos.length))
                        message.missionInfos = [];
                    message.missionInfos.push($root.ei.MissionInfo.decode(reader, reader.uint32()));
                    break;
                case 5:
                    if (!(message.missionArchive && message.missionArchive.length))
                        message.missionArchive = [];
                    message.missionArchive.push($root.ei.MissionInfo.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an ArtifactsDB message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ei.ArtifactsDB
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ei.ArtifactsDB} ArtifactsDB
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ArtifactsDB.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an ArtifactsDB message.
         * @function verify
         * @memberof ei.ArtifactsDB
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ArtifactsDB.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.inventoryItems != null && message.hasOwnProperty("inventoryItems")) {
                if (!Array.isArray(message.inventoryItems))
                    return "inventoryItems: array expected";
                for (let i = 0; i < message.inventoryItems.length; ++i) {
                    let error = $root.ei.ArtifactInventoryItem.verify(message.inventoryItems[i]);
                    if (error)
                        return "inventoryItems." + error;
                }
            }
            if (message.itemSequence != null && message.hasOwnProperty("itemSequence"))
                if (!$util.isInteger(message.itemSequence) && !(message.itemSequence && $util.isInteger(message.itemSequence.low) && $util.isInteger(message.itemSequence.high)))
                    return "itemSequence: integer|Long expected";
            if (message.inventorySlots != null && message.hasOwnProperty("inventorySlots")) {
                if (!Array.isArray(message.inventorySlots))
                    return "inventorySlots: array expected";
                for (let i = 0; i < message.inventorySlots.length; ++i) {
                    let error = $root.ei.InventorySlot.verify(message.inventorySlots[i]);
                    if (error)
                        return "inventorySlots." + error;
                }
            }
            if (message.activeArtifacts != null && message.hasOwnProperty("activeArtifacts")) {
                if (!Array.isArray(message.activeArtifacts))
                    return "activeArtifacts: array expected";
                for (let i = 0; i < message.activeArtifacts.length; ++i) {
                    let error = $root.ei.ArtifactsDB.ActiveArtifactSlot.verify(message.activeArtifacts[i]);
                    if (error)
                        return "activeArtifacts." + error;
                }
            }
            if (message.activeArtifactSets != null && message.hasOwnProperty("activeArtifactSets")) {
                if (!Array.isArray(message.activeArtifactSets))
                    return "activeArtifactSets: array expected";
                for (let i = 0; i < message.activeArtifactSets.length; ++i) {
                    let error = $root.ei.ArtifactsDB.ActiveArtifactSet.verify(message.activeArtifactSets[i]);
                    if (error)
                        return "activeArtifactSets." + error;
                }
            }
            if (message.discoveredArtifacts != null && message.hasOwnProperty("discoveredArtifacts")) {
                if (!Array.isArray(message.discoveredArtifacts))
                    return "discoveredArtifacts: array expected";
                for (let i = 0; i < message.discoveredArtifacts.length; ++i) {
                    let error = $root.ei.ArtifactSpec.verify(message.discoveredArtifacts[i]);
                    if (error)
                        return "discoveredArtifacts." + error;
                }
            }
            if (message.craftableArtifacts != null && message.hasOwnProperty("craftableArtifacts")) {
                if (!Array.isArray(message.craftableArtifacts))
                    return "craftableArtifacts: array expected";
                for (let i = 0; i < message.craftableArtifacts.length; ++i) {
                    let error = $root.ei.ArtifactsDB.CraftableArtifact.verify(message.craftableArtifacts[i]);
                    if (error)
                        return "craftableArtifacts." + error;
                }
            }
            if (message.craftingCounts != null && message.hasOwnProperty("craftingCounts")) {
                if (!Array.isArray(message.craftingCounts))
                    return "craftingCounts: array expected";
                for (let i = 0; i < message.craftingCounts.length; ++i) {
                    let error = $root.ei.ArtifactsDB.CraftableArtifact.verify(message.craftingCounts[i]);
                    if (error)
                        return "craftingCounts." + error;
                }
            }
            if (message.missionInfos != null && message.hasOwnProperty("missionInfos")) {
                if (!Array.isArray(message.missionInfos))
                    return "missionInfos: array expected";
                for (let i = 0; i < message.missionInfos.length; ++i) {
                    let error = $root.ei.MissionInfo.verify(message.missionInfos[i]);
                    if (error)
                        return "missionInfos." + error;
                }
            }
            if (message.missionArchive != null && message.hasOwnProperty("missionArchive")) {
                if (!Array.isArray(message.missionArchive))
                    return "missionArchive: array expected";
                for (let i = 0; i < message.missionArchive.length; ++i) {
                    let error = $root.ei.MissionInfo.verify(message.missionArchive[i]);
                    if (error)
                        return "missionArchive." + error;
                }
            }
            return null;
        };

        /**
         * Creates an ArtifactsDB message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ei.ArtifactsDB
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ei.ArtifactsDB} ArtifactsDB
         */
        ArtifactsDB.fromObject = function fromObject(object) {
            if (object instanceof $root.ei.ArtifactsDB)
                return object;
            let message = new $root.ei.ArtifactsDB();
            if (object.inventoryItems) {
                if (!Array.isArray(object.inventoryItems))
                    throw TypeError(".ei.ArtifactsDB.inventoryItems: array expected");
                message.inventoryItems = [];
                for (let i = 0; i < object.inventoryItems.length; ++i) {
                    if (typeof object.inventoryItems[i] !== "object")
                        throw TypeError(".ei.ArtifactsDB.inventoryItems: object expected");
                    message.inventoryItems[i] = $root.ei.ArtifactInventoryItem.fromObject(object.inventoryItems[i]);
                }
            }
            if (object.itemSequence != null)
                if ($util.Long)
                    (message.itemSequence = $util.Long.fromValue(object.itemSequence)).unsigned = true;
                else if (typeof object.itemSequence === "string")
                    message.itemSequence = parseInt(object.itemSequence, 10);
                else if (typeof object.itemSequence === "number")
                    message.itemSequence = object.itemSequence;
                else if (typeof object.itemSequence === "object")
                    message.itemSequence = new $util.LongBits(object.itemSequence.low >>> 0, object.itemSequence.high >>> 0).toNumber(true);
            if (object.inventorySlots) {
                if (!Array.isArray(object.inventorySlots))
                    throw TypeError(".ei.ArtifactsDB.inventorySlots: array expected");
                message.inventorySlots = [];
                for (let i = 0; i < object.inventorySlots.length; ++i) {
                    if (typeof object.inventorySlots[i] !== "object")
                        throw TypeError(".ei.ArtifactsDB.inventorySlots: object expected");
                    message.inventorySlots[i] = $root.ei.InventorySlot.fromObject(object.inventorySlots[i]);
                }
            }
            if (object.activeArtifacts) {
                if (!Array.isArray(object.activeArtifacts))
                    throw TypeError(".ei.ArtifactsDB.activeArtifacts: array expected");
                message.activeArtifacts = [];
                for (let i = 0; i < object.activeArtifacts.length; ++i) {
                    if (typeof object.activeArtifacts[i] !== "object")
                        throw TypeError(".ei.ArtifactsDB.activeArtifacts: object expected");
                    message.activeArtifacts[i] = $root.ei.ArtifactsDB.ActiveArtifactSlot.fromObject(object.activeArtifacts[i]);
                }
            }
            if (object.activeArtifactSets) {
                if (!Array.isArray(object.activeArtifactSets))
                    throw TypeError(".ei.ArtifactsDB.activeArtifactSets: array expected");
                message.activeArtifactSets = [];
                for (let i = 0; i < object.activeArtifactSets.length; ++i) {
                    if (typeof object.activeArtifactSets[i] !== "object")
                        throw TypeError(".ei.ArtifactsDB.activeArtifactSets: object expected");
                    message.activeArtifactSets[i] = $root.ei.ArtifactsDB.ActiveArtifactSet.fromObject(object.activeArtifactSets[i]);
                }
            }
            if (object.discoveredArtifacts) {
                if (!Array.isArray(object.discoveredArtifacts))
                    throw TypeError(".ei.ArtifactsDB.discoveredArtifacts: array expected");
                message.discoveredArtifacts = [];
                for (let i = 0; i < object.discoveredArtifacts.length; ++i) {
                    if (typeof object.discoveredArtifacts[i] !== "object")
                        throw TypeError(".ei.ArtifactsDB.discoveredArtifacts: object expected");
                    message.discoveredArtifacts[i] = $root.ei.ArtifactSpec.fromObject(object.discoveredArtifacts[i]);
                }
            }
            if (object.craftableArtifacts) {
                if (!Array.isArray(object.craftableArtifacts))
                    throw TypeError(".ei.ArtifactsDB.craftableArtifacts: array expected");
                message.craftableArtifacts = [];
                for (let i = 0; i < object.craftableArtifacts.length; ++i) {
                    if (typeof object.craftableArtifacts[i] !== "object")
                        throw TypeError(".ei.ArtifactsDB.craftableArtifacts: object expected");
                    message.craftableArtifacts[i] = $root.ei.ArtifactsDB.CraftableArtifact.fromObject(object.craftableArtifacts[i]);
                }
            }
            if (object.craftingCounts) {
                if (!Array.isArray(object.craftingCounts))
                    throw TypeError(".ei.ArtifactsDB.craftingCounts: array expected");
                message.craftingCounts = [];
                for (let i = 0; i < object.craftingCounts.length; ++i) {
                    if (typeof object.craftingCounts[i] !== "object")
                        throw TypeError(".ei.ArtifactsDB.craftingCounts: object expected");
                    message.craftingCounts[i] = $root.ei.ArtifactsDB.CraftableArtifact.fromObject(object.craftingCounts[i]);
                }
            }
            if (object.missionInfos) {
                if (!Array.isArray(object.missionInfos))
                    throw TypeError(".ei.ArtifactsDB.missionInfos: array expected");
                message.missionInfos = [];
                for (let i = 0; i < object.missionInfos.length; ++i) {
                    if (typeof object.missionInfos[i] !== "object")
                        throw TypeError(".ei.ArtifactsDB.missionInfos: object expected");
                    message.missionInfos[i] = $root.ei.MissionInfo.fromObject(object.missionInfos[i]);
                }
            }
            if (object.missionArchive) {
                if (!Array.isArray(object.missionArchive))
                    throw TypeError(".ei.ArtifactsDB.missionArchive: array expected");
                message.missionArchive = [];
                for (let i = 0; i < object.missionArchive.length; ++i) {
                    if (typeof object.missionArchive[i] !== "object")
                        throw TypeError(".ei.ArtifactsDB.missionArchive: object expected");
                    message.missionArchive[i] = $root.ei.MissionInfo.fromObject(object.missionArchive[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from an ArtifactsDB message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ei.ArtifactsDB
         * @static
         * @param {ei.ArtifactsDB} message ArtifactsDB
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ArtifactsDB.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.arrays || options.defaults) {
                object.inventoryItems = [];
                object.inventorySlots = [];
                object.missionInfos = [];
                object.missionArchive = [];
                object.activeArtifacts = [];
                object.discoveredArtifacts = [];
                object.craftableArtifacts = [];
                object.craftingCounts = [];
                object.activeArtifactSets = [];
            }
            if (options.defaults)
                if ($util.Long) {
                    let long = new $util.Long(0, 0, true);
                    object.itemSequence = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.itemSequence = options.longs === String ? "0" : 0;
            if (message.inventoryItems && message.inventoryItems.length) {
                object.inventoryItems = [];
                for (let j = 0; j < message.inventoryItems.length; ++j)
                    object.inventoryItems[j] = $root.ei.ArtifactInventoryItem.toObject(message.inventoryItems[j], options);
            }
            if (message.itemSequence != null && message.hasOwnProperty("itemSequence"))
                if (typeof message.itemSequence === "number")
                    object.itemSequence = options.longs === String ? String(message.itemSequence) : message.itemSequence;
                else
                    object.itemSequence = options.longs === String ? $util.Long.prototype.toString.call(message.itemSequence) : options.longs === Number ? new $util.LongBits(message.itemSequence.low >>> 0, message.itemSequence.high >>> 0).toNumber(true) : message.itemSequence;
            if (message.inventorySlots && message.inventorySlots.length) {
                object.inventorySlots = [];
                for (let j = 0; j < message.inventorySlots.length; ++j)
                    object.inventorySlots[j] = $root.ei.InventorySlot.toObject(message.inventorySlots[j], options);
            }
            if (message.missionInfos && message.missionInfos.length) {
                object.missionInfos = [];
                for (let j = 0; j < message.missionInfos.length; ++j)
                    object.missionInfos[j] = $root.ei.MissionInfo.toObject(message.missionInfos[j], options);
            }
            if (message.missionArchive && message.missionArchive.length) {
                object.missionArchive = [];
                for (let j = 0; j < message.missionArchive.length; ++j)
                    object.missionArchive[j] = $root.ei.MissionInfo.toObject(message.missionArchive[j], options);
            }
            if (message.activeArtifacts && message.activeArtifacts.length) {
                object.activeArtifacts = [];
                for (let j = 0; j < message.activeArtifacts.length; ++j)
                    object.activeArtifacts[j] = $root.ei.ArtifactsDB.ActiveArtifactSlot.toObject(message.activeArtifacts[j], options);
            }
            if (message.discoveredArtifacts && message.discoveredArtifacts.length) {
                object.discoveredArtifacts = [];
                for (let j = 0; j < message.discoveredArtifacts.length; ++j)
                    object.discoveredArtifacts[j] = $root.ei.ArtifactSpec.toObject(message.discoveredArtifacts[j], options);
            }
            if (message.craftableArtifacts && message.craftableArtifacts.length) {
                object.craftableArtifacts = [];
                for (let j = 0; j < message.craftableArtifacts.length; ++j)
                    object.craftableArtifacts[j] = $root.ei.ArtifactsDB.CraftableArtifact.toObject(message.craftableArtifacts[j], options);
            }
            if (message.craftingCounts && message.craftingCounts.length) {
                object.craftingCounts = [];
                for (let j = 0; j < message.craftingCounts.length; ++j)
                    object.craftingCounts[j] = $root.ei.ArtifactsDB.CraftableArtifact.toObject(message.craftingCounts[j], options);
            }
            if (message.activeArtifactSets && message.activeArtifactSets.length) {
                object.activeArtifactSets = [];
                for (let j = 0; j < message.activeArtifactSets.length; ++j)
                    object.activeArtifactSets[j] = $root.ei.ArtifactsDB.ActiveArtifactSet.toObject(message.activeArtifactSets[j], options);
            }
            return object;
        };

        /**
         * Converts this ArtifactsDB to JSON.
         * @function toJSON
         * @memberof ei.ArtifactsDB
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ArtifactsDB.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        ArtifactsDB.ActiveArtifactSlot = (function() {

            /**
             * Properties of an ActiveArtifactSlot.
             * @memberof ei.ArtifactsDB
             * @interface IActiveArtifactSlot
             * @property {boolean|null} [occupied] ActiveArtifactSlot occupied
             * @property {number|Long|null} [itemId] ActiveArtifactSlot itemId
             */

            /**
             * Constructs a new ActiveArtifactSlot.
             * @memberof ei.ArtifactsDB
             * @classdesc Represents an ActiveArtifactSlot.
             * @implements IActiveArtifactSlot
             * @constructor
             * @param {ei.ArtifactsDB.IActiveArtifactSlot=} [properties] Properties to set
             */
            function ActiveArtifactSlot(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ActiveArtifactSlot occupied.
             * @member {boolean} occupied
             * @memberof ei.ArtifactsDB.ActiveArtifactSlot
             * @instance
             */
            ActiveArtifactSlot.prototype.occupied = false;

            /**
             * ActiveArtifactSlot itemId.
             * @member {number|Long} itemId
             * @memberof ei.ArtifactsDB.ActiveArtifactSlot
             * @instance
             */
            ActiveArtifactSlot.prototype.itemId = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * Creates a new ActiveArtifactSlot instance using the specified properties.
             * @function create
             * @memberof ei.ArtifactsDB.ActiveArtifactSlot
             * @static
             * @param {ei.ArtifactsDB.IActiveArtifactSlot=} [properties] Properties to set
             * @returns {ei.ArtifactsDB.ActiveArtifactSlot} ActiveArtifactSlot instance
             */
            ActiveArtifactSlot.create = function create(properties) {
                return new ActiveArtifactSlot(properties);
            };

            /**
             * Encodes the specified ActiveArtifactSlot message. Does not implicitly {@link ei.ArtifactsDB.ActiveArtifactSlot.verify|verify} messages.
             * @function encode
             * @memberof ei.ArtifactsDB.ActiveArtifactSlot
             * @static
             * @param {ei.ArtifactsDB.IActiveArtifactSlot} message ActiveArtifactSlot message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ActiveArtifactSlot.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.occupied != null && Object.hasOwnProperty.call(message, "occupied"))
                    writer.uint32(/* id 1, wireType 0 =*/8).bool(message.occupied);
                if (message.itemId != null && Object.hasOwnProperty.call(message, "itemId"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.itemId);
                return writer;
            };

            /**
             * Encodes the specified ActiveArtifactSlot message, length delimited. Does not implicitly {@link ei.ArtifactsDB.ActiveArtifactSlot.verify|verify} messages.
             * @function encodeDelimited
             * @memberof ei.ArtifactsDB.ActiveArtifactSlot
             * @static
             * @param {ei.ArtifactsDB.IActiveArtifactSlot} message ActiveArtifactSlot message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ActiveArtifactSlot.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an ActiveArtifactSlot message from the specified reader or buffer.
             * @function decode
             * @memberof ei.ArtifactsDB.ActiveArtifactSlot
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {ei.ArtifactsDB.ActiveArtifactSlot} ActiveArtifactSlot
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ActiveArtifactSlot.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ei.ArtifactsDB.ActiveArtifactSlot();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.occupied = reader.bool();
                        break;
                    case 2:
                        message.itemId = reader.uint64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an ActiveArtifactSlot message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof ei.ArtifactsDB.ActiveArtifactSlot
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {ei.ArtifactsDB.ActiveArtifactSlot} ActiveArtifactSlot
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ActiveArtifactSlot.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an ActiveArtifactSlot message.
             * @function verify
             * @memberof ei.ArtifactsDB.ActiveArtifactSlot
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ActiveArtifactSlot.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.occupied != null && message.hasOwnProperty("occupied"))
                    if (typeof message.occupied !== "boolean")
                        return "occupied: boolean expected";
                if (message.itemId != null && message.hasOwnProperty("itemId"))
                    if (!$util.isInteger(message.itemId) && !(message.itemId && $util.isInteger(message.itemId.low) && $util.isInteger(message.itemId.high)))
                        return "itemId: integer|Long expected";
                return null;
            };

            /**
             * Creates an ActiveArtifactSlot message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof ei.ArtifactsDB.ActiveArtifactSlot
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {ei.ArtifactsDB.ActiveArtifactSlot} ActiveArtifactSlot
             */
            ActiveArtifactSlot.fromObject = function fromObject(object) {
                if (object instanceof $root.ei.ArtifactsDB.ActiveArtifactSlot)
                    return object;
                let message = new $root.ei.ArtifactsDB.ActiveArtifactSlot();
                if (object.occupied != null)
                    message.occupied = Boolean(object.occupied);
                if (object.itemId != null)
                    if ($util.Long)
                        (message.itemId = $util.Long.fromValue(object.itemId)).unsigned = true;
                    else if (typeof object.itemId === "string")
                        message.itemId = parseInt(object.itemId, 10);
                    else if (typeof object.itemId === "number")
                        message.itemId = object.itemId;
                    else if (typeof object.itemId === "object")
                        message.itemId = new $util.LongBits(object.itemId.low >>> 0, object.itemId.high >>> 0).toNumber(true);
                return message;
            };

            /**
             * Creates a plain object from an ActiveArtifactSlot message. Also converts values to other types if specified.
             * @function toObject
             * @memberof ei.ArtifactsDB.ActiveArtifactSlot
             * @static
             * @param {ei.ArtifactsDB.ActiveArtifactSlot} message ActiveArtifactSlot
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ActiveArtifactSlot.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.occupied = false;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.itemId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.itemId = options.longs === String ? "0" : 0;
                }
                if (message.occupied != null && message.hasOwnProperty("occupied"))
                    object.occupied = message.occupied;
                if (message.itemId != null && message.hasOwnProperty("itemId"))
                    if (typeof message.itemId === "number")
                        object.itemId = options.longs === String ? String(message.itemId) : message.itemId;
                    else
                        object.itemId = options.longs === String ? $util.Long.prototype.toString.call(message.itemId) : options.longs === Number ? new $util.LongBits(message.itemId.low >>> 0, message.itemId.high >>> 0).toNumber(true) : message.itemId;
                return object;
            };

            /**
             * Converts this ActiveArtifactSlot to JSON.
             * @function toJSON
             * @memberof ei.ArtifactsDB.ActiveArtifactSlot
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ActiveArtifactSlot.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ActiveArtifactSlot;
        })();

        ArtifactsDB.ActiveArtifactSet = (function() {

            /**
             * Properties of an ActiveArtifactSet.
             * @memberof ei.ArtifactsDB
             * @interface IActiveArtifactSet
             * @property {Array.<ei.ArtifactsDB.IActiveArtifactSlot>|null} [slots] ActiveArtifactSet slots
             */

            /**
             * Constructs a new ActiveArtifactSet.
             * @memberof ei.ArtifactsDB
             * @classdesc Represents an ActiveArtifactSet.
             * @implements IActiveArtifactSet
             * @constructor
             * @param {ei.ArtifactsDB.IActiveArtifactSet=} [properties] Properties to set
             */
            function ActiveArtifactSet(properties) {
                this.slots = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ActiveArtifactSet slots.
             * @member {Array.<ei.ArtifactsDB.IActiveArtifactSlot>} slots
             * @memberof ei.ArtifactsDB.ActiveArtifactSet
             * @instance
             */
            ActiveArtifactSet.prototype.slots = $util.emptyArray;

            /**
             * Creates a new ActiveArtifactSet instance using the specified properties.
             * @function create
             * @memberof ei.ArtifactsDB.ActiveArtifactSet
             * @static
             * @param {ei.ArtifactsDB.IActiveArtifactSet=} [properties] Properties to set
             * @returns {ei.ArtifactsDB.ActiveArtifactSet} ActiveArtifactSet instance
             */
            ActiveArtifactSet.create = function create(properties) {
                return new ActiveArtifactSet(properties);
            };

            /**
             * Encodes the specified ActiveArtifactSet message. Does not implicitly {@link ei.ArtifactsDB.ActiveArtifactSet.verify|verify} messages.
             * @function encode
             * @memberof ei.ArtifactsDB.ActiveArtifactSet
             * @static
             * @param {ei.ArtifactsDB.IActiveArtifactSet} message ActiveArtifactSet message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ActiveArtifactSet.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.slots != null && message.slots.length)
                    for (let i = 0; i < message.slots.length; ++i)
                        $root.ei.ArtifactsDB.ActiveArtifactSlot.encode(message.slots[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified ActiveArtifactSet message, length delimited. Does not implicitly {@link ei.ArtifactsDB.ActiveArtifactSet.verify|verify} messages.
             * @function encodeDelimited
             * @memberof ei.ArtifactsDB.ActiveArtifactSet
             * @static
             * @param {ei.ArtifactsDB.IActiveArtifactSet} message ActiveArtifactSet message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ActiveArtifactSet.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an ActiveArtifactSet message from the specified reader or buffer.
             * @function decode
             * @memberof ei.ArtifactsDB.ActiveArtifactSet
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {ei.ArtifactsDB.ActiveArtifactSet} ActiveArtifactSet
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ActiveArtifactSet.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ei.ArtifactsDB.ActiveArtifactSet();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.slots && message.slots.length))
                            message.slots = [];
                        message.slots.push($root.ei.ArtifactsDB.ActiveArtifactSlot.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an ActiveArtifactSet message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof ei.ArtifactsDB.ActiveArtifactSet
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {ei.ArtifactsDB.ActiveArtifactSet} ActiveArtifactSet
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ActiveArtifactSet.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an ActiveArtifactSet message.
             * @function verify
             * @memberof ei.ArtifactsDB.ActiveArtifactSet
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ActiveArtifactSet.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.slots != null && message.hasOwnProperty("slots")) {
                    if (!Array.isArray(message.slots))
                        return "slots: array expected";
                    for (let i = 0; i < message.slots.length; ++i) {
                        let error = $root.ei.ArtifactsDB.ActiveArtifactSlot.verify(message.slots[i]);
                        if (error)
                            return "slots." + error;
                    }
                }
                return null;
            };

            /**
             * Creates an ActiveArtifactSet message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof ei.ArtifactsDB.ActiveArtifactSet
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {ei.ArtifactsDB.ActiveArtifactSet} ActiveArtifactSet
             */
            ActiveArtifactSet.fromObject = function fromObject(object) {
                if (object instanceof $root.ei.ArtifactsDB.ActiveArtifactSet)
                    return object;
                let message = new $root.ei.ArtifactsDB.ActiveArtifactSet();
                if (object.slots) {
                    if (!Array.isArray(object.slots))
                        throw TypeError(".ei.ArtifactsDB.ActiveArtifactSet.slots: array expected");
                    message.slots = [];
                    for (let i = 0; i < object.slots.length; ++i) {
                        if (typeof object.slots[i] !== "object")
                            throw TypeError(".ei.ArtifactsDB.ActiveArtifactSet.slots: object expected");
                        message.slots[i] = $root.ei.ArtifactsDB.ActiveArtifactSlot.fromObject(object.slots[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from an ActiveArtifactSet message. Also converts values to other types if specified.
             * @function toObject
             * @memberof ei.ArtifactsDB.ActiveArtifactSet
             * @static
             * @param {ei.ArtifactsDB.ActiveArtifactSet} message ActiveArtifactSet
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ActiveArtifactSet.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.slots = [];
                if (message.slots && message.slots.length) {
                    object.slots = [];
                    for (let j = 0; j < message.slots.length; ++j)
                        object.slots[j] = $root.ei.ArtifactsDB.ActiveArtifactSlot.toObject(message.slots[j], options);
                }
                return object;
            };

            /**
             * Converts this ActiveArtifactSet to JSON.
             * @function toJSON
             * @memberof ei.ArtifactsDB.ActiveArtifactSet
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ActiveArtifactSet.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ActiveArtifactSet;
        })();

        ArtifactsDB.CraftableArtifact = (function() {

            /**
             * Properties of a CraftableArtifact.
             * @memberof ei.ArtifactsDB
             * @interface ICraftableArtifact
             * @property {ei.IArtifactSpec|null} [spec] CraftableArtifact spec
             * @property {boolean|null} [seen] CraftableArtifact seen
             * @property {number|null} [count] CraftableArtifact count
             */

            /**
             * Constructs a new CraftableArtifact.
             * @memberof ei.ArtifactsDB
             * @classdesc Represents a CraftableArtifact.
             * @implements ICraftableArtifact
             * @constructor
             * @param {ei.ArtifactsDB.ICraftableArtifact=} [properties] Properties to set
             */
            function CraftableArtifact(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * CraftableArtifact spec.
             * @member {ei.IArtifactSpec|null|undefined} spec
             * @memberof ei.ArtifactsDB.CraftableArtifact
             * @instance
             */
            CraftableArtifact.prototype.spec = null;

            /**
             * CraftableArtifact seen.
             * @member {boolean} seen
             * @memberof ei.ArtifactsDB.CraftableArtifact
             * @instance
             */
            CraftableArtifact.prototype.seen = false;

            /**
             * CraftableArtifact count.
             * @member {number} count
             * @memberof ei.ArtifactsDB.CraftableArtifact
             * @instance
             */
            CraftableArtifact.prototype.count = 0;

            /**
             * Creates a new CraftableArtifact instance using the specified properties.
             * @function create
             * @memberof ei.ArtifactsDB.CraftableArtifact
             * @static
             * @param {ei.ArtifactsDB.ICraftableArtifact=} [properties] Properties to set
             * @returns {ei.ArtifactsDB.CraftableArtifact} CraftableArtifact instance
             */
            CraftableArtifact.create = function create(properties) {
                return new CraftableArtifact(properties);
            };

            /**
             * Encodes the specified CraftableArtifact message. Does not implicitly {@link ei.ArtifactsDB.CraftableArtifact.verify|verify} messages.
             * @function encode
             * @memberof ei.ArtifactsDB.CraftableArtifact
             * @static
             * @param {ei.ArtifactsDB.ICraftableArtifact} message CraftableArtifact message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CraftableArtifact.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.spec != null && Object.hasOwnProperty.call(message, "spec"))
                    $root.ei.ArtifactSpec.encode(message.spec, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.seen != null && Object.hasOwnProperty.call(message, "seen"))
                    writer.uint32(/* id 2, wireType 0 =*/16).bool(message.seen);
                if (message.count != null && Object.hasOwnProperty.call(message, "count"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.count);
                return writer;
            };

            /**
             * Encodes the specified CraftableArtifact message, length delimited. Does not implicitly {@link ei.ArtifactsDB.CraftableArtifact.verify|verify} messages.
             * @function encodeDelimited
             * @memberof ei.ArtifactsDB.CraftableArtifact
             * @static
             * @param {ei.ArtifactsDB.ICraftableArtifact} message CraftableArtifact message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CraftableArtifact.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a CraftableArtifact message from the specified reader or buffer.
             * @function decode
             * @memberof ei.ArtifactsDB.CraftableArtifact
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {ei.ArtifactsDB.CraftableArtifact} CraftableArtifact
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CraftableArtifact.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ei.ArtifactsDB.CraftableArtifact();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.spec = $root.ei.ArtifactSpec.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.seen = reader.bool();
                        break;
                    case 3:
                        message.count = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a CraftableArtifact message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof ei.ArtifactsDB.CraftableArtifact
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {ei.ArtifactsDB.CraftableArtifact} CraftableArtifact
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CraftableArtifact.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a CraftableArtifact message.
             * @function verify
             * @memberof ei.ArtifactsDB.CraftableArtifact
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            CraftableArtifact.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.spec != null && message.hasOwnProperty("spec")) {
                    let error = $root.ei.ArtifactSpec.verify(message.spec);
                    if (error)
                        return "spec." + error;
                }
                if (message.seen != null && message.hasOwnProperty("seen"))
                    if (typeof message.seen !== "boolean")
                        return "seen: boolean expected";
                if (message.count != null && message.hasOwnProperty("count"))
                    if (!$util.isInteger(message.count))
                        return "count: integer expected";
                return null;
            };

            /**
             * Creates a CraftableArtifact message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof ei.ArtifactsDB.CraftableArtifact
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {ei.ArtifactsDB.CraftableArtifact} CraftableArtifact
             */
            CraftableArtifact.fromObject = function fromObject(object) {
                if (object instanceof $root.ei.ArtifactsDB.CraftableArtifact)
                    return object;
                let message = new $root.ei.ArtifactsDB.CraftableArtifact();
                if (object.spec != null) {
                    if (typeof object.spec !== "object")
                        throw TypeError(".ei.ArtifactsDB.CraftableArtifact.spec: object expected");
                    message.spec = $root.ei.ArtifactSpec.fromObject(object.spec);
                }
                if (object.seen != null)
                    message.seen = Boolean(object.seen);
                if (object.count != null)
                    message.count = object.count >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a CraftableArtifact message. Also converts values to other types if specified.
             * @function toObject
             * @memberof ei.ArtifactsDB.CraftableArtifact
             * @static
             * @param {ei.ArtifactsDB.CraftableArtifact} message CraftableArtifact
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            CraftableArtifact.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.spec = null;
                    object.seen = false;
                    object.count = 0;
                }
                if (message.spec != null && message.hasOwnProperty("spec"))
                    object.spec = $root.ei.ArtifactSpec.toObject(message.spec, options);
                if (message.seen != null && message.hasOwnProperty("seen"))
                    object.seen = message.seen;
                if (message.count != null && message.hasOwnProperty("count"))
                    object.count = message.count;
                return object;
            };

            /**
             * Converts this CraftableArtifact to JSON.
             * @function toJSON
             * @memberof ei.ArtifactsDB.CraftableArtifact
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            CraftableArtifact.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return CraftableArtifact;
        })();

        return ArtifactsDB;
    })();

    ei.AuthenticatedMessage = (function() {

        /**
         * Properties of an AuthenticatedMessage.
         * @memberof ei
         * @interface IAuthenticatedMessage
         * @property {Uint8Array|null} [message] AuthenticatedMessage message
         * @property {string|null} [code] AuthenticatedMessage code
         */

        /**
         * Constructs a new AuthenticatedMessage.
         * @memberof ei
         * @classdesc Represents an AuthenticatedMessage.
         * @implements IAuthenticatedMessage
         * @constructor
         * @param {ei.IAuthenticatedMessage=} [properties] Properties to set
         */
        function AuthenticatedMessage(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * AuthenticatedMessage message.
         * @member {Uint8Array} message
         * @memberof ei.AuthenticatedMessage
         * @instance
         */
        AuthenticatedMessage.prototype.message = $util.newBuffer([]);

        /**
         * AuthenticatedMessage code.
         * @member {string} code
         * @memberof ei.AuthenticatedMessage
         * @instance
         */
        AuthenticatedMessage.prototype.code = "";

        /**
         * Creates a new AuthenticatedMessage instance using the specified properties.
         * @function create
         * @memberof ei.AuthenticatedMessage
         * @static
         * @param {ei.IAuthenticatedMessage=} [properties] Properties to set
         * @returns {ei.AuthenticatedMessage} AuthenticatedMessage instance
         */
        AuthenticatedMessage.create = function create(properties) {
            return new AuthenticatedMessage(properties);
        };

        /**
         * Encodes the specified AuthenticatedMessage message. Does not implicitly {@link ei.AuthenticatedMessage.verify|verify} messages.
         * @function encode
         * @memberof ei.AuthenticatedMessage
         * @static
         * @param {ei.IAuthenticatedMessage} message AuthenticatedMessage message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        AuthenticatedMessage.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.message != null && Object.hasOwnProperty.call(message, "message"))
                writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.message);
            if (message.code != null && Object.hasOwnProperty.call(message, "code"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.code);
            return writer;
        };

        /**
         * Encodes the specified AuthenticatedMessage message, length delimited. Does not implicitly {@link ei.AuthenticatedMessage.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ei.AuthenticatedMessage
         * @static
         * @param {ei.IAuthenticatedMessage} message AuthenticatedMessage message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        AuthenticatedMessage.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an AuthenticatedMessage message from the specified reader or buffer.
         * @function decode
         * @memberof ei.AuthenticatedMessage
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ei.AuthenticatedMessage} AuthenticatedMessage
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        AuthenticatedMessage.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ei.AuthenticatedMessage();
            while (reader.pos < end) {
                let tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.message = reader.bytes();
                    break;
                case 2:
                    message.code = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an AuthenticatedMessage message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ei.AuthenticatedMessage
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ei.AuthenticatedMessage} AuthenticatedMessage
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        AuthenticatedMessage.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an AuthenticatedMessage message.
         * @function verify
         * @memberof ei.AuthenticatedMessage
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        AuthenticatedMessage.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.message != null && message.hasOwnProperty("message"))
                if (!(message.message && typeof message.message.length === "number" || $util.isString(message.message)))
                    return "message: buffer expected";
            if (message.code != null && message.hasOwnProperty("code"))
                if (!$util.isString(message.code))
                    return "code: string expected";
            return null;
        };

        /**
         * Creates an AuthenticatedMessage message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ei.AuthenticatedMessage
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ei.AuthenticatedMessage} AuthenticatedMessage
         */
        AuthenticatedMessage.fromObject = function fromObject(object) {
            if (object instanceof $root.ei.AuthenticatedMessage)
                return object;
            let message = new $root.ei.AuthenticatedMessage();
            if (object.message != null)
                if (typeof object.message === "string")
                    $util.base64.decode(object.message, message.message = $util.newBuffer($util.base64.length(object.message)), 0);
                else if (object.message.length)
                    message.message = object.message;
            if (object.code != null)
                message.code = String(object.code);
            return message;
        };

        /**
         * Creates a plain object from an AuthenticatedMessage message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ei.AuthenticatedMessage
         * @static
         * @param {ei.AuthenticatedMessage} message AuthenticatedMessage
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        AuthenticatedMessage.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.defaults) {
                if (options.bytes === String)
                    object.message = "";
                else {
                    object.message = [];
                    if (options.bytes !== Array)
                        object.message = $util.newBuffer(object.message);
                }
                object.code = "";
            }
            if (message.message != null && message.hasOwnProperty("message"))
                object.message = options.bytes === String ? $util.base64.encode(message.message, 0, message.message.length) : options.bytes === Array ? Array.prototype.slice.call(message.message) : message.message;
            if (message.code != null && message.hasOwnProperty("code"))
                object.code = message.code;
            return object;
        };

        /**
         * Converts this AuthenticatedMessage to JSON.
         * @function toJSON
         * @memberof ei.AuthenticatedMessage
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        AuthenticatedMessage.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return AuthenticatedMessage;
    })();

    ei.LogCompleteMissionPayload = (function() {

        /**
         * Properties of a LogCompleteMissionPayload.
         * @memberof ei
         * @interface ILogCompleteMissionPayload
         * @property {ei.IMissionRequest|null} [req] LogCompleteMissionPayload req
         * @property {ei.ICompleteMissionResponse|null} [res] LogCompleteMissionPayload res
         */

        /**
         * Constructs a new LogCompleteMissionPayload.
         * @memberof ei
         * @classdesc Represents a LogCompleteMissionPayload.
         * @implements ILogCompleteMissionPayload
         * @constructor
         * @param {ei.ILogCompleteMissionPayload=} [properties] Properties to set
         */
        function LogCompleteMissionPayload(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * LogCompleteMissionPayload req.
         * @member {ei.IMissionRequest|null|undefined} req
         * @memberof ei.LogCompleteMissionPayload
         * @instance
         */
        LogCompleteMissionPayload.prototype.req = null;

        /**
         * LogCompleteMissionPayload res.
         * @member {ei.ICompleteMissionResponse|null|undefined} res
         * @memberof ei.LogCompleteMissionPayload
         * @instance
         */
        LogCompleteMissionPayload.prototype.res = null;

        /**
         * Creates a new LogCompleteMissionPayload instance using the specified properties.
         * @function create
         * @memberof ei.LogCompleteMissionPayload
         * @static
         * @param {ei.ILogCompleteMissionPayload=} [properties] Properties to set
         * @returns {ei.LogCompleteMissionPayload} LogCompleteMissionPayload instance
         */
        LogCompleteMissionPayload.create = function create(properties) {
            return new LogCompleteMissionPayload(properties);
        };

        /**
         * Encodes the specified LogCompleteMissionPayload message. Does not implicitly {@link ei.LogCompleteMissionPayload.verify|verify} messages.
         * @function encode
         * @memberof ei.LogCompleteMissionPayload
         * @static
         * @param {ei.ILogCompleteMissionPayload} message LogCompleteMissionPayload message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        LogCompleteMissionPayload.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.req != null && Object.hasOwnProperty.call(message, "req"))
                $root.ei.MissionRequest.encode(message.req, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.res != null && Object.hasOwnProperty.call(message, "res"))
                $root.ei.CompleteMissionResponse.encode(message.res, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified LogCompleteMissionPayload message, length delimited. Does not implicitly {@link ei.LogCompleteMissionPayload.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ei.LogCompleteMissionPayload
         * @static
         * @param {ei.ILogCompleteMissionPayload} message LogCompleteMissionPayload message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        LogCompleteMissionPayload.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a LogCompleteMissionPayload message from the specified reader or buffer.
         * @function decode
         * @memberof ei.LogCompleteMissionPayload
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ei.LogCompleteMissionPayload} LogCompleteMissionPayload
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        LogCompleteMissionPayload.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ei.LogCompleteMissionPayload();
            while (reader.pos < end) {
                let tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.req = $root.ei.MissionRequest.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.res = $root.ei.CompleteMissionResponse.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a LogCompleteMissionPayload message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ei.LogCompleteMissionPayload
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ei.LogCompleteMissionPayload} LogCompleteMissionPayload
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        LogCompleteMissionPayload.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a LogCompleteMissionPayload message.
         * @function verify
         * @memberof ei.LogCompleteMissionPayload
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        LogCompleteMissionPayload.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.req != null && message.hasOwnProperty("req")) {
                let error = $root.ei.MissionRequest.verify(message.req);
                if (error)
                    return "req." + error;
            }
            if (message.res != null && message.hasOwnProperty("res")) {
                let error = $root.ei.CompleteMissionResponse.verify(message.res);
                if (error)
                    return "res." + error;
            }
            return null;
        };

        /**
         * Creates a LogCompleteMissionPayload message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ei.LogCompleteMissionPayload
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ei.LogCompleteMissionPayload} LogCompleteMissionPayload
         */
        LogCompleteMissionPayload.fromObject = function fromObject(object) {
            if (object instanceof $root.ei.LogCompleteMissionPayload)
                return object;
            let message = new $root.ei.LogCompleteMissionPayload();
            if (object.req != null) {
                if (typeof object.req !== "object")
                    throw TypeError(".ei.LogCompleteMissionPayload.req: object expected");
                message.req = $root.ei.MissionRequest.fromObject(object.req);
            }
            if (object.res != null) {
                if (typeof object.res !== "object")
                    throw TypeError(".ei.LogCompleteMissionPayload.res: object expected");
                message.res = $root.ei.CompleteMissionResponse.fromObject(object.res);
            }
            return message;
        };

        /**
         * Creates a plain object from a LogCompleteMissionPayload message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ei.LogCompleteMissionPayload
         * @static
         * @param {ei.LogCompleteMissionPayload} message LogCompleteMissionPayload
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        LogCompleteMissionPayload.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.defaults) {
                object.req = null;
                object.res = null;
            }
            if (message.req != null && message.hasOwnProperty("req"))
                object.req = $root.ei.MissionRequest.toObject(message.req, options);
            if (message.res != null && message.hasOwnProperty("res"))
                object.res = $root.ei.CompleteMissionResponse.toObject(message.res, options);
            return object;
        };

        /**
         * Converts this LogCompleteMissionPayload to JSON.
         * @function toJSON
         * @memberof ei.LogCompleteMissionPayload
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        LogCompleteMissionPayload.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return LogCompleteMissionPayload;
    })();

    ei.LogCraftArtifactPayload = (function() {

        /**
         * Properties of a LogCraftArtifactPayload.
         * @memberof ei
         * @interface ILogCraftArtifactPayload
         * @property {ei.ICraftArtifactRequest|null} [req] LogCraftArtifactPayload req
         * @property {ei.ICraftArtifactResponse|null} [res] LogCraftArtifactPayload res
         */

        /**
         * Constructs a new LogCraftArtifactPayload.
         * @memberof ei
         * @classdesc Represents a LogCraftArtifactPayload.
         * @implements ILogCraftArtifactPayload
         * @constructor
         * @param {ei.ILogCraftArtifactPayload=} [properties] Properties to set
         */
        function LogCraftArtifactPayload(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * LogCraftArtifactPayload req.
         * @member {ei.ICraftArtifactRequest|null|undefined} req
         * @memberof ei.LogCraftArtifactPayload
         * @instance
         */
        LogCraftArtifactPayload.prototype.req = null;

        /**
         * LogCraftArtifactPayload res.
         * @member {ei.ICraftArtifactResponse|null|undefined} res
         * @memberof ei.LogCraftArtifactPayload
         * @instance
         */
        LogCraftArtifactPayload.prototype.res = null;

        /**
         * Creates a new LogCraftArtifactPayload instance using the specified properties.
         * @function create
         * @memberof ei.LogCraftArtifactPayload
         * @static
         * @param {ei.ILogCraftArtifactPayload=} [properties] Properties to set
         * @returns {ei.LogCraftArtifactPayload} LogCraftArtifactPayload instance
         */
        LogCraftArtifactPayload.create = function create(properties) {
            return new LogCraftArtifactPayload(properties);
        };

        /**
         * Encodes the specified LogCraftArtifactPayload message. Does not implicitly {@link ei.LogCraftArtifactPayload.verify|verify} messages.
         * @function encode
         * @memberof ei.LogCraftArtifactPayload
         * @static
         * @param {ei.ILogCraftArtifactPayload} message LogCraftArtifactPayload message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        LogCraftArtifactPayload.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.req != null && Object.hasOwnProperty.call(message, "req"))
                $root.ei.CraftArtifactRequest.encode(message.req, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.res != null && Object.hasOwnProperty.call(message, "res"))
                $root.ei.CraftArtifactResponse.encode(message.res, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified LogCraftArtifactPayload message, length delimited. Does not implicitly {@link ei.LogCraftArtifactPayload.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ei.LogCraftArtifactPayload
         * @static
         * @param {ei.ILogCraftArtifactPayload} message LogCraftArtifactPayload message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        LogCraftArtifactPayload.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a LogCraftArtifactPayload message from the specified reader or buffer.
         * @function decode
         * @memberof ei.LogCraftArtifactPayload
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ei.LogCraftArtifactPayload} LogCraftArtifactPayload
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        LogCraftArtifactPayload.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ei.LogCraftArtifactPayload();
            while (reader.pos < end) {
                let tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.req = $root.ei.CraftArtifactRequest.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.res = $root.ei.CraftArtifactResponse.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a LogCraftArtifactPayload message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ei.LogCraftArtifactPayload
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ei.LogCraftArtifactPayload} LogCraftArtifactPayload
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        LogCraftArtifactPayload.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a LogCraftArtifactPayload message.
         * @function verify
         * @memberof ei.LogCraftArtifactPayload
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        LogCraftArtifactPayload.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.req != null && message.hasOwnProperty("req")) {
                let error = $root.ei.CraftArtifactRequest.verify(message.req);
                if (error)
                    return "req." + error;
            }
            if (message.res != null && message.hasOwnProperty("res")) {
                let error = $root.ei.CraftArtifactResponse.verify(message.res);
                if (error)
                    return "res." + error;
            }
            return null;
        };

        /**
         * Creates a LogCraftArtifactPayload message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ei.LogCraftArtifactPayload
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ei.LogCraftArtifactPayload} LogCraftArtifactPayload
         */
        LogCraftArtifactPayload.fromObject = function fromObject(object) {
            if (object instanceof $root.ei.LogCraftArtifactPayload)
                return object;
            let message = new $root.ei.LogCraftArtifactPayload();
            if (object.req != null) {
                if (typeof object.req !== "object")
                    throw TypeError(".ei.LogCraftArtifactPayload.req: object expected");
                message.req = $root.ei.CraftArtifactRequest.fromObject(object.req);
            }
            if (object.res != null) {
                if (typeof object.res !== "object")
                    throw TypeError(".ei.LogCraftArtifactPayload.res: object expected");
                message.res = $root.ei.CraftArtifactResponse.fromObject(object.res);
            }
            return message;
        };

        /**
         * Creates a plain object from a LogCraftArtifactPayload message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ei.LogCraftArtifactPayload
         * @static
         * @param {ei.LogCraftArtifactPayload} message LogCraftArtifactPayload
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        LogCraftArtifactPayload.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.defaults) {
                object.req = null;
                object.res = null;
            }
            if (message.req != null && message.hasOwnProperty("req"))
                object.req = $root.ei.CraftArtifactRequest.toObject(message.req, options);
            if (message.res != null && message.hasOwnProperty("res"))
                object.res = $root.ei.CraftArtifactResponse.toObject(message.res, options);
            return object;
        };

        /**
         * Converts this LogCraftArtifactPayload to JSON.
         * @function toJSON
         * @memberof ei.LogCraftArtifactPayload
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        LogCraftArtifactPayload.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return LogCraftArtifactPayload;
    })();

    ei.LogConsumeArtifactPayload = (function() {

        /**
         * Properties of a LogConsumeArtifactPayload.
         * @memberof ei
         * @interface ILogConsumeArtifactPayload
         * @property {ei.IConsumeArtifactRequest|null} [req] LogConsumeArtifactPayload req
         * @property {ei.IConsumeArtifactResponse|null} [res] LogConsumeArtifactPayload res
         */

        /**
         * Constructs a new LogConsumeArtifactPayload.
         * @memberof ei
         * @classdesc Represents a LogConsumeArtifactPayload.
         * @implements ILogConsumeArtifactPayload
         * @constructor
         * @param {ei.ILogConsumeArtifactPayload=} [properties] Properties to set
         */
        function LogConsumeArtifactPayload(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * LogConsumeArtifactPayload req.
         * @member {ei.IConsumeArtifactRequest|null|undefined} req
         * @memberof ei.LogConsumeArtifactPayload
         * @instance
         */
        LogConsumeArtifactPayload.prototype.req = null;

        /**
         * LogConsumeArtifactPayload res.
         * @member {ei.IConsumeArtifactResponse|null|undefined} res
         * @memberof ei.LogConsumeArtifactPayload
         * @instance
         */
        LogConsumeArtifactPayload.prototype.res = null;

        /**
         * Creates a new LogConsumeArtifactPayload instance using the specified properties.
         * @function create
         * @memberof ei.LogConsumeArtifactPayload
         * @static
         * @param {ei.ILogConsumeArtifactPayload=} [properties] Properties to set
         * @returns {ei.LogConsumeArtifactPayload} LogConsumeArtifactPayload instance
         */
        LogConsumeArtifactPayload.create = function create(properties) {
            return new LogConsumeArtifactPayload(properties);
        };

        /**
         * Encodes the specified LogConsumeArtifactPayload message. Does not implicitly {@link ei.LogConsumeArtifactPayload.verify|verify} messages.
         * @function encode
         * @memberof ei.LogConsumeArtifactPayload
         * @static
         * @param {ei.ILogConsumeArtifactPayload} message LogConsumeArtifactPayload message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        LogConsumeArtifactPayload.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.req != null && Object.hasOwnProperty.call(message, "req"))
                $root.ei.ConsumeArtifactRequest.encode(message.req, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.res != null && Object.hasOwnProperty.call(message, "res"))
                $root.ei.ConsumeArtifactResponse.encode(message.res, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified LogConsumeArtifactPayload message, length delimited. Does not implicitly {@link ei.LogConsumeArtifactPayload.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ei.LogConsumeArtifactPayload
         * @static
         * @param {ei.ILogConsumeArtifactPayload} message LogConsumeArtifactPayload message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        LogConsumeArtifactPayload.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a LogConsumeArtifactPayload message from the specified reader or buffer.
         * @function decode
         * @memberof ei.LogConsumeArtifactPayload
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ei.LogConsumeArtifactPayload} LogConsumeArtifactPayload
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        LogConsumeArtifactPayload.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ei.LogConsumeArtifactPayload();
            while (reader.pos < end) {
                let tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.req = $root.ei.ConsumeArtifactRequest.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.res = $root.ei.ConsumeArtifactResponse.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a LogConsumeArtifactPayload message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ei.LogConsumeArtifactPayload
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ei.LogConsumeArtifactPayload} LogConsumeArtifactPayload
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        LogConsumeArtifactPayload.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a LogConsumeArtifactPayload message.
         * @function verify
         * @memberof ei.LogConsumeArtifactPayload
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        LogConsumeArtifactPayload.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.req != null && message.hasOwnProperty("req")) {
                let error = $root.ei.ConsumeArtifactRequest.verify(message.req);
                if (error)
                    return "req." + error;
            }
            if (message.res != null && message.hasOwnProperty("res")) {
                let error = $root.ei.ConsumeArtifactResponse.verify(message.res);
                if (error)
                    return "res." + error;
            }
            return null;
        };

        /**
         * Creates a LogConsumeArtifactPayload message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ei.LogConsumeArtifactPayload
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ei.LogConsumeArtifactPayload} LogConsumeArtifactPayload
         */
        LogConsumeArtifactPayload.fromObject = function fromObject(object) {
            if (object instanceof $root.ei.LogConsumeArtifactPayload)
                return object;
            let message = new $root.ei.LogConsumeArtifactPayload();
            if (object.req != null) {
                if (typeof object.req !== "object")
                    throw TypeError(".ei.LogConsumeArtifactPayload.req: object expected");
                message.req = $root.ei.ConsumeArtifactRequest.fromObject(object.req);
            }
            if (object.res != null) {
                if (typeof object.res !== "object")
                    throw TypeError(".ei.LogConsumeArtifactPayload.res: object expected");
                message.res = $root.ei.ConsumeArtifactResponse.fromObject(object.res);
            }
            return message;
        };

        /**
         * Creates a plain object from a LogConsumeArtifactPayload message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ei.LogConsumeArtifactPayload
         * @static
         * @param {ei.LogConsumeArtifactPayload} message LogConsumeArtifactPayload
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        LogConsumeArtifactPayload.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.defaults) {
                object.req = null;
                object.res = null;
            }
            if (message.req != null && message.hasOwnProperty("req"))
                object.req = $root.ei.ConsumeArtifactRequest.toObject(message.req, options);
            if (message.res != null && message.hasOwnProperty("res"))
                object.res = $root.ei.ConsumeArtifactResponse.toObject(message.res, options);
            return object;
        };

        /**
         * Converts this LogConsumeArtifactPayload to JSON.
         * @function toJSON
         * @memberof ei.LogConsumeArtifactPayload
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        LogConsumeArtifactPayload.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return LogConsumeArtifactPayload;
    })();

    ei.LogSetArtifactPayload = (function() {

        /**
         * Properties of a LogSetArtifactPayload.
         * @memberof ei
         * @interface ILogSetArtifactPayload
         * @property {ei.ISetArtifactRequest|null} [req] LogSetArtifactPayload req
         * @property {ei.ISetArtifactResponse|null} [res] LogSetArtifactPayload res
         */

        /**
         * Constructs a new LogSetArtifactPayload.
         * @memberof ei
         * @classdesc Represents a LogSetArtifactPayload.
         * @implements ILogSetArtifactPayload
         * @constructor
         * @param {ei.ILogSetArtifactPayload=} [properties] Properties to set
         */
        function LogSetArtifactPayload(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * LogSetArtifactPayload req.
         * @member {ei.ISetArtifactRequest|null|undefined} req
         * @memberof ei.LogSetArtifactPayload
         * @instance
         */
        LogSetArtifactPayload.prototype.req = null;

        /**
         * LogSetArtifactPayload res.
         * @member {ei.ISetArtifactResponse|null|undefined} res
         * @memberof ei.LogSetArtifactPayload
         * @instance
         */
        LogSetArtifactPayload.prototype.res = null;

        /**
         * Creates a new LogSetArtifactPayload instance using the specified properties.
         * @function create
         * @memberof ei.LogSetArtifactPayload
         * @static
         * @param {ei.ILogSetArtifactPayload=} [properties] Properties to set
         * @returns {ei.LogSetArtifactPayload} LogSetArtifactPayload instance
         */
        LogSetArtifactPayload.create = function create(properties) {
            return new LogSetArtifactPayload(properties);
        };

        /**
         * Encodes the specified LogSetArtifactPayload message. Does not implicitly {@link ei.LogSetArtifactPayload.verify|verify} messages.
         * @function encode
         * @memberof ei.LogSetArtifactPayload
         * @static
         * @param {ei.ILogSetArtifactPayload} message LogSetArtifactPayload message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        LogSetArtifactPayload.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.req != null && Object.hasOwnProperty.call(message, "req"))
                $root.ei.SetArtifactRequest.encode(message.req, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.res != null && Object.hasOwnProperty.call(message, "res"))
                $root.ei.SetArtifactResponse.encode(message.res, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified LogSetArtifactPayload message, length delimited. Does not implicitly {@link ei.LogSetArtifactPayload.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ei.LogSetArtifactPayload
         * @static
         * @param {ei.ILogSetArtifactPayload} message LogSetArtifactPayload message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        LogSetArtifactPayload.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a LogSetArtifactPayload message from the specified reader or buffer.
         * @function decode
         * @memberof ei.LogSetArtifactPayload
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ei.LogSetArtifactPayload} LogSetArtifactPayload
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        LogSetArtifactPayload.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ei.LogSetArtifactPayload();
            while (reader.pos < end) {
                let tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.req = $root.ei.SetArtifactRequest.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.res = $root.ei.SetArtifactResponse.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a LogSetArtifactPayload message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ei.LogSetArtifactPayload
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ei.LogSetArtifactPayload} LogSetArtifactPayload
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        LogSetArtifactPayload.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a LogSetArtifactPayload message.
         * @function verify
         * @memberof ei.LogSetArtifactPayload
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        LogSetArtifactPayload.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.req != null && message.hasOwnProperty("req")) {
                let error = $root.ei.SetArtifactRequest.verify(message.req);
                if (error)
                    return "req." + error;
            }
            if (message.res != null && message.hasOwnProperty("res")) {
                let error = $root.ei.SetArtifactResponse.verify(message.res);
                if (error)
                    return "res." + error;
            }
            return null;
        };

        /**
         * Creates a LogSetArtifactPayload message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ei.LogSetArtifactPayload
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ei.LogSetArtifactPayload} LogSetArtifactPayload
         */
        LogSetArtifactPayload.fromObject = function fromObject(object) {
            if (object instanceof $root.ei.LogSetArtifactPayload)
                return object;
            let message = new $root.ei.LogSetArtifactPayload();
            if (object.req != null) {
                if (typeof object.req !== "object")
                    throw TypeError(".ei.LogSetArtifactPayload.req: object expected");
                message.req = $root.ei.SetArtifactRequest.fromObject(object.req);
            }
            if (object.res != null) {
                if (typeof object.res !== "object")
                    throw TypeError(".ei.LogSetArtifactPayload.res: object expected");
                message.res = $root.ei.SetArtifactResponse.fromObject(object.res);
            }
            return message;
        };

        /**
         * Creates a plain object from a LogSetArtifactPayload message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ei.LogSetArtifactPayload
         * @static
         * @param {ei.LogSetArtifactPayload} message LogSetArtifactPayload
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        LogSetArtifactPayload.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.defaults) {
                object.req = null;
                object.res = null;
            }
            if (message.req != null && message.hasOwnProperty("req"))
                object.req = $root.ei.SetArtifactRequest.toObject(message.req, options);
            if (message.res != null && message.hasOwnProperty("res"))
                object.res = $root.ei.SetArtifactResponse.toObject(message.res, options);
            return object;
        };

        /**
         * Converts this LogSetArtifactPayload to JSON.
         * @function toJSON
         * @memberof ei.LogSetArtifactPayload
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        LogSetArtifactPayload.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return LogSetArtifactPayload;
    })();

    ei.AccountTransferPayload = (function() {

        /**
         * Properties of an AccountTransferPayload.
         * @memberof ei
         * @interface IAccountTransferPayload
         * @property {string|null} [fromId] AccountTransferPayload fromId
         * @property {string|null} [toEiUserId] AccountTransferPayload toEiUserId
         */

        /**
         * Constructs a new AccountTransferPayload.
         * @memberof ei
         * @classdesc Represents an AccountTransferPayload.
         * @implements IAccountTransferPayload
         * @constructor
         * @param {ei.IAccountTransferPayload=} [properties] Properties to set
         */
        function AccountTransferPayload(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * AccountTransferPayload fromId.
         * @member {string} fromId
         * @memberof ei.AccountTransferPayload
         * @instance
         */
        AccountTransferPayload.prototype.fromId = "";

        /**
         * AccountTransferPayload toEiUserId.
         * @member {string} toEiUserId
         * @memberof ei.AccountTransferPayload
         * @instance
         */
        AccountTransferPayload.prototype.toEiUserId = "";

        /**
         * Creates a new AccountTransferPayload instance using the specified properties.
         * @function create
         * @memberof ei.AccountTransferPayload
         * @static
         * @param {ei.IAccountTransferPayload=} [properties] Properties to set
         * @returns {ei.AccountTransferPayload} AccountTransferPayload instance
         */
        AccountTransferPayload.create = function create(properties) {
            return new AccountTransferPayload(properties);
        };

        /**
         * Encodes the specified AccountTransferPayload message. Does not implicitly {@link ei.AccountTransferPayload.verify|verify} messages.
         * @function encode
         * @memberof ei.AccountTransferPayload
         * @static
         * @param {ei.IAccountTransferPayload} message AccountTransferPayload message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        AccountTransferPayload.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.fromId != null && Object.hasOwnProperty.call(message, "fromId"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.fromId);
            if (message.toEiUserId != null && Object.hasOwnProperty.call(message, "toEiUserId"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.toEiUserId);
            return writer;
        };

        /**
         * Encodes the specified AccountTransferPayload message, length delimited. Does not implicitly {@link ei.AccountTransferPayload.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ei.AccountTransferPayload
         * @static
         * @param {ei.IAccountTransferPayload} message AccountTransferPayload message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        AccountTransferPayload.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an AccountTransferPayload message from the specified reader or buffer.
         * @function decode
         * @memberof ei.AccountTransferPayload
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ei.AccountTransferPayload} AccountTransferPayload
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        AccountTransferPayload.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ei.AccountTransferPayload();
            while (reader.pos < end) {
                let tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.fromId = reader.string();
                    break;
                case 2:
                    message.toEiUserId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an AccountTransferPayload message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ei.AccountTransferPayload
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ei.AccountTransferPayload} AccountTransferPayload
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        AccountTransferPayload.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an AccountTransferPayload message.
         * @function verify
         * @memberof ei.AccountTransferPayload
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        AccountTransferPayload.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.fromId != null && message.hasOwnProperty("fromId"))
                if (!$util.isString(message.fromId))
                    return "fromId: string expected";
            if (message.toEiUserId != null && message.hasOwnProperty("toEiUserId"))
                if (!$util.isString(message.toEiUserId))
                    return "toEiUserId: string expected";
            return null;
        };

        /**
         * Creates an AccountTransferPayload message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ei.AccountTransferPayload
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ei.AccountTransferPayload} AccountTransferPayload
         */
        AccountTransferPayload.fromObject = function fromObject(object) {
            if (object instanceof $root.ei.AccountTransferPayload)
                return object;
            let message = new $root.ei.AccountTransferPayload();
            if (object.fromId != null)
                message.fromId = String(object.fromId);
            if (object.toEiUserId != null)
                message.toEiUserId = String(object.toEiUserId);
            return message;
        };

        /**
         * Creates a plain object from an AccountTransferPayload message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ei.AccountTransferPayload
         * @static
         * @param {ei.AccountTransferPayload} message AccountTransferPayload
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        AccountTransferPayload.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.defaults) {
                object.fromId = "";
                object.toEiUserId = "";
            }
            if (message.fromId != null && message.hasOwnProperty("fromId"))
                object.fromId = message.fromId;
            if (message.toEiUserId != null && message.hasOwnProperty("toEiUserId"))
                object.toEiUserId = message.toEiUserId;
            return object;
        };

        /**
         * Converts this AccountTransferPayload to JSON.
         * @function toJSON
         * @memberof ei.AccountTransferPayload
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        AccountTransferPayload.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return AccountTransferPayload;
    })();

    ei.SaveBackupResponse = (function() {

        /**
         * Properties of a SaveBackupResponse.
         * @memberof ei
         * @interface ISaveBackupResponse
         * @property {boolean|null} [success] SaveBackupResponse success
         * @property {number|null} [errorCode] SaveBackupResponse errorCode
         * @property {string|null} [message] SaveBackupResponse message
         * @property {ei.IBackup|null} [existingBackup] SaveBackupResponse existingBackup
         */

        /**
         * Constructs a new SaveBackupResponse.
         * @memberof ei
         * @classdesc Represents a SaveBackupResponse.
         * @implements ISaveBackupResponse
         * @constructor
         * @param {ei.ISaveBackupResponse=} [properties] Properties to set
         */
        function SaveBackupResponse(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * SaveBackupResponse success.
         * @member {boolean} success
         * @memberof ei.SaveBackupResponse
         * @instance
         */
        SaveBackupResponse.prototype.success = false;

        /**
         * SaveBackupResponse errorCode.
         * @member {number} errorCode
         * @memberof ei.SaveBackupResponse
         * @instance
         */
        SaveBackupResponse.prototype.errorCode = 0;

        /**
         * SaveBackupResponse message.
         * @member {string} message
         * @memberof ei.SaveBackupResponse
         * @instance
         */
        SaveBackupResponse.prototype.message = "";

        /**
         * SaveBackupResponse existingBackup.
         * @member {ei.IBackup|null|undefined} existingBackup
         * @memberof ei.SaveBackupResponse
         * @instance
         */
        SaveBackupResponse.prototype.existingBackup = null;

        /**
         * Creates a new SaveBackupResponse instance using the specified properties.
         * @function create
         * @memberof ei.SaveBackupResponse
         * @static
         * @param {ei.ISaveBackupResponse=} [properties] Properties to set
         * @returns {ei.SaveBackupResponse} SaveBackupResponse instance
         */
        SaveBackupResponse.create = function create(properties) {
            return new SaveBackupResponse(properties);
        };

        /**
         * Encodes the specified SaveBackupResponse message. Does not implicitly {@link ei.SaveBackupResponse.verify|verify} messages.
         * @function encode
         * @memberof ei.SaveBackupResponse
         * @static
         * @param {ei.ISaveBackupResponse} message SaveBackupResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SaveBackupResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.success != null && Object.hasOwnProperty.call(message, "success"))
                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.success);
            if (message.errorCode != null && Object.hasOwnProperty.call(message, "errorCode"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.errorCode);
            if (message.message != null && Object.hasOwnProperty.call(message, "message"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.message);
            if (message.existingBackup != null && Object.hasOwnProperty.call(message, "existingBackup"))
                $root.ei.Backup.encode(message.existingBackup, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified SaveBackupResponse message, length delimited. Does not implicitly {@link ei.SaveBackupResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ei.SaveBackupResponse
         * @static
         * @param {ei.ISaveBackupResponse} message SaveBackupResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SaveBackupResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a SaveBackupResponse message from the specified reader or buffer.
         * @function decode
         * @memberof ei.SaveBackupResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ei.SaveBackupResponse} SaveBackupResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SaveBackupResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ei.SaveBackupResponse();
            while (reader.pos < end) {
                let tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.success = reader.bool();
                    break;
                case 2:
                    message.errorCode = reader.uint32();
                    break;
                case 3:
                    message.message = reader.string();
                    break;
                case 4:
                    message.existingBackup = $root.ei.Backup.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a SaveBackupResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ei.SaveBackupResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ei.SaveBackupResponse} SaveBackupResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SaveBackupResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a SaveBackupResponse message.
         * @function verify
         * @memberof ei.SaveBackupResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        SaveBackupResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.success != null && message.hasOwnProperty("success"))
                if (typeof message.success !== "boolean")
                    return "success: boolean expected";
            if (message.errorCode != null && message.hasOwnProperty("errorCode"))
                if (!$util.isInteger(message.errorCode))
                    return "errorCode: integer expected";
            if (message.message != null && message.hasOwnProperty("message"))
                if (!$util.isString(message.message))
                    return "message: string expected";
            if (message.existingBackup != null && message.hasOwnProperty("existingBackup")) {
                let error = $root.ei.Backup.verify(message.existingBackup);
                if (error)
                    return "existingBackup." + error;
            }
            return null;
        };

        /**
         * Creates a SaveBackupResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ei.SaveBackupResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ei.SaveBackupResponse} SaveBackupResponse
         */
        SaveBackupResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.ei.SaveBackupResponse)
                return object;
            let message = new $root.ei.SaveBackupResponse();
            if (object.success != null)
                message.success = Boolean(object.success);
            if (object.errorCode != null)
                message.errorCode = object.errorCode >>> 0;
            if (object.message != null)
                message.message = String(object.message);
            if (object.existingBackup != null) {
                if (typeof object.existingBackup !== "object")
                    throw TypeError(".ei.SaveBackupResponse.existingBackup: object expected");
                message.existingBackup = $root.ei.Backup.fromObject(object.existingBackup);
            }
            return message;
        };

        /**
         * Creates a plain object from a SaveBackupResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ei.SaveBackupResponse
         * @static
         * @param {ei.SaveBackupResponse} message SaveBackupResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        SaveBackupResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.defaults) {
                object.success = false;
                object.errorCode = 0;
                object.message = "";
                object.existingBackup = null;
            }
            if (message.success != null && message.hasOwnProperty("success"))
                object.success = message.success;
            if (message.errorCode != null && message.hasOwnProperty("errorCode"))
                object.errorCode = message.errorCode;
            if (message.message != null && message.hasOwnProperty("message"))
                object.message = message.message;
            if (message.existingBackup != null && message.hasOwnProperty("existingBackup"))
                object.existingBackup = $root.ei.Backup.toObject(message.existingBackup, options);
            return object;
        };

        /**
         * Converts this SaveBackupResponse to JSON.
         * @function toJSON
         * @memberof ei.SaveBackupResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        SaveBackupResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * ErrorCodes enum.
         * @name ei.SaveBackupResponse.ErrorCodes
         * @enum {number}
         * @property {number} NO_ERROR=0 NO_ERROR value
         * @property {number} USER_NOT_FOUND=1 USER_NOT_FOUND value
         * @property {number} COULD_NOT_OVERWRITE=2 COULD_NOT_OVERWRITE value
         * @property {number} BACKUP_OFFERED=3 BACKUP_OFFERED value
         * @property {number} BAD_USER_ID=4 BAD_USER_ID value
         */
        SaveBackupResponse.ErrorCodes = (function() {
            const valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "NO_ERROR"] = 0;
            values[valuesById[1] = "USER_NOT_FOUND"] = 1;
            values[valuesById[2] = "COULD_NOT_OVERWRITE"] = 2;
            values[valuesById[3] = "BACKUP_OFFERED"] = 3;
            values[valuesById[4] = "BAD_USER_ID"] = 4;
            return values;
        })();

        return SaveBackupResponse;
    })();

    ei.CleanAccountRequest = (function() {

        /**
         * Properties of a CleanAccountRequest.
         * @memberof ei
         * @interface ICleanAccountRequest
         * @property {string|null} [eiUserIdToKeep] CleanAccountRequest eiUserIdToKeep
         * @property {string|null} [gameServicesId] CleanAccountRequest gameServicesId
         */

        /**
         * Constructs a new CleanAccountRequest.
         * @memberof ei
         * @classdesc Represents a CleanAccountRequest.
         * @implements ICleanAccountRequest
         * @constructor
         * @param {ei.ICleanAccountRequest=} [properties] Properties to set
         */
        function CleanAccountRequest(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CleanAccountRequest eiUserIdToKeep.
         * @member {string} eiUserIdToKeep
         * @memberof ei.CleanAccountRequest
         * @instance
         */
        CleanAccountRequest.prototype.eiUserIdToKeep = "";

        /**
         * CleanAccountRequest gameServicesId.
         * @member {string} gameServicesId
         * @memberof ei.CleanAccountRequest
         * @instance
         */
        CleanAccountRequest.prototype.gameServicesId = "";

        /**
         * Creates a new CleanAccountRequest instance using the specified properties.
         * @function create
         * @memberof ei.CleanAccountRequest
         * @static
         * @param {ei.ICleanAccountRequest=} [properties] Properties to set
         * @returns {ei.CleanAccountRequest} CleanAccountRequest instance
         */
        CleanAccountRequest.create = function create(properties) {
            return new CleanAccountRequest(properties);
        };

        /**
         * Encodes the specified CleanAccountRequest message. Does not implicitly {@link ei.CleanAccountRequest.verify|verify} messages.
         * @function encode
         * @memberof ei.CleanAccountRequest
         * @static
         * @param {ei.ICleanAccountRequest} message CleanAccountRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CleanAccountRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.eiUserIdToKeep != null && Object.hasOwnProperty.call(message, "eiUserIdToKeep"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.eiUserIdToKeep);
            if (message.gameServicesId != null && Object.hasOwnProperty.call(message, "gameServicesId"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.gameServicesId);
            return writer;
        };

        /**
         * Encodes the specified CleanAccountRequest message, length delimited. Does not implicitly {@link ei.CleanAccountRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ei.CleanAccountRequest
         * @static
         * @param {ei.ICleanAccountRequest} message CleanAccountRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CleanAccountRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CleanAccountRequest message from the specified reader or buffer.
         * @function decode
         * @memberof ei.CleanAccountRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ei.CleanAccountRequest} CleanAccountRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CleanAccountRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ei.CleanAccountRequest();
            while (reader.pos < end) {
                let tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.eiUserIdToKeep = reader.string();
                    break;
                case 2:
                    message.gameServicesId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a CleanAccountRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ei.CleanAccountRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ei.CleanAccountRequest} CleanAccountRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CleanAccountRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CleanAccountRequest message.
         * @function verify
         * @memberof ei.CleanAccountRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CleanAccountRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.eiUserIdToKeep != null && message.hasOwnProperty("eiUserIdToKeep"))
                if (!$util.isString(message.eiUserIdToKeep))
                    return "eiUserIdToKeep: string expected";
            if (message.gameServicesId != null && message.hasOwnProperty("gameServicesId"))
                if (!$util.isString(message.gameServicesId))
                    return "gameServicesId: string expected";
            return null;
        };

        /**
         * Creates a CleanAccountRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ei.CleanAccountRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ei.CleanAccountRequest} CleanAccountRequest
         */
        CleanAccountRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.ei.CleanAccountRequest)
                return object;
            let message = new $root.ei.CleanAccountRequest();
            if (object.eiUserIdToKeep != null)
                message.eiUserIdToKeep = String(object.eiUserIdToKeep);
            if (object.gameServicesId != null)
                message.gameServicesId = String(object.gameServicesId);
            return message;
        };

        /**
         * Creates a plain object from a CleanAccountRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ei.CleanAccountRequest
         * @static
         * @param {ei.CleanAccountRequest} message CleanAccountRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CleanAccountRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.defaults) {
                object.eiUserIdToKeep = "";
                object.gameServicesId = "";
            }
            if (message.eiUserIdToKeep != null && message.hasOwnProperty("eiUserIdToKeep"))
                object.eiUserIdToKeep = message.eiUserIdToKeep;
            if (message.gameServicesId != null && message.hasOwnProperty("gameServicesId"))
                object.gameServicesId = message.gameServicesId;
            return object;
        };

        /**
         * Converts this CleanAccountRequest to JSON.
         * @function toJSON
         * @memberof ei.CleanAccountRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CleanAccountRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CleanAccountRequest;
    })();

    ei.ReturnEDTPayload = (function() {

        /**
         * Properties of a ReturnEDTPayload.
         * @memberof ei
         * @interface IReturnEDTPayload
         * @property {string|null} [eiUserId] ReturnEDTPayload eiUserId
         */

        /**
         * Constructs a new ReturnEDTPayload.
         * @memberof ei
         * @classdesc Represents a ReturnEDTPayload.
         * @implements IReturnEDTPayload
         * @constructor
         * @param {ei.IReturnEDTPayload=} [properties] Properties to set
         */
        function ReturnEDTPayload(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ReturnEDTPayload eiUserId.
         * @member {string} eiUserId
         * @memberof ei.ReturnEDTPayload
         * @instance
         */
        ReturnEDTPayload.prototype.eiUserId = "";

        /**
         * Creates a new ReturnEDTPayload instance using the specified properties.
         * @function create
         * @memberof ei.ReturnEDTPayload
         * @static
         * @param {ei.IReturnEDTPayload=} [properties] Properties to set
         * @returns {ei.ReturnEDTPayload} ReturnEDTPayload instance
         */
        ReturnEDTPayload.create = function create(properties) {
            return new ReturnEDTPayload(properties);
        };

        /**
         * Encodes the specified ReturnEDTPayload message. Does not implicitly {@link ei.ReturnEDTPayload.verify|verify} messages.
         * @function encode
         * @memberof ei.ReturnEDTPayload
         * @static
         * @param {ei.IReturnEDTPayload} message ReturnEDTPayload message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ReturnEDTPayload.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.eiUserId != null && Object.hasOwnProperty.call(message, "eiUserId"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.eiUserId);
            return writer;
        };

        /**
         * Encodes the specified ReturnEDTPayload message, length delimited. Does not implicitly {@link ei.ReturnEDTPayload.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ei.ReturnEDTPayload
         * @static
         * @param {ei.IReturnEDTPayload} message ReturnEDTPayload message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ReturnEDTPayload.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ReturnEDTPayload message from the specified reader or buffer.
         * @function decode
         * @memberof ei.ReturnEDTPayload
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ei.ReturnEDTPayload} ReturnEDTPayload
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ReturnEDTPayload.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ei.ReturnEDTPayload();
            while (reader.pos < end) {
                let tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.eiUserId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ReturnEDTPayload message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ei.ReturnEDTPayload
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ei.ReturnEDTPayload} ReturnEDTPayload
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ReturnEDTPayload.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ReturnEDTPayload message.
         * @function verify
         * @memberof ei.ReturnEDTPayload
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ReturnEDTPayload.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.eiUserId != null && message.hasOwnProperty("eiUserId"))
                if (!$util.isString(message.eiUserId))
                    return "eiUserId: string expected";
            return null;
        };

        /**
         * Creates a ReturnEDTPayload message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ei.ReturnEDTPayload
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ei.ReturnEDTPayload} ReturnEDTPayload
         */
        ReturnEDTPayload.fromObject = function fromObject(object) {
            if (object instanceof $root.ei.ReturnEDTPayload)
                return object;
            let message = new $root.ei.ReturnEDTPayload();
            if (object.eiUserId != null)
                message.eiUserId = String(object.eiUserId);
            return message;
        };

        /**
         * Creates a plain object from a ReturnEDTPayload message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ei.ReturnEDTPayload
         * @static
         * @param {ei.ReturnEDTPayload} message ReturnEDTPayload
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ReturnEDTPayload.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.defaults)
                object.eiUserId = "";
            if (message.eiUserId != null && message.hasOwnProperty("eiUserId"))
                object.eiUserId = message.eiUserId;
            return object;
        };

        /**
         * Converts this ReturnEDTPayload to JSON.
         * @function toJSON
         * @memberof ei.ReturnEDTPayload
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ReturnEDTPayload.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ReturnEDTPayload;
    })();

    /**
     * Egg enum.
     * @name ei.Egg
     * @enum {number}
     * @property {number} EDIBLE=1 EDIBLE value
     * @property {number} SUPERFOOD=2 SUPERFOOD value
     * @property {number} MEDICAL=3 MEDICAL value
     * @property {number} ROCKET_FUEL=4 ROCKET_FUEL value
     * @property {number} SUPER_MATERIAL=5 SUPER_MATERIAL value
     * @property {number} FUSION=6 FUSION value
     * @property {number} QUANTUM=7 QUANTUM value
     * @property {number} IMMORTALITY=8 IMMORTALITY value
     * @property {number} TACHYON=9 TACHYON value
     * @property {number} GRAVITON=10 GRAVITON value
     * @property {number} DILITHIUM=11 DILITHIUM value
     * @property {number} PRODIGY=12 PRODIGY value
     * @property {number} TERRAFORM=13 TERRAFORM value
     * @property {number} ANTIMATTER=14 ANTIMATTER value
     * @property {number} DARK_MATTER=15 DARK_MATTER value
     * @property {number} AI=16 AI value
     * @property {number} NEBULA=17 NEBULA value
     * @property {number} UNIVERSE=18 UNIVERSE value
     * @property {number} ENLIGHTENMENT=19 ENLIGHTENMENT value
     * @property {number} CHOCOLATE=100 CHOCOLATE value
     * @property {number} EASTER=101 EASTER value
     * @property {number} WATERBALLOON=102 WATERBALLOON value
     * @property {number} FIREWORK=103 FIREWORK value
     * @property {number} PUMPKIN=104 PUMPKIN value
     * @property {number} UNKNOWN=1000 UNKNOWN value
     */
    ei.Egg = (function() {
        const valuesById = {}, values = Object.create(valuesById);
        values[valuesById[1] = "EDIBLE"] = 1;
        values[valuesById[2] = "SUPERFOOD"] = 2;
        values[valuesById[3] = "MEDICAL"] = 3;
        values[valuesById[4] = "ROCKET_FUEL"] = 4;
        values[valuesById[5] = "SUPER_MATERIAL"] = 5;
        values[valuesById[6] = "FUSION"] = 6;
        values[valuesById[7] = "QUANTUM"] = 7;
        values[valuesById[8] = "IMMORTALITY"] = 8;
        values[valuesById[9] = "TACHYON"] = 9;
        values[valuesById[10] = "GRAVITON"] = 10;
        values[valuesById[11] = "DILITHIUM"] = 11;
        values[valuesById[12] = "PRODIGY"] = 12;
        values[valuesById[13] = "TERRAFORM"] = 13;
        values[valuesById[14] = "ANTIMATTER"] = 14;
        values[valuesById[15] = "DARK_MATTER"] = 15;
        values[valuesById[16] = "AI"] = 16;
        values[valuesById[17] = "NEBULA"] = 17;
        values[valuesById[18] = "UNIVERSE"] = 18;
        values[valuesById[19] = "ENLIGHTENMENT"] = 19;
        values[valuesById[100] = "CHOCOLATE"] = 100;
        values[valuesById[101] = "EASTER"] = 101;
        values[valuesById[102] = "WATERBALLOON"] = 102;
        values[valuesById[103] = "FIREWORK"] = 103;
        values[valuesById[104] = "PUMPKIN"] = 104;
        values[valuesById[1000] = "UNKNOWN"] = 1000;
        return values;
    })();

    /**
     * FarmType enum.
     * @name ei.FarmType
     * @enum {number}
     * @property {number} EMPTY=1 EMPTY value
     * @property {number} HOME=2 HOME value
     * @property {number} CONTRACT=3 CONTRACT value
     */
    ei.FarmType = (function() {
        const valuesById = {}, values = Object.create(valuesById);
        values[valuesById[1] = "EMPTY"] = 1;
        values[valuesById[2] = "HOME"] = 2;
        values[valuesById[3] = "CONTRACT"] = 3;
        return values;
    })();

    /**
     * GoalType enum.
     * @name ei.GoalType
     * @enum {number}
     * @property {number} EGGS_LAID=1 EGGS_LAID value
     * @property {number} UNKNOWN_GOAL=100 UNKNOWN_GOAL value
     */
    ei.GoalType = (function() {
        const valuesById = {}, values = Object.create(valuesById);
        values[valuesById[1] = "EGGS_LAID"] = 1;
        values[valuesById[100] = "UNKNOWN_GOAL"] = 100;
        return values;
    })();

    /**
     * RewardType enum.
     * @name ei.RewardType
     * @enum {number}
     * @property {number} CASH=1 CASH value
     * @property {number} GOLD=2 GOLD value
     * @property {number} SOUL_EGGS=3 SOUL_EGGS value
     * @property {number} EGGS_OF_PROPHECY=4 EGGS_OF_PROPHECY value
     * @property {number} EPIC_RESEARCH_ITEM=5 EPIC_RESEARCH_ITEM value
     * @property {number} PIGGY_FILL=6 PIGGY_FILL value
     * @property {number} PIGGY_MULTIPLIER=7 PIGGY_MULTIPLIER value
     * @property {number} PIGGY_LEVEL_BUMP=8 PIGGY_LEVEL_BUMP value
     * @property {number} BOOST=9 BOOST value
     * @property {number} BOOST_TOKEN=10 BOOST_TOKEN value
     * @property {number} UNKNOWN_REWARD=100 UNKNOWN_REWARD value
     */
    ei.RewardType = (function() {
        const valuesById = {}, values = Object.create(valuesById);
        values[valuesById[1] = "CASH"] = 1;
        values[valuesById[2] = "GOLD"] = 2;
        values[valuesById[3] = "SOUL_EGGS"] = 3;
        values[valuesById[4] = "EGGS_OF_PROPHECY"] = 4;
        values[valuesById[5] = "EPIC_RESEARCH_ITEM"] = 5;
        values[valuesById[6] = "PIGGY_FILL"] = 6;
        values[valuesById[7] = "PIGGY_MULTIPLIER"] = 7;
        values[valuesById[8] = "PIGGY_LEVEL_BUMP"] = 8;
        values[valuesById[9] = "BOOST"] = 9;
        values[valuesById[10] = "BOOST_TOKEN"] = 10;
        values[valuesById[100] = "UNKNOWN_REWARD"] = 100;
        return values;
    })();

    return ei;
})();

export { $root as default };
